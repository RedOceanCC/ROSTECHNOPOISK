const database = require('../models/Database');
const NotificationLogger = require('../utils/notificationLogger');

class NotificationService {
  // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static async sendNotification(userId, notificationData) {
    const startTime = Date.now();
    
    try {
      NotificationLogger.debug('–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—á–∞—Ç–æ', { userId, type: notificationData.type });
      
      const { type, title, message } = notificationData;
      
      const sql = `
        INSERT INTO notifications (user_id, type, title, message)
        VALUES (?, ?, ?, ?)
      `;
      
      const result = await database.run(sql, [userId, type, title, message]);
      
      NotificationLogger.logNotificationCreated(userId, notificationData, result.id);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot
      try {
        await this.sendTelegramNotification(userId, { title, message });
        NotificationLogger.logTelegramSent(userId, title, true);
      } catch (telegramError) {
        NotificationLogger.logTelegramSent(userId, title, false, telegramError);
      }
      
      const duration = Date.now() - startTime;
      NotificationLogger.logPerformance('sendNotification', duration, { userId, notificationId: result.id });
      
      return result.id;
      
    } catch (error) {
      NotificationLogger.logNotificationError(userId, notificationData, error);
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserNotifications(userId, limit = 50) {
    const startTime = Date.now();
    
    try {
      NotificationLogger.debug('–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—á–∞—Ç–æ', { userId, limit });
      
      const sql = `
        SELECT * FROM notifications 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT ?
      `;
      
      const notifications = await database.all(sql, [userId, limit]);
      
      NotificationLogger.logNotificationsFetched(userId, notifications.length, { limit });
      
      const duration = Date.now() - startTime;
      NotificationLogger.logPerformance('getUserNotifications', duration, { userId, count: notifications.length });
      
      return notifications;
      
    } catch (error) {
      NotificationLogger.logNotificationError(userId, { operation: 'getUserNotifications' }, error);
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async getUnreadNotifications(userId) {
    try {
      const sql = `
        SELECT * FROM notifications 
        WHERE user_id = ? AND read_at IS NULL 
        ORDER BY created_at DESC
      `;
      
      return await database.all(sql, [userId]);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
  
  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  static async markAsRead(notificationId, userId) {
    try {
      const sql = `
        UPDATE notifications 
        SET read_at = CURRENT_TIMESTAMP 
        WHERE id = ? AND user_id = ?
      `;
      
      const result = await database.run(sql, [notificationId, userId]);
      return result.changes > 0;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
      throw error;
    }
  }
  
  // –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  static async markAllAsRead(userId) {
    try {
      const sql = `
        UPDATE notifications 
        SET read_at = CURRENT_TIMESTAMP 
        WHERE user_id = ? AND read_at IS NULL
      `;
      
      const result = await database.run(sql, [userId]);
      return result.changes;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async getUnreadCount(userId) {
    try {
      const sql = `
        SELECT COUNT(*) as count FROM notifications 
        WHERE user_id = ? AND read_at IS NULL
      `;
      
      const result = await database.get(sql, [userId]);
      return result.count || 0;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static async deleteNotification(notificationId, userId) {
    try {
      const sql = `
        DELETE FROM notifications 
        WHERE id = ? AND user_id = ?
      `;
      
      const result = await database.run(sql, [notificationId, userId]);
      return result.changes > 0;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async cleanupOldNotifications(daysOld = 30) {
    try {
      const sql = `
        DELETE FROM notifications 
        WHERE created_at < datetime('now', '-${daysOld} days')
      `;
      
      const result = await database.run(sql);
      
      if (result.changes > 0) {
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${result.changes} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      }
      
      return result.changes;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
  static async sendTelegramNotification(userId, notification) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userSQL = 'SELECT telegram_id FROM users WHERE id = ?';
      const user = await database.get(userSQL, [userId]);
      
      if (!user || !user.telegram_id) {
        console.log(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${userId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram ID`);
        return false;
      }
      
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env');
        return false;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const telegramMessage = `üîî *${notification.title}*\n\n${notification.message}\n\n_${new Date().toLocaleString('ru-RU')}_`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
      const axios = require('axios');
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
      
      const response = await axios.post(telegramApiUrl, {
        chat_id: user.telegram_id,
        text: telegramMessage,
        parse_mode: 'Markdown'
      }, {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      if (response.data && response.data.ok) {
        console.log(`‚úÖ [TELEGRAM] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`);
        console.log(`   üìã ${notification.title}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        const updateSQL = `
          UPDATE notifications 
          SET telegram_sent = TRUE 
          WHERE user_id = ? AND telegram_sent = FALSE
          ORDER BY created_at DESC 
          LIMIT 1
        `;
        
        await database.run(updateSQL, [userId]);
        
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', response.data);
        return false;
      }
      
    } catch (error) {
      if (error.response) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response.data);
      } else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
        console.error('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
      }
      return false;
    }
  }
  
  // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async sendBulkNotifications(userIds, notificationData) {
    try {
      const results = [];
      
      for (const userId of userIds) {
        try {
          const notificationId = await this.sendNotification(userId, notificationData);
          results.push({ userId, notificationId, success: true });
        } catch (error) {
          results.push({ userId, success: false, error: error.message });
        }
      }
      
      const successCount = results.filter(r => r.success).length;
      console.log(`üìß –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ${successCount}/${userIds.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async getNotificationStats() {
    try {
      const sql = `
        SELECT 
          COUNT(*) as total,
          COUNT(CASE WHEN read_at IS NOT NULL THEN 1 END) as read,
          COUNT(CASE WHEN read_at IS NULL THEN 1 END) as unread,
          COUNT(CASE WHEN telegram_sent = TRUE THEN 1 END) as telegram_sent,
          COUNT(CASE WHEN type = 'new_request' THEN 1 END) as new_requests,
          COUNT(CASE WHEN type = 'bid_accepted' THEN 1 END) as bid_accepted,
          COUNT(CASE WHEN type = 'bid_rejected' THEN 1 END) as bid_rejected,
          COUNT(CASE WHEN type = 'auction_closed' THEN 1 END) as auction_closed
        FROM notifications
        WHERE created_at >= datetime('now', '-30 days')
      `;
      
      return await database.get(sql);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
  static async notifyNewBid(managerId, requestId, bidderName, totalPrice, equipmentInfo) {
    try {
      return await this.sendNotification(managerId, {
        type: 'new_bid',
        title: 'üîî –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞!',
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${bidderName} –ø–æ–¥–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ –∑–∞—è–≤–∫—É "${equipmentInfo}". –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice ? totalPrice.toLocaleString() + ' ‚ÇΩ' : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
  static async notifyNewRequest(ownerIds, requestData) {
    try {
      const notificationData = {
        type: 'new_request',
        title: 'üöú –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!',
        message: `–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${requestData.equipment_type} - ${requestData.equipment_subtype}. –ü–µ—Ä–∏–æ–¥: ${requestData.start_date} - ${requestData.end_date}. –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${requestData.location}`
      };

      return await this.sendBulkNotifications(ownerIds, notificationData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
  static async notifyAuctionClosed(managerId, requestData, winnerData) {
    try {
      const message = winnerData 
        ? `–ê—É–∫—Ü–∏–æ–Ω –ø–æ –∑–∞—è–≤–∫–µ "${requestData.equipment_type} - ${requestData.equipment_subtype}" –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerData.name}. –¶–µ–Ω–∞: ${winnerData.price ? winnerData.price.toLocaleString() + ' ‚ÇΩ' : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
        : `–ê—É–∫—Ü–∏–æ–Ω –ø–æ –∑–∞—è–≤–∫–µ "${requestData.equipment_type} - ${requestData.equipment_subtype}" –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.`;

      return await this.sendNotification(managerId, {
        type: 'auction_closed',
        title: 'üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!',
        message
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
  static async notifyBidStatus(ownerId, requestData, status, reason = null) {
    try {
      const isAccepted = status === 'accepted';
      const title = isAccepted ? '‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!' : '‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
      let message = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É "${requestData.equipment_type} - ${requestData.equipment_subtype}" ${isAccepted ? '–ø—Ä–∏–Ω—è—Ç–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.`;
      
      if (!isAccepted && reason) {
        message += ` –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
      }

      return await this.sendNotification(ownerId, {
        type: isAccepted ? 'bid_accepted' : 'bid_rejected',
        title,
        message
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–∞–≤–∫–∏:', error);
      throw error;
    }
  }
}

module.exports = NotificationService;
