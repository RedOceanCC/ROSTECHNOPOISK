const RentalRequest = require('../models/RentalRequest');
const RentalBid = require('../models/RentalBid');
const Equipment = require('../models/Equipment');
const User = require('../models/User');
const NotificationService = require('./NotificationService');

class AuctionService {
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
  static async closeExpiredAuctions() {
    try {
      const expiredRequests = await RentalRequest.findExpiredAuctions();
      
      if (expiredRequests.length === 0) {
        console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return { closed: 0, results: [] };
      }
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${expiredRequests.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
      
      const results = [];
      
      for (const request of expiredRequests) {
        try {
          console.log(`‚è∞ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω #${request.id} (${request.equipment_type})`);
          
          const result = await RentalRequest.closeAuction(request.id);
          
          if (result.winner) {
            console.log(`üèÜ –ê—É–∫—Ü–∏–æ–Ω #${request.id} –∑–∞–∫—Ä—ã—Ç. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${result.winner.owner_name} (${result.winner.total_price} —Ä—É–±.)`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await this.sendAuctionClosedNotifications(request, result);
          } else {
            console.log(`‚ùå –ê—É–∫—Ü–∏–æ–Ω #${request.id} –∑–∞–∫—Ä—ã—Ç –±–µ–∑ —Å—Ç–∞–≤–æ–∫`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞–≤–æ–∫
            await NotificationService.sendNotification(request.manager_id, {
              type: 'auction_no_bids',
              title: '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫',
              message: `–ü–æ –∑–∞—è–≤–∫–µ ‚Ññ${request.id} –Ω–∞ ${request.equipment_type} –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.`
            });
          }
          
          results.push({
            request_id: request.id,
            success: true,
            winner: result.winner,
            bids_count: result.bids.length
          });
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ #${request.id}:`, error.message);
          
          results.push({
            request_id: request.id,
            success: false,
            error: error.message
          });
        }
      }
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
      
      return {
        closed: results.length,
        results: results
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
      throw error;
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
  static async sendAuctionClosedNotifications(request, auctionResult) {
    try {
      const { winner, bids } = auctionResult;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      await NotificationService.sendNotification(winner.owner_id, {
        type: 'bid_won',
        title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞',
        message: `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É ‚Ññ${request.id} (${request.equipment_type}) –≤—ã–∏–≥—Ä–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω! –°—É–º–º–∞: ${winner.total_price.toLocaleString()} —Ä—É–±. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.`
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      await NotificationService.sendNotification(request.manager_id, {
        type: 'auction_closed',
        title: '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω',
        message: `–ê—É–∫—Ü–∏–æ–Ω –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ${request.id} –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n` +
                `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.owner_name}\n` +
                `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${winner.owner_phone}\n` +
                `üöú –¢–µ—Ö–Ω–∏–∫–∞: ${winner.equipment_name}\n` +
                `üí∞ –¶–µ–Ω–∞: ${winner.total_price.toLocaleString()} —Ä—É–±.\n\n` +
                `–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const losingBids = bids.filter(bid => bid.id !== winner.id);
      
      for (const bid of losingBids) {
        await NotificationService.sendNotification(bid.owner_id, {
          type: 'bid_lost',
          title: '–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞',
          message: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É ‚Ññ${request.id} (${request.equipment_type}) –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞. –ë—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ —Å –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–æ–π.`
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
  static async createAuction(requestData) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const request = await RentalRequest.create(requestData);
      
      // –ù–∞—Ö–æ–¥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
      const eligibleOwners = await Equipment.findOwnersForAuction(
        requestData.manager_id,
        requestData.equipment_type,
        requestData.equipment_subtype
      );
      
      if (eligibleOwners.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
      for (const owner of eligibleOwners) {
        await NotificationService.sendNotification(owner.id, {
          type: 'new_request',
          title: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω',
          message: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É ${requestData.equipment_type} (${requestData.equipment_subtype})\n\n` +
                  `üìÖ –ü–µ—Ä–∏–æ–¥: ${new Date(requestData.start_date).toLocaleDateString()} - ${new Date(requestData.end_date).toLocaleDateString()}\n` +
                  `üìç –ú–µ—Å—Ç–æ: ${requestData.location}\n` +
                  `‚è∞ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ —Å—Ç–∞–≤–æ–∫: ${new Date(request.auction_deadline).toLocaleString()}\n\n` +
                  `–ü–æ–¥–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ!`
        });
      }
      
      console.log(`üéØ –°–æ–∑–¥–∞–Ω –∞—É–∫—Ü–∏–æ–Ω #${request.id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ ${eligibleOwners.length} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤`);
      
      return {
        request: request,
        eligible_owners: eligibleOwners.length
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º
  static async getAuctionStats() {
    try {
      const requestStats = await RentalRequest.getStats();
      const bidStats = await RentalBid.getStats();
      
      return {
        requests: requestStats,
        bids: bidStats,
        conversion_rate: requestStats.total > 0 
          ? ((requestStats.closed_auctions / requestStats.total) * 100).toFixed(2)
          : 0
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
      throw error;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
  static async canParticipateInAuction(ownerId, requestId) {
    try {
      const request = await RentalRequest.findById(requestId);
      
      if (!request) {
        return { canParticipate: false, reason: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }
      
      if (request.status !== 'auction_active') {
        return { canParticipate: false, reason: '–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' };
      }
      
      if (new Date(request.auction_deadline) < new Date()) {
        return { canParticipate: false, reason: '–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
      const availableEquipment = await Equipment.findAvailableForManager(
        request.manager_id,
        request.equipment_type,
        request.equipment_subtype
      );
      
      const ownerEquipment = availableEquipment.filter(eq => eq.owner_id === ownerId);
      
      if (ownerEquipment.length === 0) {
        return { canParticipate: false, reason: '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–≤–∞–ª –ª–∏ —É–∂–µ —Å—Ç–∞–≤–∫—É
      const existingBids = await RentalBid.findByOwnerId(ownerId);
      const hasBid = existingBids.some(bid => bid.request_id === parseInt(requestId));
      
      if (hasBid) {
        return { canParticipate: false, reason: '–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –∞—É–∫—Ü–∏–æ–Ω' };
      }
      
      return {
        canParticipate: true,
        availableEquipment: ownerEquipment,
        deadline: request.auction_deadline
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ:', error);
      return { canParticipate: false, reason: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  static async forceCloseAuction(requestId, adminId) {
    try {
      const request = await RentalRequest.findById(requestId);
      
      if (!request) {
        throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      if (request.status !== 'auction_active') {
        throw new Error('–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      }
      
      console.log(`‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ #${requestId} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º #${adminId}`);
      
      const result = await RentalRequest.closeAuction(requestId);
      
      if (result.winner) {
        await this.sendAuctionClosedNotifications(request, result);
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
      throw error;
    }
  }
}

module.exports = AuctionService;
