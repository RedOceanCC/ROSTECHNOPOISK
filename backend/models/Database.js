const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const { getDatabaseConfig, getConnectionOptions, checkDatabaseVersion } = require('../config/database');

class Database {
  constructor() {
    this.db = null;
    this.config = null;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  connect() {
    return new Promise((resolve, reject) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥—ã
        this.config = getDatabaseConfig();
        const connectionOptions = getConnectionOptions(this.config);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é SQLite
        if (!checkDatabaseVersion()) {
          console.warn('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è SQLite');
        }
        
        const dbPath = this.config.database;
      
        this.db = new sqlite3.Database(dbPath, (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
            reject(err);
          } else {
            console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (${process.env.NODE_ENV || 'local'})`);
            console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º PRAGMA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const pragmas = connectionOptions.pragma || { foreign_keys: true };
            const pragmaPromises = Object.entries(pragmas).map(([key, value]) => {
              return new Promise((resolve, reject) => {
                this.db.run(`PRAGMA ${key} = ${value}`, (err) => {
                  if (err) {
                    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PRAGMA ${key}: ${err.message}`);
                    resolve(); // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–∑-–∑–∞ pragma
                  } else {
                    if (this.config.logging) {
                      console.log(`üìã PRAGMA ${key} = ${value}`);
                    }
                    resolve();
                  }
                });
              });
            });
            
            Promise.all(pragmaPromises).then(() => resolve()).catch(reject);
          }
        });
      } catch (configError) {
        reject(configError);
      }
    });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  close() {
    return new Promise((resolve, reject) => {
      if (this.db) {
        this.db.close((err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
            reject(err);
          } else {
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            resolve();
          }
        });
      } else {
        resolve();
      }
    });
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ SELECT
  get(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.get(sql, params, (err, row) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET –∑–∞–ø—Ä–æ—Å–∞:', err.message);
          reject(err);
        } else {
          resolve(row);
        }
      });
    });
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ SELECT ALL
  all(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.all(sql, params, (err, rows) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ALL –∑–∞–ø—Ä–æ—Å–∞:', err.message);
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ INSERT/UPDATE/DELETE
  run(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.run(sql, params, function(err) {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RUN –∑–∞–ø—Ä–æ—Å–∞:', err.message);
          reject(err);
        } else {
          resolve({
            id: this.lastID,
            changes: this.changes
          });
        }
      });
    });
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  async transaction(queries) {
    return new Promise((resolve, reject) => {
      this.db.serialize(() => {
        this.db.run('BEGIN TRANSACTION');
        
        const results = [];
        let hasError = false;

        const executeQuery = (index) => {
          if (index >= queries.length) {
            if (hasError) {
              this.db.run('ROLLBACK', () => {
                reject(new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏'));
              });
            } else {
              this.db.run('COMMIT', (err) => {
                if (err) {
                  reject(err);
                } else {
                  resolve(results);
                }
              });
            }
            return;
          }

          const { sql, params } = queries[index];
          this.db.run(sql, params, function(err) {
            if (err) {
              hasError = true;
              console.error(`–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–ø—Ä–æ—Å ${index + 1}):`, err.message);
            } else {
              results.push({
                id: this.lastID,
                changes: this.changes
              });
            }
            executeQuery(index + 1);
          });
        };

        executeQuery(0);
      });
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  getInstance() {
    return this.db;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  getConfig() {
    return this.config;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î
  async getStatus() {
    const { getDatabaseStatus } = require('../config/database');
    return await getDatabaseStatus();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async ping() {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'));
        return;
      }
      
      this.db.get('SELECT 1 as ping', (err, row) => {
        if (err) {
          reject(err);
        } else {
          resolve(row.ping === 1);
        }
      });
    });
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (Singleton)
const database = new Database();

module.exports = database;
