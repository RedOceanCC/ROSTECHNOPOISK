/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥ - –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö
 */

const path = require('path');

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
const environments = {
  local: {
    type: 'sqlite',
    database: path.join(__dirname, '../database/rostechnopolsk.db'),
    logging: true,
    backup: {
      enabled: false,
      frequency: 'daily',
      retention: 7
    },
    pool: {
      min: 1,
      max: 1
    }
  },
  
  development: {
    type: 'sqlite',
    database: path.join(__dirname, '../database/rostechnopolsk-dev.db'),
    logging: true,
    backup: {
      enabled: false,
      frequency: 'daily',
      retention: 3
    },
    pool: {
      min: 1,
      max: 2
    }
  },
  
  test: {
    type: 'sqlite',
    database: ':memory:', // –í –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging: false,
    backup: {
      enabled: false
    },
    pool: {
      min: 1,
      max: 1
    }
  },
  
  production: {
    type: 'sqlite',
    database: process.env.DB_PATH || '/var/lib/rostechnopoisk/database/rostechnopolsk.db',
    logging: false,
    backup: {
      enabled: true,
      frequency: 'daily',
      retention: 30,
      path: process.env.BACKUP_PATH || '/var/backups/rostechnopoisk'
    },
    pool: {
      min: 1,
      max: 3
    },
    security: {
      readOnly: false,
      encryption: false // SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    },
    monitoring: {
      enabled: true,
      maxSize: '500MB',
      alertThreshold: '400MB'
    }
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥—ã
function getDatabaseConfig() {
  const env = process.env.NODE_ENV || 'local';
  const config = environments[env];
  
  if (!config) {
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞: ${env}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${Object.keys(environments).join(', ')}`);
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const finalConfig = {
    ...config,
    database: process.env.DB_PATH || config.database,
    logging: process.env.DB_LOGGING === 'true' || config.logging
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  validateConfig(finalConfig, env);
  
  return finalConfig;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function validateConfig(config, env) {
  if (!config.database) {
    throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (env === 'production') {
    if (config.database.includes(':memory:')) {
      throw new Error('–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏');
    }
    
    if (!path.isAbsolute(config.database)) {
      throw new Error('–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—É—Ç—å –∫ –ë–î –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω
    const dbDir = path.dirname(config.database);
    try {
      const fs = require('fs');
      if (!fs.existsSync(dbDir)) {
        fs.mkdirSync(dbDir, { recursive: true });
      }
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ë–î: ${dbDir} - ${error.message}`);
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è SQLite
function getConnectionOptions(config) {
  const options = {
    filename: config.database
  };
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  if (process.env.NODE_ENV === 'production') {
    options.pragma = {
      journal_mode: 'WAL',
      synchronous: 'NORMAL',
      cache_size: 10000,
      foreign_keys: true,
      busy_timeout: 5000
    };
  } else {
    options.pragma = {
      foreign_keys: true,
      busy_timeout: 3000
    };
  }
  
  return options;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function getMonitoringConfig() {
  const config = getDatabaseConfig();
  
  if (!config.monitoring?.enabled) {
    return null;
  }
  
  return {
    enabled: true,
    checkInterval: 60000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    maxSize: config.monitoring.maxSize || '500MB',
    alertThreshold: config.monitoring.alertThreshold || '400MB',
    metrics: {
      connections: true,
      queries: true,
      performance: true
    }
  };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function getBackupConfig() {
  const config = getDatabaseConfig();
  
  if (!config.backup?.enabled) {
    return null;
  }
  
  return {
    enabled: true,
    frequency: config.backup.frequency || 'daily',
    retention: config.backup.retention || 7,
    path: config.backup.path || path.join(__dirname, '../../backups'),
    compression: true,
    notification: process.env.NODE_ENV === 'production'
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
function checkDatabaseVersion() {
  const config = getDatabaseConfig();
  
  try {
    const sqlite3 = require('sqlite3');
    console.log(`üìä SQLite –≤–µ—Ä—Å–∏—è: ${sqlite3.VERSION}`);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–µ–±—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è
    const minVersion = '3.8.0';
    if (sqlite3.VERSION < minVersion) {
      console.warn(`‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å SQLite –¥–æ –≤–µ—Ä—Å–∏–∏ ${minVersion} –∏–ª–∏ –≤—ã—à–µ`);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ SQLite:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î
async function getDatabaseStatus() {
  const config = getDatabaseConfig();
  const fs = require('fs');
  
  const status = {
    environment: process.env.NODE_ENV || 'local',
    database: config.database,
    exists: false,
    size: 0,
    accessible: false,
    lastModified: null
  };
  
  try {
    if (config.database !== ':memory:' && fs.existsSync(config.database)) {
      const stats = fs.statSync(config.database);
      status.exists = true;
      status.size = stats.size;
      status.lastModified = stats.mtime;
      status.accessible = true;
    }
  } catch (error) {
    status.error = error.message;
  }
  
  return status;
}

module.exports = {
  getDatabaseConfig,
  getConnectionOptions,
  getMonitoringConfig,
  getBackupConfig,
  checkDatabaseVersion,
  getDatabaseStatus,
  environments
};
