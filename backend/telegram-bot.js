const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const path = require('path');
const Database = require('./models/Database');
const Equipment = require('./models/Equipment');
const RentalRequest = require('./models/RentalRequest');
const RentalBid = require('./models/RentalBid');
const NotificationService = require('./services/NotificationService');
const { requireTelegramAuth } = require('./middleware/auth');

class TelegramWebApp {
  constructor() {
    this.bot = null;
    this.app = express();
    this.initializeBot();
    this.setupWebApp();
  }

  initializeBot() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }

    try {
      this.bot = new TelegramBot(token, { 
        polling: {
          interval: 2000,    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª polling
          autoStart: true,
          params: {
            timeout: 10
          }
        }
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
      this.bot.on('polling_error', (error) => {
        if (error.code === 'ETELEGRAM' && error.message.includes('409 Conflict')) {
          console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling');
          this.bot.stopPolling();
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞...');
            try {
              this.bot.startPolling();
            } catch (restartError) {
              console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:', restartError.message);
            }
          }, 30000);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error.message);
        }
      });
      
      this.setupBotHandlers();
      console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
    }
  }

  setupBotHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        const user = await this.findUserByTelegramId(userId);
        
        if (user) {
          await this.bot.sendMessage(chatId, 
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö, ${user.name}!\n\n` +
            `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –≤–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É.\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
          );
        } else {
          await this.bot.sendMessage(chatId, 
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö!\n\n` +
            `–í–∞—à Telegram ID: ${userId}\n\n` +
            `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ ID –∫ –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–µ –≤ —Å–∏—Å—Ç–µ–º–µ.`
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /menu
    this.bot.onText(/\/menu/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      try {
        const user = await this.findUserByTelegramId(userId);
        
        if (!user) {
          await this.bot.sendMessage(chatId, 
            '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
          );
          return;
        }

        const keyboard = {
          inline_keyboard: [
            [{ text: 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', callback_data: 'my_requests' }],
            [{ text: 'üöú –ú–æ—è —Ç–µ—Ö–Ω–∏–∫–∞', callback_data: 'my_equipment' }],
            [{ text: 'üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã', callback_data: 'active_auctions' }],
            [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data: 'help' }]
          ]
        };

        await this.bot.sendMessage(chatId, 
          '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
          { reply_markup: keyboard }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /menu:', error);
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.on('callback_query', async (callbackQuery) => {
      const msg = callbackQuery.message;
      const chatId = msg.chat.id;
      const userId = callbackQuery.from.id;
      const data = callbackQuery.data;

      try {
        await this.handleCallbackQuery(chatId, userId, data);
        await this.bot.answerCallbackQuery(callbackQuery.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
      }
    });
  }

  async handleCallbackQuery(chatId, userId, data) {
    const user = await this.findUserByTelegramId(userId);
    
    if (!user) {
      await this.bot.sendMessage(chatId, 
        '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }

    switch (data) {
      case 'my_requests':
        await this.showMyRequests(chatId, user.id);
        break;
      case 'my_equipment':
        await this.showMyEquipment(chatId, user.id);
        break;
      case 'active_auctions':
        await this.showActiveAuctions(chatId, user.id);
        break;
      case 'help':
        await this.showHelp(chatId);
        break;
      default:
        if (data.startsWith('bid_')) {
          await this.handleBidAction(chatId, userId, data);
        } else if (data.startsWith('decline_')) {
          await this.handleDeclineAction(chatId, userId, data);
        } else if (data.startsWith('decline_reason_')) {
          await this.handleDeclineReason(chatId, userId, data);
        }
    }
  }

  async showMyRequests(chatId, userId) {
    try {
      const bids = await RentalBid.findByOwnerId(userId);
      
      if (bids.length === 0) {
        await this.bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.');
        return;
      }

      let message = 'üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n';
      
      for (const bid of bids.slice(0, 10)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        const statusEmoji = {
          'pending': '‚è≥',
          'accepted': '‚úÖ',
          'rejected': '‚ùå',
          'expired': '‚è∞'
        };

        message += `${statusEmoji[bid.status] || '‚ùì'} *${bid.equipment_type} ${bid.subtype}*\n`;
        message += `–ó–∞—è–≤–∫–∞: ${bid.work_description.substring(0, 50)}...\n`;
        message += `–¶–µ–Ω–∞: ${bid.total_price} —Ä—É–±.\n`;
        message += `–°—Ç–∞—Ç—É—Å: ${this.getStatusText(bid.status)}\n\n`;
      }

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫:', error);
      await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.');
    }
  }

  async showMyEquipment(chatId, userId) {
    try {
      const equipment = await Equipment.findByOwnerId(userId);
      
      if (equipment.length === 0) {
        await this.bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.');
        return;
      }

      let message = 'üöú –í–∞—à–∞ —Ç–µ—Ö–Ω–∏–∫–∞:\n\n';
      
      for (const item of equipment.slice(0, 10)) {
        const statusEmoji = {
          'available': '‚úÖ',
          'busy': 'üîÑ',
          'maintenance': 'üîß'
        };

        message += `${statusEmoji[item.status] || '‚ùì'} *${item.name}*\n`;
        message += `–¢–∏–ø: ${item.type} - ${item.subtype}\n`;
        message += `–¶–µ–Ω–∞: ${item.hourly_rate}‚ÇΩ/—á–∞—Å, ${item.daily_rate}‚ÇΩ/–¥–µ–Ω—å\n`;
        message += `–°—Ç–∞—Ç—É—Å: ${this.getEquipmentStatusText(item.status)}\n\n`;
      }

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ—Ö–Ω–∏–∫–∏:', error);
      await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Ö–Ω–∏–∫–∏.');
    }
  }

  async showActiveAuctions(chatId, userId) {
    try {
      const activeRequests = await RentalRequest.findActiveForOwner(userId);
      
      if (activeRequests.length === 0) {
        await this.bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏.');
        return;
      }

      let message = 'üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã:\n\n';
      
      for (const request of activeRequests.slice(0, 5)) {
        const deadline = new Date(request.auction_deadline);
        const timeLeft = this.getTimeLeft(deadline);
        
        message += `üéØ *${request.equipment_type} ${request.equipment_subtype}*\n`;
        message += `üìç ${request.location}\n`;
        message += `üìÖ ${request.start_date} - ${request.end_date}\n`;
        message += `‚è∞ –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${timeLeft}\n`;
        message += `üí∞ –ë—é–¥–∂–µ—Ç: ${request.budget_range || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        
        if (request.has_bid) {
          message += `‚úÖ –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É\n\n`;
        } else {
          message += `‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞\n\n`;
        }
      }

      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
      await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.');
    }
  }

  async showHelp(chatId) {
    const helpText = `
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö –±–æ—Ç—É*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
‚Ä¢ –ü–æ–¥–∞—á–∞ —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–æ–π

*–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*
–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É
‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @admin_username
    `;

    await this.bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
  }

  async handleDeclineAction(chatId, userId, data) {
    try {
      const requestId = data.split('_')[1];
      
      const keyboard = {
        inline_keyboard: [
          [{ text: '–ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è', callback_data: `decline_reason_${requestId}_conditions` }],
          [{ text: '–¢–µ—Ö–Ω–∏–∫–∞ –∑–∞–Ω—è—Ç–∞', callback_data: `decline_reason_${requestId}_busy` }],
          [{ text: '–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞', callback_data: `decline_reason_${requestId}_price` }],
          [{ text: '–î—Ä—É–≥–æ–µ', callback_data: `decline_reason_${requestId}_other` }]
        ]
      };

      await this.bot.sendMessage(chatId, 
        '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', 
        { reply_markup: keyboard }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
    }
  }

  async handleDeclineReason(chatId, userId, data) {
    try {
      const parts = data.split('_');
      const requestId = parts[2];
      const reason = parts[3];
      
      const reasonTexts = {
        'conditions': '–ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã',
        'busy': '–¢–µ—Ö–Ω–∏–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥',
        'price': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç',
        'other': '–î—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã'
      };

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
      console.log(`–ó–∞—è–≤–∫–∞ ${requestId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}. –ü—Ä–∏—á–∏–Ω–∞: ${reasonTexts[reason]}`);
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reasonTexts[reason]}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  setupWebApp() {
    // –ù–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—ã–π app
    console.log('Telegram WebApp –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  static setupRoutes(app) {
    // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    app.get('/api/telegram/request/:requestId', requireTelegramAuth, async (req, res) => {
      try {
        const { requestId } = req.params;
        const user = req.user;

        const request = await RentalRequest.findById(requestId);
        if (!request) {
          return res.status(404).json({ 
            success: false,
            error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞
        if (request.status !== 'auction_active') {
          return res.status(400).json({ 
            success: false,
            error: '–ê—É–∫—Ü–∏–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω –∞—É–∫—Ü–∏–æ–Ω–∞
        if (new Date(request.auction_deadline) < new Date()) {
          return res.status(400).json({ 
            success: false,
            error: '–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ' 
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        const Database = require('./models/Database');
        const partnershipSQL = `
          SELECT cp.id
          FROM company_partnerships cp
          JOIN users u_manager ON cp.manager_company_id = u_manager.company_id
          JOIN users u_owner ON cp.owner_company_id = u_owner.company_id
          WHERE u_manager.id = ? AND u_owner.id = ? AND cp.status = 'active'
        `;
        
        const partnership = await Database.get(partnershipSQL, [request.manager_id, user.id]);
        if (!partnership) {
          return res.status(403).json({ 
            success: false,
            error: '–ù–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –∫–æ–º–ø–∞–Ω–∏–µ–π –∑–∞–∫–∞–∑—á–∏–∫–∞' 
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ—Ö–Ω–∏–∫—É
        const equipment = await Equipment.findByOwnerId(user.id);
        const suitableEquipment = equipment.filter(eq => 
          eq.type === request.equipment_type && 
          eq.subtype === request.equipment_subtype &&
          eq.status === 'available'
        );

        if (suitableEquipment.length === 0) {
          return res.status(403).json({ 
            success: false,
            error: '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞' 
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–≤–∫–∏
        const existingBids = await RentalBid.findByOwnerId(user.id);
        const hasExistingBid = existingBids.some(bid => bid.request_id == requestId);

        res.json({
          success: true,
          request,
          equipment: suitableEquipment,
          hasExistingBid,
          user
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({ 
          success: false,
          error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
      }
    });

    // API –¥–ª—è –ø–æ–¥–∞—á–∏ —Å—Ç–∞–≤–∫–∏
    app.post('/api/telegram/bid', requireTelegramAuth, async (req, res) => {
      try {
        const { requestId, equipmentId, hourlyRate, dailyRate, totalPrice, comment } = req.body;
        const user = req.user;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!requestId || !equipmentId || !hourlyRate || !dailyRate || !totalPrice) {
          return res.status(400).json({
            success: false,
            error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
          });
        }

        if (totalPrice <= 0 || hourlyRate <= 0 || dailyRate <= 0) {
          return res.status(400).json({
            success: false,
            error: '–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏'
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
        const request = await RentalRequest.findById(requestId);
        if (!request) {
          return res.status(404).json({
            success: false,
            error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
          });
        }

        if (request.status !== 'auction_active') {
          return res.status(400).json({
            success: false,
            error: '–ê—É–∫—Ü–∏–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏
        const equipment = await Equipment.findById(equipmentId);
        if (!equipment || equipment.owner_id !== user.id) {
          return res.status(403).json({
            success: false,
            error: '–¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
          });
        }

        if (equipment.status !== 'available') {
          return res.status(400).json({
            success: false,
            error: '–¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
          });
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
        const bid = await RentalBid.create({
          request_id: requestId,
          owner_id: user.id,
          equipment_id: equipmentId,
          hourly_rate: hourlyRate,
          daily_rate: dailyRate,
          total_price: totalPrice,
          comment: comment || ''
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        try {
          await NotificationService.notifyNewBid(
            request.manager_id, 
            requestId, 
            user.name, 
            totalPrice, 
            `${request.equipment_type} - ${request.equipment_subtype}`
          );
        } catch (notificationError) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
        }

        res.json({ 
          success: true, 
          bid,
          message: '–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞.'
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ —Å—Ç–∞–≤–∫–∏:', error);
        
        let statusCode = 500;
        let userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (error.name === 'BusinessLogicError') {
          statusCode = 409;
          userMessage = error.message;
        } else if (error.name === 'NotFoundError') {
          statusCode = 404;
          userMessage = error.message;
        } else if (error.name === 'ValidationError') {
          statusCode = 400;
          userMessage = error.message;
        }
        
        res.status(statusCode).json({ 
          success: false,
          error: userMessage 
        });
      }
    });

    // API –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    app.post('/api/telegram/decline', requireTelegramAuth, async (req, res) => {
      try {
        const { requestId, reason } = req.body;
        const user = req.user;

        if (!requestId) {
          return res.status(400).json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞—è–≤–∫–∏'
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        const request = await RentalRequest.findById(requestId);
        if (!request) {
          return res.status(404).json({
            success: false,
            error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
          });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        const Database = require('./models/Database');
        try {
          const declineSQL = `
            INSERT INTO request_declines (request_id, owner_id, reason, created_at)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
          `;
          await Database.run(declineSQL, [requestId, user.id, reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞']);
        } catch (dbError) {
          // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ë–î, –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} (ID: ${user.id}) –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É ${requestId}. –ü—Ä–∏—á–∏–Ω–∞: ${reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
          if (dbError.code !== 'SQLITE_ERROR') {
            console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', dbError);
          }
        }

        res.json({ 
          success: true,
          message: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({ 
          success: false,
          error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
  async notifyNewRequest(requestId) {
    try {
      const request = await RentalRequest.findById(requestId);
      if (!request) return;

      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Ö–Ω–∏–∫—É –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id
      const sql = `
        SELECT DISTINCT e.telegram_id, e.owner_id, e.name as equipment_name,
               u.name as owner_name
        FROM equipment e
        JOIN users u ON e.owner_id = u.id
        JOIN companies c ON u.company_id = c.id
        JOIN company_partnerships cp ON c.id = cp.owner_company_id
        JOIN users m ON m.company_id = cp.manager_company_id
        WHERE m.id = ? 
          AND e.type = ? 
          AND e.subtype = ?
          AND e.status = 'available'
          AND e.telegram_id IS NOT NULL
          AND e.telegram_id != ''
          AND u.role = 'owner'
          AND u.status = 'active'
          AND c.status = 'active'
          AND cp.status = 'active'
      `;

      const equipmentList = await Database.all(sql, [
        request.manager_id, 
        request.equipment_type, 
        request.equipment_subtype
      ]);

      for (const equipment of equipmentList) {
        const webAppUrl = `${process.env.WEB_APP_URL || 'http://localhost:3001'}/telegram/request.html?requestId=${requestId}&equipmentId=${equipment.owner_id}&telegramId=${equipment.telegram_id}`;
        
        const keyboard = {
          inline_keyboard: [[
            { 
              text: 'üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 
              web_app: { url: webAppUrl }
            },
            { 
              text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
              callback_data: `decline_${requestId}`
            }
          ]]
        };

        const message = `
üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É!*

üöú *–¢–µ—Ö–Ω–∏–∫–∞:* ${equipment.equipment_name}
üè∑Ô∏è *–¢–∏–ø:* ${request.equipment_type} - ${request.equipment_subtype}
üìç *–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:* ${request.location}
üìÖ *–ü–µ—Ä–∏–æ–¥:* ${request.start_date} - ${request.end_date}
üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* ${request.work_description}
üí∞ *–ë—é–¥–∂–µ—Ç:* ${request.budget_range || '–ù–µ —É–∫–∞–∑–∞–Ω'}

‚è∞ *–í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏:* –¥–æ ${new Date(request.auction_deadline).toLocaleString('ru-RU')}

–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.
        `;

        try {
          await this.bot.sendMessage(equipment.telegram_id, message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
          console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ç–µ—Ö–Ω–∏–∫–∏ ${equipment.equipment_name} (${equipment.telegram_id})`);
        } catch (sendError) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ID ${equipment.telegram_id}:`, sendError.message);
        }
      }

      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${equipmentList.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–∞—è–≤–∫–µ ${requestId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async findUserByTelegramId(telegramId) {
    return await TelegramWebApp.findUserByTelegramId(telegramId);
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async findUserByTelegramId(telegramId) {
    try {
      const sql = 'SELECT * FROM users WHERE telegram_id = ? AND status = "active"';
      return await Database.get(sql, [telegramId.toString()]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID:', error);
      return null;
    }
  }

  getStatusText(status) {
    const statusTexts = {
      'pending': '–û–∂–∏–¥–∞–Ω–∏–µ',
      'accepted': '–ü—Ä–∏–Ω—è—Ç–∞',
      'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
      'expired': '–ò—Å—Ç–µ–∫–ª–∞'
    };
    return statusTexts[status] || status;
  }

  getEquipmentStatusText(status) {
    const statusTexts = {
      'available': '–î–æ—Å—Ç—É–ø–Ω–∞',
      'busy': '–ó–∞–Ω—è—Ç–∞',
      'maintenance': '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'
    };
    return statusTexts[status] || status;
  }

  getTimeLeft(deadline) {
    const now = new Date();
    const diff = deadline - now;
    
    if (diff <= 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours}—á ${minutes}–º`;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
let botInstance = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
function getBotInstance() {
  return botInstance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥)
async function notifyNewRequest(requestId) {
  if (botInstance) {
    return await botInstance.notifyNewRequest(requestId);
  }
  console.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const originalConstructor = TelegramWebApp;
function TelegramWebAppWithInstance() {
  const instance = new originalConstructor();
  botInstance = instance;
  return instance;
}

// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
Object.setPrototypeOf(TelegramWebAppWithInstance, originalConstructor);
Object.setPrototypeOf(TelegramWebAppWithInstance.prototype, originalConstructor.prototype);

module.exports = TelegramWebAppWithInstance;
module.exports.getBotInstance = getBotInstance;
module.exports.notifyNewRequest = notifyNewRequest;
