const http = require('http');
const https = require('https');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const lib = url.startsWith('https') ? https : http;
    
    const req = lib.request(url, {
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'NotificationTest/1.0',
        ...options.headers
      }
    }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const response = {
            status: res.statusCode,
            headers: res.headers,
            data: data ? JSON.parse(data) : null
          };
          resolve(response);
        } catch (error) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: data,
            error: 'Invalid JSON'
          });
        }
      });
    });
    
    req.on('error', reject);
    
    if (options.body) {
      req.write(JSON.stringify(options.body));
    }
    
    req.end();
  });
}

async function testApiHealth() {
  console.log('üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ó–î–û–†–û–í–¨–Ø –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
  const baseUrls = [
    'http://localhost:3000',  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    'https://—Ä–æ—Å—Ç–µ—Ö–Ω–æ–ø–æ–∏—Å–∫.—Ä—Ñ', // –ü—Ä–æ–¥–∞–∫—à–Ω
    'http://127.0.0.1:3000'   // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π
  ];
  
  let workingBaseUrl = null;
  
  // –ò—â–µ–º —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä
  console.log('1. –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
  for (const baseUrl of baseUrls) {
    try {
      console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${baseUrl}`);
      const response = await makeRequest(`${baseUrl}/api/health`);
      
      if (response.status === 200) {
        console.log(`   ‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: ${baseUrl}`);
        console.log(`   üìä –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2)}`);
        workingBaseUrl = baseUrl;
        break;
      } else {
        console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å ${response.status}: ${baseUrl}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${baseUrl} (${error.message})`);
    }
  }
  
  if (!workingBaseUrl) {
    console.log('\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù –†–ê–ë–û–¢–ê–Æ–©–ò–ô –°–ï–†–í–ï–†!');
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω:');
    console.log('   cd backend && node server.js');
    console.log('   –∏–ª–∏');
    console.log('   pm2 restart rostechnopolsk-backend');
    return;
  }
  
  console.log(`\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ ${workingBaseUrl}...\n`);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ endpoints
  const endpoints = [
    {
      name: 'Health Check',
      url: '/api/health',
      method: 'GET',
      expectAuth: false
    },
    {
      name: 'Get Notifications',
      url: '/api/notifications',
      method: 'GET',
      expectAuth: true
    },
    {
      name: 'Get Unread Count',
      url: '/api/notifications/count',
      method: 'GET',
      expectAuth: true
    },
    {
      name: 'Get Unread Notifications',
      url: '/api/notifications/unread',
      method: 'GET',
      expectAuth: true
    },
    {
      name: 'Create Test Notification',
      url: '/api/notifications/test',
      method: 'POST',
      expectAuth: true
    }
  ];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π endpoint
  for (const endpoint of endpoints) {
    try {
      console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint.name}`);
      console.log(`   URL: ${endpoint.method} ${endpoint.url}`);
      
      const response = await makeRequest(`${workingBaseUrl}${endpoint.url}`, {
        method: endpoint.method
      });
      
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
      if (endpoint.expectAuth && response.status === 401) {
        console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é`);
      } else if (!endpoint.expectAuth && response.status === 200) {
        console.log(`   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        if (response.data) {
          console.log(`   üìÑ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data).substring(0, 100)}...`);
        }
      } else if (response.status === 404) {
        console.log(`   ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)`);
      } else if (response.status >= 500) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`);
        if (response.data) {
          console.log(`   üìÑ –û—à–∏–±–∫–∞: ${JSON.stringify(response.data)}`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        if (response.data) {
          console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data).substring(0, 200)}`);
        }
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  const staticFiles = [
    '/notifications.js',
    '/app.js',
    '/style.css'
  ];
  
  for (const file of staticFiles) {
    try {
      const response = await makeRequest(`${workingBaseUrl}${file}`);
      const status = response.status === 200 ? '‚úÖ' : '‚ùå';
      console.log(`${status} –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª ${file}: ${response.status}`);
    } catch (error) {
      console.log(`‚ùå –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª ${file}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${workingBaseUrl}`);
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É endpoint');
  
  console.log('\nüí° –°–û–í–ï–¢–´ –ü–û –û–¢–õ–ê–î–ö–ï:');
  console.log('1. –ï—Å–ª–∏ –≤—Å–µ endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 401 - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
  console.log('2. –ï—Å–ª–∏ endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 404 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ—É—Ç—ã –≤ server.js');
  console.log('3. –ï—Å–ª–∏ 500 –æ—à–∏–±–∫–∏ - —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞: pm2 logs');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
  console.log('5. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Network tab –≤ DevTools');
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testApiHealth().catch(console.error);
}

module.exports = testApiHealth;
