const axios = require('axios');

class TelegramHelper {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram Bot —Ç–æ–∫–µ–Ω–∞
  static async validateBotToken(token) {
    try {
      const response = await axios.get(`https://api.telegram.org/bot${token}/getMe`, {
        timeout: 5000
      });
      
      if (response.data && response.data.ok) {
        console.log(`‚úÖ Telegram Bot –≤–∞–ª–∏–¥–µ–Ω: @${response.data.result.username}`);
        return {
          valid: true,
          botInfo: response.data.result
        };
      } else {
        console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Telegram Bot —Ç–æ–∫–µ–Ω');
        return { valid: false, error: 'Invalid token' };
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram Bot:', error.message);
      return { valid: false, error: error.message };
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ telegram_id)
  static async getChatInfo(botToken, chatId) {
    try {
      const response = await axios.get(`https://api.telegram.org/bot${botToken}/getChat`, {
        params: { chat_id: chatId },
        timeout: 5000
      });
      
      if (response.data && response.data.ok) {
        return {
          valid: true,
          chatInfo: response.data.result
        };
      } else {
        return { valid: false, error: 'Chat not found' };
      }
      
    } catch (error) {
      return { valid: false, error: error.message };
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  static async sendTestMessage(botToken, chatId) {
    try {
      const message = `ü§ñ *–¢–µ—Å—Ç –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö –±–æ—Ç–∞*\n\n–í–∞—à Telegram ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n‚Ä¢ –ù–æ–≤—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–æ—Ä–≥–æ–≤\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∑–∞—è–≤–æ–∫\n\n_${new Date().toLocaleString('ru-RU')}_`;
      
      const response = await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown'
      }, {
        timeout: 10000
      });
      
      if (response.data && response.data.ok) {
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        return { success: true, messageId: response.data.result.message_id };
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', response.data);
        return { success: false, error: response.data };
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      return { success: false, error: error.message };
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
  static formatNotificationMessage(notification) {
    const { type, title, message } = notification;
    
    let emoji = 'üîî';
    switch (type) {
      case 'new_request':
        emoji = 'üìã';
        break;
      case 'bid_won':
        emoji = 'üèÜ';
        break;
      case 'bid_lost':
        emoji = 'üòî';
        break;
      case 'auction_closed':
        emoji = '‚úÖ';
        break;
      case 'auction_no_bids':
        emoji = '‚ùå';
        break;
    }
    
    return `${emoji} *${title}*\n\n${message}\n\n_${new Date().toLocaleString('ru-RU')}_`;
  }
}

module.exports = TelegramHelper;
