const logger = require('./logger');

class NotificationLogger {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static logNotificationCreated(userId, notificationData, notificationId) {
    logger.info('üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', {
      userId,
      notificationId,
      type: notificationData.type,
      title: notificationData.title,
      messageLength: notificationData.message?.length || 0,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static logNotificationError(userId, notificationData, error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
      userId,
      type: notificationData.type,
      title: notificationData.title,
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static logNotificationsFetched(userId, count, filters = {}) {
    logger.info('üì• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
      userId,
      count,
      filters,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  static logNotificationRead(userId, notificationId) {
    logger.info('üëÅÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', {
      userId,
      notificationId,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  static logAllNotificationsRead(userId, count) {
    logger.info('üëÅÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã', {
      userId,
      count,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –æ—Ç–ø—Ä–∞–≤–∫–∏
  static logTelegramSent(userId, title, success = true, error = null) {
    if (success) {
      logger.info('üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        userId,
        title,
        timestamp: new Date().toISOString()
      });
    } else {
      logger.warn('üì± –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram', {
        userId,
        title,
        error: error?.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static logSystemEvent(event, data = {}) {
    logger.info(`üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`, {
      event,
      data,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
  static logApiRequest(method, endpoint, userId, params = {}, responseStatus = null) {
    const logData = {
      method,
      endpoint,
      userId,
      params,
      timestamp: new Date().toISOString()
    };

    if (responseStatus !== null) {
      logData.responseStatus = responseStatus;
    }

    if (responseStatus >= 400) {
      logger.warn('üåê API –∑–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—à–∏–±–∫–∞)', logData);
    } else {
      logger.info('üåê API –∑–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', logData);
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static logPerformance(operation, duration, additionalData = {}) {
    logger.info(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${operation}`, {
      operation,
      duration: `${duration}ms`,
      ...additionalData,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static logSystemHealth(stats) {
    logger.info('üíä –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
      totalNotifications: stats.total,
      unreadNotifications: stats.unread,
      usersWithNotifications: stats.activeUsers,
      avgNotificationsPerUser: stats.avgPerUser,
      timestamp: new Date().toISOString()
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
  static debug(message, data = {}) {
    if (process.env.NODE_ENV === 'development' || process.env.LOG_LEVEL === 'debug') {
      logger.debug(`üêõ DEBUG: ${message}`, {
        ...data,
        timestamp: new Date().toISOString()
      });
    }
  }
}

module.exports = NotificationLogger;
