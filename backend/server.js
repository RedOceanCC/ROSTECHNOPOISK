// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
const envFile = process.env.NODE_ENV === 'production' 
  ? './production-config.env'  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º production-config.env
  : process.env.NODE_ENV === 'development'
    ? './config.env'          // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º config.env  
    : `./.env.${process.env.NODE_ENV || 'local'}`;  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ .env —Ñ–∞–π–ª—ã

require('dotenv').config({ path: envFile });

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
if (process.env.NODE_ENV === 'production') {
  console.log('üîß –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º:');
  console.log(`   ENV —Ñ–∞–π–ª: ${envFile}`);
  console.log(`   DB_PATH: ${process.env.DB_PATH}`);
  console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
}

const express = require('express');
const session = require('express-session');
const cors = require('cors');
const path = require('path');
const cron = require('node-cron');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏ middleware
const database = require('./models/Database');
const { errorHandler, logRequest } = require('./middleware/auth');

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = require('./utils/logger');
const { requestLogger, errorLogger } = require('./middleware/logging');
const { runMigrations } = require('./database/migrate');

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/users');
const companyRoutes = require('./routes/companies');
const equipmentRoutes = require('./routes/equipment');
const requestRoutes = require('./routes/requests');
const bidRoutes = require('./routes/bids');
const telegramRoutes = require('./routes/telegram');
const logRoutes = require('./routes/logs');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const AuctionService = require('./services/AuctionService');

// –ò–º–ø–æ—Ä—Ç Telegram –±–æ—Ç–∞
let TelegramWebApp = null;
let telegramBot = null;
if (process.env.TELEGRAM_BOT_TOKEN) {
  TelegramWebApp = require('./telegram-bot');
}

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? [
        'https://xn--e1aggkdcahelgf4b.xn--p1ai',
        'https://—Ä–æ—Å—Ç–µ—Ö–Ω–æ–ø–æ–∏—Å–∫.—Ä—Ñ',
        'http://xn--e1aggkdcahelgf4b.xn--p1ai',
        'http://—Ä–æ—Å—Ç–µ—Ö–Ω–æ–ø–æ–∏—Å–∫.—Ä—Ñ'
      ] 
    : [
        'http://localhost:3000', 
        'http://127.0.0.1:5500', 
        'http://localhost:5500',
        'http://localhost:8080',
        'null' // –î–ª—è file:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
      ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Cookie']
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: process.env.SESSION_SECRET || 'your-super-secret-session-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º secure –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    httpOnly: false, // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º httpOnly
    maxAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
    sameSite: 'lax', // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ä–µ–∂–∏–º
    domain: process.env.NODE_ENV === 'production' ? '.xn--e1aggkdcahelgf4b.xn--p1ai' : undefined
  },
  name: 'rostechnopoisk.sid' // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏
}));

// –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ middleware –¥–ª—è cookies
app.use((req, res, next) => {
  if (process.env.NODE_ENV === 'production' && req.url.startsWith('/api/')) {
    logger.debug('Request debug', {
      url: req.url,
      method: req.method,
      cookies: req.headers.cookie,
      sessionId: req.sessionID,
      hasSession: !!req.session,
      hasUser: !!(req.session && req.session.user)
    });
  }
  next();
});

// –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger);
app.use(logRequest);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../frontend/build')));
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è Telegram WebApp
const telegramWebappPath = path.join(__dirname, '../telegram-webapp');
console.log(`üì± Telegram WebApp –ø—É—Ç—å: ${telegramWebappPath}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const fs = require('fs');
if (fs.existsSync(telegramWebappPath)) {
  console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è telegram-webapp –Ω–∞–π–¥–µ–Ω–∞');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª request.html
  const requestHtmlPath = path.join(telegramWebappPath, 'request.html');
  if (fs.existsSync(requestHtmlPath)) {
    console.log('‚úÖ –§–∞–π–ª request.html –Ω–∞–π–¥–µ–Ω');
  } else {
    console.log('‚ùå –§–∞–π–ª request.html –ù–ï –Ω–∞–π–¥–µ–Ω –≤:', requestHtmlPath);
  }
} else {
  console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è telegram-webapp –ù–ï –Ω–∞–π–¥–µ–Ω–∞:', telegramWebappPath);
  console.log('üîç –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
  const altPaths = [
    path.join(__dirname, '../../telegram-webapp'),  // –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    '/root/ROSTECHNOPOISK/telegram-webapp',         // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    './telegram-webapp'                             // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  ];
  
  for (const altPath of altPaths) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${altPath}`);
    if (fs.existsSync(altPath)) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${altPath}`);
      app.use('/telegram', express.static(altPath));
      return;
    }
  }
  
  console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è telegram-webapp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø—É—Ç–µ–π');
}

app.use('/telegram', express.static(telegramWebappPath));

// API —Ä–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/companies', companyRoutes);
app.use('/api/equipment', equipmentRoutes);
app.use('/api/requests', requestRoutes);
app.use('/api/bids', bidRoutes);
app.use('/api/notifications', require('./routes/notifications'));
app.use('/api/telegram', telegramRoutes);
app.use('/api/logs', logRoutes);


// –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    message: '–°–µ—Ä–≤–µ—Ä –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram WebApp
app.get('/telegram/debug', (req, res) => {
  const fs = require('fs');
  const paths = [
    path.join(__dirname, '../telegram-webapp'),
    path.join(__dirname, '../../telegram-webapp'),
    '/root/ROSTECHNOPOISK/telegram-webapp',
    './telegram-webapp'
  ];
  
  const debugInfo = {
    currentDir: __dirname,
    paths: {},
    files: {}
  };
  
  paths.forEach(testPath => {
    debugInfo.paths[testPath] = fs.existsSync(testPath);
    if (fs.existsSync(testPath)) {
      try {
        debugInfo.files[testPath] = fs.readdirSync(testPath);
      } catch (error) {
        debugInfo.files[testPath] = `Error: ${error.message}`;
      }
    }
  });
  
  res.json(debugInfo);
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
if (process.env.NODE_ENV === 'production') {
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../frontend/build/index.html'));
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use(errorLogger);
app.use(errorHandler);

// Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
cron.schedule('*/10 * * * *', async () => {
  try {
    logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
    await AuctionService.closeExpiredAuctions();
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤', { error: error.message, stack: error.stack });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await database.connect();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π...');
    await runMigrations();
    logger.info('–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (process.env.TELEGRAM_BOT_TOKEN && TelegramWebApp) {
      telegramBot = new TelegramWebApp();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã Telegram WebApp
      TelegramWebApp.setupRoutes(app);
      
      logger.info('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    } else {
      logger.warn('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.log('‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      logger.info(`–°–µ—Ä–≤–µ—Ä –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`, {
        port: PORT,
        mode: process.env.NODE_ENV || 'development',
        apiUrl: `http://localhost:${PORT}/api`,
        database: process.env.DB_PATH || path.join(__dirname, 'database/rostechnopolsk.db'),
        telegramBot: !!telegramBot
      });
      
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìä –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîó API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
      console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DB_PATH || path.join(__dirname, 'database/rostechnopolsk.db')}`);
      
      if (telegramBot) {
        console.log(`ü§ñ Telegram WebApp: http://localhost:${PORT}/telegram/`);
      }
      
      if (process.env.NODE_ENV !== 'production') {
        console.log(`\nüéØ –î–µ–º–æ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –≤—Ö–æ–¥–∞:`);
        console.log(`   –ê–¥–º–∏–Ω: admin123`);
        console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: owner123`);
        console.log(`   –ú–µ–Ω–µ–¥–∂–µ—Ä: manager123`);
      }
    });
    
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { error: error.message, stack: error.stack });
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  
  try {
    await database.close();
    logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã', { error: error.message, stack: error.stack });
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  
  try {
    await database.close();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();
