const express = require('express');
const router = express.Router();
const Company = require('../models/Company');
const { requireAuth, requireAdmin, validateRequired } = require('../middleware/auth');

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Ä–æ—É—Ç–∞–º
router.use(requireAuth);

// GET /api/companies - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
router.get('/', async (req, res, next) => {
  try {
    console.log('üîç GET /api/companies –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', req.user ? req.user.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
    
    const companies = await Company.findAll();
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–∞–Ω–∏–π:', companies.length);
    
    res.json({
      success: true,
      companies: companies
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ GET /api/companies:', error);
    next(error);
  }
});

// GET /api/companies/:id - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ ID
router.get('/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const company = await Company.findById(id);
    
    if (!company) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      company: company
    });
    
  } catch (error) {
    next(error);
  }
});

// POST /api/companies - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.post('/',
  requireAdmin,
  validateRequired(['name']),
  async (req, res, next) => {
    try {
      const { name, description, contact_info } = req.body;
      
      const companyData = {
        name,
        description: description || null,
        contact_info: contact_info || null
      };
      
      const company = await Company.create(companyData);
      
      res.status(201).json({
        success: true,
        message: '–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        company: company
      });
      
    } catch (error) {
      if (error.message.includes('UNIQUE constraint failed')) {
        return res.status(409).json({
          success: false,
          message: '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      }
      next(error);
    }
  }
);

// PUT /api/companies/:id - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.put('/:id', requireAdmin, async (req, res, next) => {
  try {
    const { id } = req.params;
    const { name, description, contact_info, status } = req.body;
    
    const updateData = {
      name,
      description,
      contact_info,
      status: status || 'active'
    };
    
    const company = await Company.update(id, updateData);
    
    if (!company) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      message: '–ö–æ–º–ø–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      company: company
    });
    
  } catch (error) {
    if (error.message.includes('UNIQUE constraint failed')) {
      return res.status(409).json({
        success: false,
        message: '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }
    next(error);
  }
});

// DELETE /api/companies/:id - –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.delete('/:id', requireAdmin, async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const deleted = await Company.delete(id);
    
    if (!deleted) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      message: '–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    next(error);
  }
});

// GET /api/companies/:id/partnerships - –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏
router.get('/:id/partnerships', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && req.user.company_id !== parseInt(id)) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }
    
    const partnerships = await Company.getPartnerships(id);
    
    res.json({
      success: true,
      partnerships: partnerships
    });
    
  } catch (error) {
    next(error);
  }
});

// GET /api/partnerships - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.get('/admin/partnerships', requireAdmin, async (req, res, next) => {
  try {
    const partnerships = await Company.getAllPartnerships();
    
    res.json({
      success: true,
      partnerships: partnerships
    });
    
  } catch (error) {
    next(error);
  }
});

// POST /api/partnerships - –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.post('/admin/partnerships',
  requireAdmin,
  validateRequired(['owner_company_id', 'manager_company_id']),
  async (req, res, next) => {
    try {
      const { owner_company_id, manager_company_id } = req.body;
      
      if (owner_company_id === manager_company_id) {
        return res.status(400).json({
          success: false,
          message: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Å–∞–º–æ–π —Å–µ–±–µ'
        });
      }
      
      const result = await Company.createPartnership(owner_company_id, manager_company_id);
      
      res.status(201).json({
        success: true,
        message: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ',
        partnership_id: result.id
      });
      
    } catch (error) {
      next(error);
    }
  }
);

// DELETE /api/partnerships/:id - –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.delete('/admin/partnerships/:id', requireAdmin, async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const deleted = await Company.deletePartnership(id);
    
    if (!deleted) {
      return res.status(404).json({
        success: false,
        message: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    res.json({
      success: true,
      message: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    next(error);
  }
});

// GET /api/companies/:id/partners - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏-–ø–∞—Ä—Ç–Ω–µ—Ä—ã
router.get('/:id/partners', async (req, res, next) => {
  try {
    const { id } = req.params;
    const { type } = req.query; // 'owner' –∏–ª–∏ 'manager'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && req.user.company_id !== parseInt(id)) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }
    
    let partners;
    if (type === 'manager') {
      partners = await Company.getPartnerCompaniesForOwner(id);
    } else {
      partners = await Company.getPartnerCompaniesForManager(id);
    }
    
    res.json({
      success: true,
      partners: partners
    });
    
  } catch (error) {
    next(error);
  }
});

module.exports = router;
