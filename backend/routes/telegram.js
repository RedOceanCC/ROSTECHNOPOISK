const express = require('express');
const router = express.Router();
const { requireAuth } = require('../middleware/auth');
const User = require('../models/User');
const TelegramHelper = require('../utils/telegramHelper');
const database = require('../models/Database');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/link', requireAuth, async (req, res) => {
  try {
    const { telegram_id } = req.body;
    const userId = req.session.user.id;
    
    if (!telegram_id) {
      return res.status(400).json({
        error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram ID
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      return res.status(500).json({
        error: 'Telegram Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
      });
    }
    
    const chatCheck = await TelegramHelper.getChatInfo(botToken, telegram_id);
    if (!chatCheck.valid) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID –∏–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç',
        details: chatCheck.error
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram ID
    const existingUser = await User.findByTelegramId(telegram_id);
    if (existingUser && existingUser.id !== userId) {
      return res.status(400).json({
        error: '–≠—Ç–æ—Ç Telegram ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
      });
    }
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
    await User.linkTelegram(userId, telegram_id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = await TelegramHelper.sendTestMessage(botToken, telegram_id);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${userId} –ø—Ä–∏–≤—è–∑–∞–ª Telegram ID: ${telegram_id}`);
    
    res.json({
      success: true,
      message: 'Telegram ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω',
      test_message_sent: testMessage.success,
      chat_info: chatCheck.chatInfo
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// –û—Ç–≤—è–∑–∫–∞ Telegram ID
router.delete('/unlink', requireAuth, async (req, res) => {
  try {
    const userId = req.session.user.id;
    
    await User.linkTelegram(userId, null);
    
    console.log(`üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${userId} –æ—Ç–≤—è–∑–∞–ª Telegram ID`);
    
    res.json({
      success: true,
      message: 'Telegram ID —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Telegram ID:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram Bot
router.get('/bot-status', requireAuth, async (req, res) => {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken) {
      return res.json({
        configured: false,
        error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }
    
    const validation = await TelegramHelper.validateBotToken(botToken);
    
    res.json({
      configured: true,
      valid: validation.valid,
      bot_info: validation.botInfo,
      error: validation.error
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/test-notification', requireAuth, async (req, res) => {
  try {
    const userId = req.session.user.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user || !user.telegram_id) {
      return res.status(400).json({
        error: '–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram ID'
      });
    }
    
    const NotificationService = require('../services/NotificationService');
    
    const success = await NotificationService.sendNotification(userId, {
      type: 'test',
      title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      message: `–ü—Ä–∏–≤–µ—Ç, ${user.name}! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö.\n\n–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ`
    });
    
    res.json({
      success: success,
      message: success ? '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
router.post('/webhook', async (req, res) => {
  try {
    // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥—ã /start, /help, /requests –∏ —Ç.–¥.
    
    console.log('üì• Webhook –æ—Ç Telegram:', req.body);
    
    res.json({ ok: true });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ error: 'Webhook error' });
  }
});

module.exports = router;
