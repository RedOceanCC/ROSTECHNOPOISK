const express = require('express');
const router = express.Router();
const RentalRequest = require('../models/RentalRequest');
const RentalBid = require('../models/RentalBid');
const Equipment = require('../models/Equipment');
const User = require('../models/User');
const { requireAuth, requireAuthOrTelegram, requireManager, requireOwner, validateRequired } = require('../middleware/auth');
const logger = require('../utils/logger');
const { ValidationError, BusinessLogicError, NotFoundError } = require('../utils/errors');

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ –∞—É–∫—Ü–∏–æ–Ω –∏ –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å
 * @param {Object} request - –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
 * @returns {Boolean} - true –µ—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –∏—Å—Ç–µ–∫
 */
const isAuctionExpired = (request) => {
  if (!request || !request.auction_deadline) return false;
  return new Date(request.auction_deadline) <= new Date();
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
 * @param {Number} requestId - ID –∑–∞—è–≤–∫–∏
 * @returns {Object|null} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –∏–ª–∏ null
 */
const autoCloseExpiredAuction = async (requestId) => {
  try {
    const request = await RentalRequest.findById(requestId);
    
    if (!request || request.status !== 'auction_active') {
      return null;
    }
    
    if (isAuctionExpired(request)) {
      logger.info(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ ${requestId}`);
      const result = await RentalRequest.closeAuction(requestId);
      return result;
    }
    
    return null;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${requestId}:`, error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–µ
 * @param {Object} user - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @param {Object} request - –∑–∞—è–≤–∫–∞
 * @returns {Boolean} - –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø
 */
const hasRequestAccess = (user, request) => {
  return user.role === 'admin' || 
         user.id === request.manager_id ||
         user.role === 'owner';
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @param {Object} request - –∑–∞—è–≤–∫–∞
 * @param {Object} user - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @returns {String} - –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
const createResultsErrorMessage = (request, user) => {
  const now = new Date();
  const deadline = new Date(request.auction_deadline);
  const timeLeft = deadline - now;
  
  if (request.status === 'auction_active') {
    if (timeLeft > 0) {
      const minutesLeft = Math.ceil(timeLeft / (1000 * 60));
      return `–ê—É–∫—Ü–∏–æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${minutesLeft} –º–∏–Ω. (${deadline.toLocaleString('ru-RU')})`;
    } else {
      return '–ê—É–∫—Ü–∏–æ–Ω –∏—Å—Ç–µ–∫, –Ω–æ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
    }
  }
  
  if (request.status === 'pending') {
    return '–ê—É–∫—Ü–∏–æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è';
  }
  
  if (request.status === 'cancelled') {
    return '–ê—É–∫—Ü–∏–æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω';
  }
  
  return `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –°—Ç–∞—Ç—É—Å: ${request.status}`;
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Ä–æ—É—Ç–∞–º (–∫—Ä–æ–º–µ GET /)
router.use((req, res, next) => {
  // –î–ª—è GET /api/requests –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (req.method === 'GET' && req.path === '/') {
    return requireAuthOrTelegram(req, res, next);
  }
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  return requireAuth(req, res, next);
});

// GET /api/requests - –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏
router.get('/', async (req, res, next) => {
  try {
    let requests;
    
    if (req.user.role === 'admin') {
      // –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏
      requests = await RentalRequest.findAll();
    } else if (req.user.role === 'manager') {
      // –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
      requests = await RentalRequest.findByManagerId(req.user.id);
    } else if (req.user.role === 'owner') {
      // –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è
      requests = await RentalRequest.findActiveForOwner(req.user.id);
    } else {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }
    
    res.json({
      success: true,
      requests: requests
    });
    
  } catch (error) {
    next(error);
  }
});

// GET /api/requests/:id - –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID
router.get('/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    if (!id || isNaN(parseInt(id))) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
    }
    
    const request = await RentalRequest.findById(id);
    
    if (!request) {
      throw new NotFoundError('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!hasRequestAccess(req.user, request)) {
      throw new BusinessLogicError('–î–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω');
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
    await autoCloseExpiredAuction(parseInt(id));
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    const updatedRequest = await RentalRequest.findById(id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let bids = [];
    try {
      if (req.user.role === 'admin' || req.user.id === request.manager_id) {
        // –ê–¥–º–∏–Ω –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥—è—Ç –≤—Å–µ —Å—Ç–∞–≤–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞)
        if (updatedRequest.status === 'auction_closed' || updatedRequest.status === 'completed') {
          bids = await RentalBid.findByRequestId(id);
        } else {
          // –í–æ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –±–µ–∑ —Ü–µ–Ω
          bids = await RentalBid.findActiveByRequestId(id);
        }
      } else if (req.user.role === 'owner') {
        // –í–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ç–∞–≤–∫–∏
        const allBids = await RentalBid.findByOwnerId(req.user.id);
        bids = allBids.filter(bid => bid.request_id === parseInt(id));
      }
    } catch (bidsError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∑–∞—è–≤–∫–∏ ${id}:`, bidsError);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å—Ç–∞–≤–æ–∫
      bids = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∞—É–∫—Ü–∏–æ–Ω–∞
    const auctionInfo = {
      is_expired: isAuctionExpired(updatedRequest),
      time_left: updatedRequest.auction_deadline ? 
        Math.max(0, new Date(updatedRequest.auction_deadline) - new Date()) : 0
    };
    
    res.json({
      success: true,
      request: updatedRequest,
      bids: bids,
      auction_info: auctionInfo
    });
    
  } catch (error) {
    next(error);
  }
});

// POST /api/requests - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã)
router.post('/',
  requireManager,
  validateRequired(['equipment_type', 'equipment_subtype', 'start_date', 'end_date', 'work_description', 'location']),
  async (req, res, next) => {
    try {
      const {
        equipment_type, equipment_subtype, start_date, end_date,
        work_description, location, budget_range
      } = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
      const startDate = new Date(start_date);
      const endDate = new Date(end_date);
      const today = new Date();
      today.setSeconds(0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      
      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
        throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ISO 8601 —Ñ–æ—Ä–º–∞—Ç.');
      }
      
      if (startDate <= today) {
        throw new ValidationError('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
      }
      
      if (endDate <= startDate) {
        throw new ValidationError('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
      const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
      if (daysDiff > 365) {
        throw new ValidationError('–ü–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 365 –¥–Ω–µ–π');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
      let availableEquipment = [];
      try {
        availableEquipment = await Equipment.findAvailableForManager(
          req.user.id, equipment_type, equipment_subtype
        );
      } catch (equipmentError) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏:', equipmentError);
        throw new BusinessLogicError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏');
      }
      
      if (availableEquipment.length === 0) {
        throw new BusinessLogicError(
          `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–∏–ø–∞ "${equipment_type} - ${equipment_subtype}" –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π. ` +
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.'
        );
      }
      
      const requestData = {
        manager_id: req.user.id,
        equipment_type,
        equipment_subtype,
        start_date,
        end_date,
        work_description,
        location,
        budget_range: budget_range || null
      };
      
      const request = await RentalRequest.create(requestData);
      
      logger.info(`üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${request.id}`, {
        managerId: req.user.id,
        managerName: req.user.name,
        equipmentType: equipment_type,
        equipmentSubtype: equipment_subtype,
        availableOwners: availableEquipment.length
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º —Ç–µ—Ö–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ Telegram
      try {
        const { notifyNewRequest } = require('../telegram-bot');
        await notifyNewRequest(request.id);
        logger.info(`üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ ${request.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`);
      } catch (telegramError) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', telegramError);
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
      
      res.status(201).json({
        success: true,
        message: `–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ê—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${new Date(request.auction_deadline).toLocaleString('ru-RU')}`,
        request: request,
        auction_info: {
          deadline: request.auction_deadline,
          duration_minutes: parseInt(process.env.AUCTION_DURATION_MINUTES) || 5,
          available_owners: availableEquipment.length
        }
      });
      
    } catch (error) {
      next(error);
    }
  }
);

// PUT /api/requests/:id - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä-—Å–æ–∑–¥–∞—Ç–µ–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞—á–∞–ª—Å—è)
router.put('/:id', requireManager, async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const request = await RentalRequest.findById(id);
    
    if (!request) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.id !== request.manager_id) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if (request.status !== 'pending') {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞'
      });
    }
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    
    res.json({
      success: false,
      message: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö'
    });
    
  } catch (error) {
    next(error);
  }
});

// DELETE /api/requests/:id - –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä-—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
router.delete('/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const request = await RentalRequest.findById(id);
    
    if (!request) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && req.user.id !== request.manager_id) {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    if (request.status === 'completed') {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É'
      });
    }
    
    const deleted = await RentalRequest.delete(id);
    
    if (!deleted) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    next(error);
  }
});

// PATCH /api/requests/:id/status - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.patch('/:id/status', async (req, res, next) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏'
      });
    }
    
    const validStatuses = ['pending', 'auction_active', 'auction_closed', 'completed', 'cancelled'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏'
      });
    }
    
    const updated = await RentalRequest.updateStatus(id, status);
    
    if (!updated) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      message: '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    next(error);
  }
});

// GET /api/requests/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.get('/admin/stats', async (req, res, next) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }
    
    const stats = await RentalRequest.getStats();
    
    res.json({
      success: true,
      stats: stats
    });
    
  } catch (error) {
    next(error);
  }
});

// GET /api/requests/:id/results - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞
router.get('/:id/results', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    if (!id || isNaN(parseInt(id))) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
    }
    
    const request = await RentalRequest.findById(id);
    
    if (!request) {
      throw new NotFoundError('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏
    if (req.user.role !== 'admin' && req.user.id !== request.manager_id) {
      throw new BusinessLogicError('–î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞—É–∫—Ü–∏–æ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—è–≤–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.');
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
    const autoCloseResult = await autoCloseExpiredAuction(parseInt(id));
    if (autoCloseResult) {
      logger.info(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω ${id} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    const updatedRequest = await RentalRequest.findById(id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω (—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π)
    if (updatedRequest.status !== 'auction_closed' && updatedRequest.status !== 'completed') {
      const errorMessage = createResultsErrorMessage(updatedRequest, req.user);
      
      logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞`, {
        requestId: id,
        userId: req.user.id,
        userRole: req.user.role,
        requestStatus: updatedRequest.status,
        auctionDeadline: updatedRequest.auction_deadline,
        isExpired: isAuctionExpired(updatedRequest)
      });
      
      return res.status(400).json({
        success: false,
        message: errorMessage,
        details: {
          current_status: updatedRequest.status,
          auction_deadline: updatedRequest.auction_deadline,
          is_expired: isAuctionExpired(updatedRequest),
          server_time: new Date().toISOString()
        }
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
    let winner = null;
    if (updatedRequest.winning_bid_id) {
      try {
        const winningBid = await RentalBid.findById(updatedRequest.winning_bid_id);
        if (winningBid) {
          winner = {
            bid_id: winningBid.id,
            owner_name: winningBid.owner_name,
            owner_phone: winningBid.owner_phone,
            company_name: winningBid.company_name,
            equipment_name: winningBid.equipment_name,
            hourly_rate: winningBid.hourly_rate,
            daily_rate: winningBid.daily_rate,
            total_price: winningBid.total_price,
            comment: winningBid.comment,
            created_at: winningBid.created_at
          };
        }
      } catch (winnerError) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ${id}:`, winnerError);
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let allBids = [];
    let statistics = {
      total_bids: 0,
      min_price: null,
      max_price: null,
      avg_price: null
    };
    
    try {
      allBids = await RentalBid.findByRequestId(id);
      
      if (allBids.length > 0) {
        const prices = allBids.map(b => b.total_price).filter(p => p > 0);
        if (prices.length > 0) {
          statistics = {
            total_bids: allBids.length,
            min_price: Math.min(...prices),
            max_price: Math.max(...prices),
            avg_price: Math.round(prices.reduce((sum, p) => sum + p, 0) / prices.length)
          };
        }
      }
    } catch (statsError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${id}:`, statsError);
    }
    
    logger.info(`üìä –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${req.user.id} (${req.user.role})`);
    
    res.json({
      success: true,
      request: {
        id: updatedRequest.id,
        equipment_type: updatedRequest.equipment_type,
        equipment_subtype: updatedRequest.equipment_subtype,
        location: updatedRequest.location,
        start_date: updatedRequest.start_date,
        end_date: updatedRequest.end_date,
        work_description: updatedRequest.work_description,
        budget_range: updatedRequest.budget_range,
        status: updatedRequest.status,
        auction_deadline: updatedRequest.auction_deadline,
        created_at: updatedRequest.created_at
      },
      winner: winner,
      statistics: statistics,
      meta: {
        accessed_by: {
          user_id: req.user.id,
          user_role: req.user.role,
          access_time: new Date().toISOString()
        },
        auction_closed_automatically: !!autoCloseResult
      }
    });
    
  } catch (error) {
    next(error);
  }
});

// POST /api/requests/:id/close-auction - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∞—É–∫—Ü–∏–æ–Ω (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.post('/:id/close-auction', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    if (!id || isNaN(parseInt(id))) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
    }
    
    if (req.user.role !== 'admin') {
      throw new BusinessLogicError('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã');
    }
    
    const request = await RentalRequest.findById(id);
    
    if (!request) {
      throw new NotFoundError('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (request.status !== 'auction_active') {
      throw new BusinessLogicError(
        `–ê—É–∫—Ü–∏–æ–Ω –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}. ` +
        '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã.'
      );
    }
    
    logger.info(`üîê –ê–¥–º–∏–Ω ${req.user.id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω ${id}`, {
      adminId: req.user.id,
      adminName: req.user.name,
      requestId: id,
      equipmentType: request.equipment_type
    });
    
    const result = await RentalRequest.closeAuction(id);
    
    const responseMessage = result.winner 
      ? `–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${result.winner.owner_name} —Å —Ü–µ–Ω–æ–π ${result.winner.total_price}‚ÇΩ`
      : '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ. –°—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ, –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.';
    
    logger.info(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω ${id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º`, {
      hasWinner: !!result.winner,
      totalBids: result.bids.length,
      winnerPrice: result.winner?.total_price
    });
    
    res.json({
      success: true,
      message: responseMessage,
      result: {
        winner: result.winner,
        total_bids: result.bids.length,
        closed_by_admin: true,
        closed_at: new Date().toISOString(),
        admin_user: {
          id: req.user.id,
          name: req.user.name
        }
      }
    });
    
  } catch (error) {
    next(error);
  }
});

module.exports = router;
