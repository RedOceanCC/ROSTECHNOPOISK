const Equipment = require('./models/Equipment');
const Company = require('./models/Company');
const User = require('./models/User');
const db = require('./models/Database');

async function testPartnerships() {
  await db.connect();
  
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–¢–í –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò');
  
  // –ù–∞–π–¥–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const managers = await db.all('SELECT u.*, c.name as company_name FROM users u JOIN companies c ON u.company_id = c.id WHERE u.role = "manager" LIMIT 1');
  
  if (managers.length === 0) {
    console.log('‚ùå –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    await db.close();
    return;
  }
  
  const manager = managers[0];
  console.log('\nüë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', manager.name, '(ID:', manager.id + ')');
  console.log('üì¢ –ö–æ–º–ø–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', manager.company_name, '(ID:', manager.company_id + ')');
  
  console.log('\nüìã –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:');
  const partners = await Company.getPartnerCompaniesForManager(manager.company_id);
  partners.forEach(p => console.log('- ' + p.name + ' (ID: ' + p.id + ')'));
  
  if (partners.length === 0) {
    console.log('‚ö†Ô∏è –£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π!');
  }
  
  console.log('\nüîß –í–ª–∞–¥–µ–ª—å—Ü—ã –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö:');
  const owners = await db.all(`
    SELECT u.*, c.name as company_name 
    FROM users u 
    JOIN companies c ON u.company_id = c.id 
    JOIN company_partnerships cp ON c.id = cp.owner_company_id 
    WHERE cp.manager_company_id = ? AND u.role = 'owner' AND cp.status = 'active'
  `, [manager.company_id]);
  
  owners.forEach(o => console.log('- ' + o.name + ' (' + o.company_name + ')'));
  
  if (owners.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö!');
  }
  
  console.log('\nüöú –¢–µ—Ö–Ω–∏–∫–∞ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:');
  const equipment = await Equipment.findAvailableForManagerAll(manager.id);
  console.log('–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü:', equipment.length);
  
  if (equipment.length > 0) {
    equipment.slice(0, 5).forEach(e => 
      console.log('- ' + e.name + ' –æ—Ç ' + e.owner_name + ' (' + e.company_name + ')')
    );
    if (equipment.length > 5) {
      console.log('... –∏ –µ—â–µ ' + (equipment.length - 5) + ' –µ–¥–∏–Ω–∏—Ü');
    }
  } else {
    console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!');
  }
  
  console.log('\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:');
  const types = await Equipment.getAvailableTypesForManager(manager.id);
  console.log('–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤:', types.length);
  
  types.forEach(t => console.log('- ' + t.type + ' / ' + t.subtype + ' (' + t.count + ' –µ–¥.)'));
  
  console.log('\nüîç –û–±—â–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):');
  const allEquipment = await Equipment.findAll();
  console.log('–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:', allEquipment.length);
  
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  await db.close();
}

testPartnerships().catch(console.error);
