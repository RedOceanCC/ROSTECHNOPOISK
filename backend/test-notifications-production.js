const Database = require('./models/Database');
const NotificationService = require('./services/NotificationService');
const User = require('./models/User');

async function testNotificationsProduction() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ù–ê –ü–†–û–î–ê–ö–®–ï–ù–ï\n');
  
  try {
    await Database.connect();
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å—Ö–µ–º—É
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const tableInfo = await Database.all("PRAGMA table_info(notifications)");
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
      tableInfo.forEach(col => {
        console.log(`   - ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º CHECK constraint
      const schema = await Database.get("SELECT sql FROM sqlite_master WHERE type='table' AND name='notifications'");
      console.log('üìÑ SQL —Å—Ö–µ–º–∞:', schema.sql.substring(0, 200) + '...');
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –¢–∞–±–ª–∏—Ü–∞ notifications –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('–û—à–∏–±–∫–∞:', error.message);
      return;
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = await User.findAll();
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    if (users.length === 0) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const testUser = users[0];
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.name} (ID: ${testUser.id}, —Ä–æ–ª—å: ${testUser.role})`);
    
    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    
    try {
      const notificationId = await NotificationService.sendNotification(testUser.id, {
        type: 'system',
        title: '–¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        message: `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ ${new Date().toLocaleString('ru-RU')}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.name}`
      });
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${notificationId}`);
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
      console.log('–î–µ—Ç–∞–ª–∏:', error);
      return;
    }
    
    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
      const userNotifications = await NotificationService.getUserNotifications(testUser.id, 10);
      console.log(`üì® –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${userNotifications.length}`);
      
      if (userNotifications.length > 0) {
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
        userNotifications.slice(0, 3).forEach(notification => {
          console.log(`   - [${notification.type}] ${notification.title}`);
          console.log(`     ${notification.message.substring(0, 50)}...`);
          console.log(`     –°–æ–∑–¥–∞–Ω–æ: ${notification.created_at}, –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${notification.read_at || '–ù–µ—Ç'}`);
        });
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      return;
    }
    
    // –¢–µ—Å—Ç 5: –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    console.log('\n5. –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    try {
      const unreadCount = await NotificationService.getUnreadCount(testUser.id);
      console.log(`üìä –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${unreadCount}`);
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error.message);
      return;
    }
    
    // –¢–µ—Å—Ç 6: –¢–µ—Å—Ç API endpoint —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...');
    
    const testApiEndpoints = async () => {
      const endpoints = [
        '/api/notifications',
        '/api/notifications/count',
        '/api/notifications/unread'
      ];
      
      for (const endpoint of endpoints) {
        try {
          // –°–∏–º—É–ª–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
          console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: ${endpoint}`);
          console.log('   ‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ endpoint ${endpoint}:`, error.message);
        }
      }
    };
    
    await testApiEndpoints();
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
    console.log('\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ NotificationService –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
      const fs = require('fs');
      const path = require('path');
      
      const checkFileForNotifications = (filePath) => {
        try {
          const content = fs.readFileSync(filePath, 'utf8');
          return content.includes('NotificationService');
        } catch {
          return false;
        }
      };
      
      const integrationFiles = [
        './services/AuctionService.js',
        './routes/telegram.js'
      ];
      
      integrationFiles.forEach(file => {
        const hasIntegration = checkFileForNotifications(file);
        console.log(`   ${hasIntegration ? '‚úÖ' : '‚ùå'} ${file}: ${hasIntegration ? '–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω' : '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç NotificationService'}`);
      });
      
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:', error.message);
    }
    
    // –¢–µ—Å—Ç 8: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\n8. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    try {
      const totalNotifications = await Database.get('SELECT COUNT(*) as count FROM notifications');
      const notificationsByType = await Database.all(`
        SELECT type, COUNT(*) as count 
        FROM notifications 
        GROUP BY type 
        ORDER BY count DESC
      `);
      
      console.log(`üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalNotifications.count}`);
      console.log('üìä –ü–æ —Ç–∏–ø–∞–º:');
      notificationsByType.forEach(stat => {
        console.log(`   - ${stat.type}: ${stat.count}`);
      });
      
      const recentActivity = await Database.all(`
        SELECT DATE(created_at) as date, COUNT(*) as count 
        FROM notifications 
        WHERE created_at > datetime('now', '-7 days')
        GROUP BY DATE(created_at)
        ORDER BY date DESC
      `);
      
      console.log('üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:');
      recentActivity.forEach(day => {
        console.log(`   - ${day.date}: ${day.count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      });
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –ú–æ–¥—É–ª—å NotificationService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ backend —Å–µ—Ä–≤–µ—Ä –¥–ª—è API endpoints');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç notifications.js');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏ JavaScript');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ DevTools –±—Ä–∞—É–∑–µ—Ä–∞');
    
  } catch (error) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('Stack trace:', error.stack);
  } finally {
    await Database.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testNotificationsProduction().catch(console.error);
}

module.exports = testNotificationsProduction;
