const fs = require('fs');
const path = require('path');
const database = require('../models/Database');
const EquipmentCatalogImporter = require('../utils/csvImporter');
const logger = require('../utils/logger');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
async function createMigrationsTable(database) {
  const createTableSQL = `
    CREATE TABLE IF NOT EXISTS schema_migrations (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      version VARCHAR(255) NOT NULL UNIQUE,
      executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      execution_time_ms INTEGER,
      environment VARCHAR(50) DEFAULT 'development'
    );
  `;
  
  await database.run(createTableSQL);
  logger.info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ schema_migrations –≥–æ—Ç–æ–≤–∞');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
async function getExecutedMigrations(database) {
  try {
    const migrations = await database.all('SELECT version FROM schema_migrations ORDER BY version');
    return migrations.map(m => m.version);
  } catch (error) {
    logger.warn('–¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
    await createMigrationsTable(database);
    return [];
  }
}

// –ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
async function recordMigration(database, version, executionTime) {
  const environment = process.env.NODE_ENV || 'local';
  await database.run(
    'INSERT INTO schema_migrations (version, execution_time_ms, environment) VALUES (?, ?, ?)',
    [version, executionTime, environment]
  );
}

async function runMigrations() {
  try {
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    await database.connect();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await createMigrationsTable(database);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const executedMigrations = await getExecutedMigrations(database);
    logger.info(`üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${executedMigrations.length}`);
    
    // 1. –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationsDir = path.join(__dirname, 'migrations');
    const migrationFiles = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .sort();
    
    let appliedCount = 0;
    
    for (const file of migrationFiles) {
      const version = path.basename(file, '.sql');
      
      if (executedMigrations.includes(version)) {
        logger.info(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${file} (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)`);
        continue;
      }
      
      logger.info(`‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`);
      const startTime = Date.now();
      
      const migrationPath = path.join(migrationsDir, file);
      const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
      
      try {
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const statements = migrationSQL
          .split(';')
          .map(stmt => stmt.trim())
          .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
        
        for (const statement of statements) {
          await database.run(statement);
        }
        
        const executionTime = Date.now() - startTime;
        await recordMigration(database, version, executionTime);
        
        logger.info(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${file} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${executionTime}–º—Å`);
        appliedCount++;
        
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ ${file}:`, error);
        throw error;
      }
    }
    
    if (appliedCount === 0) {
      logger.info('‚ú® –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞');
    } else {
      logger.info(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: ${appliedCount}`);
    }
    
    // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–µ—Ö–Ω–∏–∫–∏
    logger.info('–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ CSV');
    const importer = new EquipmentCatalogImporter(database);
    const csvPath = process.env.EQUIPMENT_CATALOG_PATH || path.join(process.cwd(), 'Special_Equipment_Catalog.csv');
    
    if (fs.existsSync(csvPath)) {
      const result = await importer.importFromCSV(csvPath);
      logger.info('–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', result);
    } else {
      logger.warn('CSV —Ñ–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', { path: csvPath });
    }
    
    logger.info('–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π', {
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
async function createMigration(name) {
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[-:T]/g, '');
  const version = `${timestamp}_${name.toLowerCase().replace(/\s+/g, '_')}`;
  const filename = `${version}.sql`;
  const filepath = path.join(__dirname, 'migrations', filename);
  
  const template = `-- –ú–∏–≥—Ä–∞—Ü–∏—è: ${name}
-- –î–∞—Ç–∞: ${new Date().toISOString().slice(0, 10)}
-- –û–ø–∏—Å–∞–Ω–∏–µ: 

-- –î–æ–±–∞–≤—å—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:

`;
  
  fs.writeFileSync(filepath, template);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: ${filename}`);
  return filepath;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π
async function getMigrationStatus() {
  try {
    await database.connect();
    
    await createMigrationsTable(database);
    
    const executedMigrations = await getExecutedMigrations(database);
    const migrationsDir = path.join(__dirname, 'migrations');
    const allMigrationFiles = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .map(file => path.basename(file, '.sql'))
      .sort();
    
    console.log('\nüìä –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ô:');
    console.log('==================');
    
    allMigrationFiles.forEach(version => {
      const status = executedMigrations.includes(version) ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç';
      console.log(`${status} ${version}`);
    });
    
    const pending = allMigrationFiles.filter(v => !executedMigrations.includes(v));
    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${executedMigrations.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, ${pending.length} –æ–∂–∏–¥–∞–µ—Ç`);
    
    await database.close();
    return {
      executed: executedMigrations,
      pending: pending,
      total: allMigrationFiles.length
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  require('dotenv').config({
    path: `./.env.${process.env.NODE_ENV || 'local'}`
  });
  
  const command = process.argv[2];
  
  switch (command) {
    case 'create':
      const migrationName = process.argv[3];
      if (!migrationName) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run migrate create "Add new column"');
        process.exit(1);
      }
      createMigration(migrationName)
        .then(() => process.exit(0))
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
          process.exit(1);
        });
      break;
      
    case 'status':
      getMigrationStatus()
        .then(() => process.exit(0))
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞:', error);
          process.exit(1);
        });
      break;
      
    default:
      runMigrations()
        .then(() => {
          console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          process.exit(0);
        })
        .catch((error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
          process.exit(1);
        });
  }
}

module.exports = { 
  runMigrations, 
  createMigration, 
  getMigrationStatus,
  createMigrationsTable 
};
