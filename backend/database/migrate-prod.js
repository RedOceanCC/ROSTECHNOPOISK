#!/usr/bin/env node
/**
 * –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
 */

const fs = require('fs');
const path = require('path');
const database = require('../models/Database');
const logger = require('../utils/logger');

// –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
async function createBackup() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const dbPath = process.env.DB_PATH || path.join(__dirname, '../database/rostechnopolsk.db');
  const backupDir = process.env.BACKUP_PATH || path.join(__dirname, '../../backups');
  const backupPath = path.join(backupDir, `rostechnopolsk-backup-${timestamp}.db`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –ë–î
    if (fs.existsSync(dbPath)) {
      fs.copyFileSync(dbPath, backupPath);
      logger.info('–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', { 
        source: dbPath, 
        backup: backupPath,
        size: fs.statSync(backupPath).size 
      });
      return backupPath;
    } else {
      logger.warn('–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—ç–∫–∞–ø–∞', { path: dbPath });
      return null;
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞', { error: error.message });
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseIntegrity() {
  try {
    await database.connect();
    
    // PRAGMA integrity_check
    const integrityResult = await database.get('PRAGMA integrity_check');
    if (integrityResult && integrityResult.integrity_check !== 'ok') {
      throw new Error(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${integrityResult.integrity_check}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = ['users', 'companies', 'equipment', 'rental_requests', 'rental_bids'];
    for (const table of tables) {
      try {
        await database.get(`SELECT COUNT(*) as count FROM ${table}`);
      } catch (error) {
        logger.warn(`–¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, { error: error.message });
      }
    }
    
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î', { error: error.message });
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ/–ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
async function getDataStats() {
  try {
    const stats = {};
    const tables = ['users', 'companies', 'equipment', 'rental_requests', 'rental_bids', 'equipment_types'];
    
    for (const table of tables) {
      try {
        const result = await database.get(`SELECT COUNT(*) as count FROM ${table}`);
        stats[table] = result ? result.count : 0;
      } catch (error) {
        stats[table] = 'N/A';
      }
    }
    
    return stats;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö', { error: error.message });
    return {};
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å –æ—Ç–∫–∞—Ç–æ–º
async function runSafeMigrations() {
  let backupPath = null;
  let preStats = {};
  let postStats = {};
  
  try {
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
    
    // 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    logger.info('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    backupPath = await createBackup();
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await checkDatabaseIntegrity();
    
    // 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    preStats = await getDataStats();
    logger.info('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏', preStats);
    
    // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info('‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const { runMigrations } = require('./migrate');
    await runMigrations();
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    await checkDatabaseIntegrity();
    
    // 6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    postStats = await getDataStats();
    logger.info('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏', postStats);
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω—ã
    await validateDataConsistency(preStats, postStats);
    
    logger.info('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', {
      backup: backupPath,
      preStats,
      postStats
    });
    
    // 8. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    await cleanupOldBackups();
    
    return {
      success: true,
      backup: backupPath,
      preStats,
      postStats
    };
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π', { error: error.message, stack: error.stack });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
    if (backupPath && fs.existsSync(backupPath)) {
      logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞...');
      try {
        await restoreFromBackup(backupPath);
        logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞');
      } catch (restoreError) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞', { 
          error: restoreError.message 
        });
      }
    }
    
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
async function validateDataConsistency(preStats, postStats) {
  const issues = [];
  
  for (const table in preStats) {
    const preBefore = preStats[table];
    const preAfter = postStats[table];
    
    if (typeof preBefore === 'number' && typeof preAfter === 'number') {
      if (preAfter < preBefore) {
        issues.push(`–í —Ç–∞–±–ª–∏—Ü–µ ${table} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —É–º–µ–Ω—å—à–∏–ª–æ—Å—å —Å ${preBefore} –¥–æ ${preAfter}`);
      }
    }
  }
  
  if (issues.length > 0) {
    logger.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏', { issues });
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    if (process.env.NODE_ENV === 'production') {
      throw new Error(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö: ${issues.join(', ')}`);
    }
  }
  
  logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞');
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
async function restoreFromBackup(backupPath) {
  const dbPath = process.env.DB_PATH || path.join(__dirname, '../database/rostechnopolsk.db');
  
  try {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await database.close();
    
    // –ö–æ–ø–∏—Ä—É–µ–º –±—ç–∫–∞–ø –æ–±—Ä–∞—Ç–Ω–æ
    fs.copyFileSync(backupPath, dbPath);
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await database.connect();
    
    logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞', { 
      backup: backupPath, 
      restored: dbPath 
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞', { error: error.message });
    throw error;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
async function cleanupOldBackups() {
  const backupDir = process.env.BACKUP_PATH || path.join(__dirname, '../../backups');
  const maxBackups = 5;
  
  try {
    if (!fs.existsSync(backupDir)) {
      return;
    }
    
    const files = fs.readdirSync(backupDir)
      .filter(file => file.startsWith('rostechnopolsk-backup-') && file.endsWith('.db'))
      .map(file => ({
        name: file,
        path: path.join(backupDir, file),
        mtime: fs.statSync(path.join(backupDir, file)).mtime
      }))
      .sort((a, b) => b.mtime - a.mtime); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    if (files.length > maxBackups) {
      const toDelete = files.slice(maxBackups);
      for (const file of toDelete) {
        fs.unlinkSync(file.path);
        logger.info('–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø', { file: file.name });
      }
    }
    
    logger.info(`–û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${Math.min(files.length, maxBackups)} —Ñ–∞–π–ª–æ–≤`);
    
  } catch (error) {
    logger.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤', { error: error.message });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
async function listBackups() {
  const backupDir = process.env.BACKUP_PATH || path.join(__dirname, '../../backups');
  
  try {
    if (!fs.existsSync(backupDir)) {
      return [];
    }
    
    const files = fs.readdirSync(backupDir)
      .filter(file => file.startsWith('rostechnopolsk-backup-') && file.endsWith('.db'))
      .map(file => ({
        name: file,
        path: path.join(backupDir, file),
        size: fs.statSync(path.join(backupDir, file)).size,
        mtime: fs.statSync(path.join(backupDir, file)).mtime
      }))
      .sort((a, b) => b.mtime - a.mtime);
    
    return files;
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤', { error: error.message });
    return [];
  }
}

// CLI –∫–æ–º–∞–Ω–¥—ã
if (require.main === module) {
  require('dotenv').config({
    path: `./.env.${process.env.NODE_ENV || 'production'}`
  });
  
  const command = process.argv[2];
  
  switch (command) {
    case 'backup':
      createBackup()
        .then(backupPath => {
          console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error.message);
          process.exit(1);
        });
      break;
      
    case 'restore':
      const backupFile = process.argv[3];
      if (!backupFile) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞: npm run migrate-prod restore /path/to/backup.db');
        process.exit(1);
      }
      restoreFromBackup(backupFile)
        .then(() => {
          console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
          process.exit(1);
        });
      break;
      
    case 'list-backups':
      listBackups()
        .then(backups => {
          console.log('\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:');
          if (backups.length === 0) {
            console.log('   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤');
          } else {
            backups.forEach(backup => {
              console.log(`   ${backup.name} (${(backup.size / 1024 / 1024).toFixed(2)} MB, ${backup.mtime.toLocaleString()})`);
            });
          }
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
          process.exit(1);
        });
      break;
      
    case 'check':
      checkDatabaseIntegrity()
        .then(() => {
          console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–æ–π–¥–µ–Ω–∞');
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
          process.exit(1);
        });
      break;
      
    default:
      runSafeMigrations()
        .then(() => {
          console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
          process.exit(1);
        });
  }
}

module.exports = { 
  runSafeMigrations, 
  createBackup, 
  restoreFromBackup, 
  checkDatabaseIntegrity,
  listBackups,
  cleanupOldBackups,
  getDataStats
};
