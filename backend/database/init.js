const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');
const bcrypt = require('bcryptjs');

const DB_PATH = process.env.DB_PATH || path.join(__dirname, 'rostechnopolsk.db');

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(DB_PATH, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        reject(err);
        return;
      }
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, 'schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    db.exec(schema, async (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã:', err.message);
        reject(err);
        return;
      }
      console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');

      try {
        await insertDemoData(db);
        console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        
        try {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç–æ–º –∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
          console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏...');
          await createEquipmentTypesTable(db);
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∞');
          
          console.log('üîÑ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ—Ö–Ω–∏–∫–∏...');
          await importEquipmentCatalog(db);
          console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
          
        } catch (migrationError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã):', migrationError.message);
        }
        
        db.close((err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
            reject(err);
          } else {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            resolve();
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error);
        reject(error);
      }
    });
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
async function insertDemoData(db) {
  return new Promise(async (resolve, reject) => {
    try {
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
      const adminPassword = await bcrypt.hash('admin123', 10);
      const ownerPassword = await bcrypt.hash('owner123', 10);
      const managerPassword = await bcrypt.hash('manager123', 10);

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
      const companies = [
        { name: '–¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π –û–û–û', description: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–∞—Ä–∫–æ–º —Ç–µ—Ö–Ω–∏–∫–∏', contact_info: 'info@technostroy.ru, +7(495)123-45-67' },
        { name: '–°—Ç—Ä–æ–π–ú–∞—Å—Ç–µ—Ä', description: '–ì–µ–Ω–ø–æ–¥—Ä—è–¥—á–∏–∫ –ø–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É', contact_info: 'orders@stroymaster.ru, +7(495)987-65-43' },
        { name: '–ú–µ–≥–∞–°—Ç—Ä–æ–π –•–æ–ª–¥–∏–Ω–≥', description: '–ö—Ä—É–ø–Ω–∞—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', contact_info: 'info@megastroy.ru, +7(495)555-33-22' },
        { name: '–¢–µ—Ö–Ω–∏–∫–∞-–°–µ—Ä–≤–∏—Å', description: '–ê—Ä–µ–Ω–¥–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏', contact_info: 'rent@techservice.ru, +7(495)777-88-99' }
      ];

      for (const company of companies) {
        await new Promise((resolve, reject) => {
          db.run(
            'INSERT OR IGNORE INTO companies (name, description, contact_info) VALUES (?, ?, ?)',
            [company.name, company.description, company.contact_info],
            function(err) {
              if (err) reject(err);
              else resolve(this.lastID);
            }
          );
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = [
        { password: adminPassword, role: 'admin', name: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', phone: '+7(495)000-00-00', company_id: null },
        { password: ownerPassword, role: 'owner', name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', phone: '+7(999)123-45-67', company_id: 1 },
        { password: ownerPassword, role: 'owner', name: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á', phone: '+7(999)234-56-78', company_id: 4 },
        { password: managerPassword, role: 'manager', name: '–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á', phone: '+7(999)987-65-43', company_id: 2 },
        { password: managerPassword, role: 'manager', name: '–ö–æ–∑–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', phone: '+7(999)876-54-32', company_id: 3 }
      ];

      for (const user of users) {
        await new Promise((resolve, reject) => {
          db.run(
            'INSERT OR IGNORE INTO users (password, role, name, phone, company_id) VALUES (?, ?, ?, ?, ?)',
            [user.password, user.role, user.name, user.phone, user.company_id],
            function(err) {
              if (err) reject(err);
              else resolve(this.lastID);
            }
          );
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –º–µ–∂–¥—É –∫–æ–º–ø–∞–Ω–∏—è–º–∏
      const partnerships = [
        { owner_company_id: 1, manager_company_id: 2 }, // –¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π <-> –°—Ç—Ä–æ–π–ú–∞—Å—Ç–µ—Ä
        { owner_company_id: 1, manager_company_id: 3 }, // –¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π <-> –ú–µ–≥–∞–°—Ç—Ä–æ–π
        { owner_company_id: 4, manager_company_id: 2 }, // –¢–µ—Ö–Ω–∏–∫–∞-–°–µ—Ä–≤–∏—Å <-> –°—Ç—Ä–æ–π–ú–∞—Å—Ç–µ—Ä
        { owner_company_id: 4, manager_company_id: 3 }  // –¢–µ—Ö–Ω–∏–∫–∞-–°–µ—Ä–≤–∏—Å <-> –ú–µ–≥–∞–°—Ç—Ä–æ–π
      ];

      for (const partnership of partnerships) {
        await new Promise((resolve, reject) => {
          db.run(
            'INSERT OR IGNORE INTO company_partnerships (owner_company_id, manager_company_id) VALUES (?, ?)',
            [partnership.owner_company_id, partnership.manager_company_id],
            function(err) {
              if (err) reject(err);
              else resolve(this.lastID);
            }
          );
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É
      const equipment = [
        {
          name: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä Caterpillar 320D',
          type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä (–≥—É—Å–µ–Ω–∏—á–Ω—ã–π)',
          subtype: '–°—Ä–µ–¥–Ω–∏–π (20 —Ç)',
          owner_id: 2,
          phone: '+7(999)123-45-67',
          is_off_road: true,
          additional_equipment: '–ì–∏–¥—Ä–æ–º–æ–ª–æ—Ç, –±—ã—Å—Ç—Ä–æ—Å—ä—ë–º–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, GPS',
          description: '–ù–∞–¥–µ–∂–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
          hourly_rate: 2500.00,
          daily_rate: 18000.00,
          location: '–ú–æ—Å–∫–≤–∞'
        },
        {
          name: '–ê–≤—Ç–æ–∫—Ä–∞–Ω Liebherr 50—Ç',
          type: '–ê–≤—Ç–æ–∫—Ä–∞–Ω (–∫–æ–ª—ë—Å–Ω—ã–π)',
          subtype: '50 —Ç',
          owner_id: 2,
          phone: '+7(999)123-45-67',
          is_off_road: false,
          additional_equipment: '–ì—É—Å—ë–∫, –ø—Ä–æ—Ç–∏–≤–æ–≤–µ—Å—ã, —Å–∏—Å—Ç–µ–º–∞ –û–ù–ö',
          description: '–ú–æ—â–Ω—ã–π –∞–≤—Ç–æ–∫—Ä–∞–Ω –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö —Ä–∞–±–æ—Ç',
          hourly_rate: 3500.00,
          daily_rate: 25000.00,
          location: '–ú–æ—Å–∫–≤–∞'
        },
        {
          name: '–°–∞–º–æ—Å–≤–∞–ª –ö–ê–ú–ê–ó 6520',
          type: '–°–∞–º–æ—Å–≤–∞–ª',
          subtype: '3-–æ—Å–Ω—ã–π (6x4)',
          owner_id: 3,
          phone: '+7(999)234-56-78',
          is_off_road: false,
          additional_equipment: '–ü–æ–¥–æ–≥—Ä–µ–≤ –∫—É–∑–æ–≤–∞, GPS, —Ç–µ–ª–µ–º–∞—Ç–∏–∫–∞',
          description: '–ù–∞–¥–µ–∂–Ω—ã–π —Å–∞–º–æ—Å–≤–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Å—ã–ø—É—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
          hourly_rate: 1800.00,
          daily_rate: 12000.00,
          location: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
        }
      ];

      for (const eq of equipment) {
        await new Promise((resolve, reject) => {
          db.run(
            `INSERT OR IGNORE INTO equipment (name, type, subtype, owner_id, phone, is_off_road, 
             additional_equipment, description, hourly_rate, daily_rate, location) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [eq.name, eq.type, eq.subtype, eq.owner_id, eq.phone, eq.is_off_road,
             eq.additional_equipment, eq.description, eq.hourly_rate, eq.daily_rate, eq.location],
            function(err) {
              if (err) reject(err);
              else resolve(this.lastID);
            }
          );
        });
      }

      resolve();
    } catch (error) {
      reject(error);
    }
  });
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  require('dotenv').config({ path: './config.env' });
  initDatabase()
    .then(() => {
      console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      process.exit(1);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏
async function createEquipmentTypesTable(db) {
  return new Promise((resolve, reject) => {
    const sql = `
      CREATE TABLE IF NOT EXISTS equipment_types (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type VARCHAR(100) NOT NULL,
        subtype VARCHAR(100) NOT NULL,
        characteristics TEXT,
        is_off_road BOOLEAN DEFAULT 0,
        additional_options TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(type, subtype)
      );
      
      CREATE INDEX IF NOT EXISTS idx_equipment_types_type ON equipment_types(type);
      CREATE INDEX IF NOT EXISTS idx_equipment_types_subtype ON equipment_types(subtype);
      CREATE INDEX IF NOT EXISTS idx_equipment_types_off_road ON equipment_types(is_off_road);
    `;
    
    db.exec(sql, (err) => {
      if (err) reject(err);
      else resolve();
    });
  });
}

// –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ CSV
async function importEquipmentCatalog(db) {
  const csvPath = process.env.EQUIPMENT_CATALOG_PATH || path.join(process.cwd(), 'Special_Equipment_Catalog.csv');
  
  if (!fs.existsSync(csvPath)) {
    console.log('‚ö†Ô∏è CSV —Ñ–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç');
    return;
  }
  
  const csvContent = fs.readFileSync(csvPath, 'utf8');
  const lines = csvContent.split('\n');
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  const dataLines = lines.slice(2, -2); // –£–±–∏—Ä–∞–µ–º ```csv –∏ ```
  
  let imported = 0;
  
  for (const line of dataLines) {
    if (!line.trim()) continue;
    
    try {
      const data = parseCSVLine(line);
      if (data) {
        await insertEquipmentType(db, data);
        imported++;
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏:', line.substring(0, 50), error.message);
    }
  }
  
  console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏: ${imported}`);
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ CSV
function parseCSVLine(line) {
  const fields = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      fields.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  fields.push(current.trim());
  
  if (fields.length < 5) {
    return null;
  }
  
  return {
    type: fields[0],
    subtype: fields[1],
    characteristics: fields[2],
    is_off_road: fields[3].toLowerCase().trim() === '–¥–∞',
    additional_options: fields[4]
  };
}

// –í—Å—Ç–∞–≤–∫–∞ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏
async function insertEquipmentType(db, data) {
  return new Promise((resolve, reject) => {
    const sql = `
      INSERT OR IGNORE INTO equipment_types 
      (type, subtype, characteristics, is_off_road, additional_options)
      VALUES (?, ?, ?, ?, ?)
    `;
    
    db.run(sql, [
      data.type,
      data.subtype,
      data.characteristics,
      data.is_off_road ? 1 : 0,
      data.additional_options
    ], function(err) {
      if (err) reject(err);
      else resolve(this.lastID);
    });
  });
}

module.exports = { initDatabase };
