// –¢–µ—Å—Ç API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const http = require('http');

const API_BASE = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, API_BASE);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': 'session_id=test-session' // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(body);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testNotificationsAPI() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
  console.log('=' .repeat(50));

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    console.log('\n1. üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...');
    const health = await makeRequest('GET', '/api/health');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${health.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, health.data);

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 401 –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log('\n2. üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)...');
    const notifications = await makeRequest('GET', '/api/notifications');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${notifications.status} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 401)`);
    if (notifications.status === 401) {
      console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', notifications.data);
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n3. üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    const createTest = await makeRequest('POST', '/api/notifications/test');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${createTest.status}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, createTest.data);

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\n4. üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ä—à—Ä—É—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const routes = [
      '/api/notifications',
      '/api/notifications/test',
      '/api/notifications/mark-read',
      '/api/notifications/mark-all-read'
    ];

    for (const route of routes) {
      try {
        const response = await makeRequest('GET', route);
        console.log(`   ${route}: ${response.status} ${response.status < 500 ? '‚úÖ' : '‚ùå'}`);
      } catch (error) {
        console.log(`   ${route}: ERROR - ${error.message} ‚ùå`);
      }
    }

    console.log('\n' + '=' .repeat(50));
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ backend
async function checkBackend() {
  try {
    const health = await makeRequest('GET', '/api/health');
    if (health.status === 200) {
      console.log('‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      return true;
    }
  } catch (error) {
    console.log('‚ùå Backend –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: cd backend && npm run local');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîî –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
  console.log('–í—Ä–µ–º—è:', new Date().toLocaleString());
  console.log('API Base:', API_BASE);
  
  const backendRunning = await checkBackend();
  if (backendRunning) {
    await testNotificationsAPI();
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
