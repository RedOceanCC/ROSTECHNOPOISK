// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
  ? 'http://localhost:3001/api'
  : '/api';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appData = {
  currentUser: null,
  equipmentTypes: {} // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
};

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiRequest(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const config = {
    credentials: 'include',
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    },
    ...options
  };

  try {
    console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);
    
    const response = await fetch(url, config);
    
    console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      const text = await response.text();
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:', text);
      return {
        success: false,
        status: response.status,
        message: `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}: ${text.substring(0, 200)}`,
        error: 'INVALID_RESPONSE_TYPE'
      };
    }
    
    const data = await response.json();
    console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
    
    // –î–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
    // –≤–º–µ—Å—Ç–æ –±—Ä–æ—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
    if (!response.ok) {
      return {
        success: false,
        status: response.status,
        message: data.message || `HTTP ${response.status}: ${response.statusText}`,
        ...data
      };
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå API Error:', error);
    console.error('‚ùå URL:', url);
    console.error('‚ùå Config:', config);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ –±—Ä–æ—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return {
      success: false,
      status: 0,
      message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞',
      error: 'NETWORK_ERROR',
      originalError: error
    };
  }
}

// –£—Ç–∏–ª–∏—Ç—ã
function showPage(pageId) {
  // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (typeof auctionTimer !== 'undefined') {
    auctionTimer.stopAllTimers();
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (typeof realTimeUpdater !== 'undefined') {
    realTimeUpdater.stop();
  }
  
  document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
  document.getElementById(pageId).classList.add('active');
}

function showTab(tabId) {
  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–æ–≤
  if (typeof auctionTimer !== 'undefined') {
    auctionTimer.stopAllTimers();
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
  document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
  const targetTab = document.getElementById(tabId);
  if (targetTab) {
    targetTab.classList.add('active');
  } else {
    console.error(`–¢–∞–± "${tabId}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
  document.querySelectorAll('.sidebar-nav-item[data-tab]').forEach(item => {
    item.classList.remove('active');
  });
  
  const buttonDataTab = tabId.replace('-tab', '');
  const tabButton = document.querySelector(`[data-tab="${buttonDataTab}"]`);
  if (tabButton) {
    tabButton.classList.add('active');
  } else {
    console.error(`–ö–Ω–æ–ø–∫–∞ –¥–ª—è "${buttonDataTab}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
  }
}

function showModal(modalId) {
  document.getElementById(modalId).classList.remove('hidden');
}

function hideModal(modalId) {
  document.getElementById(modalId).classList.add('hidden');
}

// generateId –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, ID –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

function formatDate(date) {
  return new Date(date).toLocaleDateString('ru-RU');
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è onclick handlers
window.deleteUser = async function(userId) {
  if (userId === appData.currentUser.id) {
    alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
    try {
      await apiRequest(`/users/${userId}`, { method: 'DELETE' });
      await renderUsersTable();
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message);
    }
  }
};

window.deleteEquipment = async function(equipmentId) {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç–µ—Ö–Ω–∏–∫—É?')) {
    try {
      await apiRequest(`/equipment/${equipmentId}`, { method: 'DELETE' });
      await renderEquipmentGrid();
      alert('–¢–µ—Ö–Ω–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏: ' + error.message);
    }
  }
};

window.editEquipment = function(equipmentId) {
  alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
};

window.editUser = async function(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await apiRequest(`/users/${userId}`);
    if (!response.success) {
      throw new Error(response.message);
    }
    
    const user = response.user;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('edit-user-id').value = user.id;
    document.getElementById('edit-user-name').value = user.name;
    document.getElementById('edit-user-phone').value = user.phone || '';
    document.getElementById('edit-user-telegram-id').value = user.telegram_id || '';
    document.getElementById('edit-user-role').value = user.role;
    document.getElementById('edit-user-company').value = user.company_id || '';
    document.getElementById('edit-user-password').value = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    await populateEditCompaniesSelect();
    showModal('edit-user-modal');
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message);
  }
};

window.deleteCompany = async function(companyId) {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
    try {
      await apiRequest(`/companies/${companyId}`, { method: 'DELETE' });
      await renderCompaniesTable();
      
      if (window.notificationManager) {
        window.notificationManager.show('–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        alert('–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:', error);
      
      if (window.notificationManager) {
        window.notificationManager.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message, 'error');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
      }
    }
  }
};

window.editCompany = function(companyId) {
  if (window.notificationManager) {
    window.notificationManager.show('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
  } else {
    alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
window.showAuctionResults = async function(requestId) {
  console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞ #${requestId}...`);
  
  const response = await apiRequest(`/requests/${requestId}/results`);
  console.log('üìã –û—Ç–≤–µ—Ç API:', response);
  
  if (!response.success) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${response.message}`);
    
    // –ï—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (response.message && response.message.includes('–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω')) {
      alert('‚è≥ –ê—É–∫—Ü–∏–æ–Ω –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
      return;
    }
    
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞: ' + (response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    return;
  }

  const { request, winner, statistics } = response;
  
  const modal = document.getElementById('auction-results-modal');
  if (!modal) {
    console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return;
  }

  const content = document.getElementById('auction-results-content');
  
  let resultsHTML = `
    <div class="auction-results-header">
      <h3>üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞</h3>
      <div class="auction-info">
        <h4>${request.equipment_type} - ${request.equipment_subtype}</h4>
        <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${request.location}</p>
        <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDate(request.start_date)} - ${formatDate(request.end_date)}</p>
        <p><strong>–ó–∞–≤–µ—Ä—à–µ–Ω:</strong> ${new Date(request.auction_deadline).toLocaleString()}</p>
      </div>
    </div>
  `;

  if (winner) {
    resultsHTML += `
      <div class="winner-section">
        <div class="winner-header">
          <span class="winner-icon">üèÜ</span>
          <h4>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∞—É–∫—Ü–∏–æ–Ω–∞</h4>
        </div>
        <div class="winner-contact-card">
          <div class="contact-info">
            <div class="contact-field">
              <span class="contact-label">üë§ –ò–º—è:</span>
              <span class="contact-value">${winner.owner_name}</span>
            </div>
            <div class="contact-field">
              <span class="contact-label">üìû –¢–µ–ª–µ—Ñ–æ–Ω:</span>
              <span class="contact-value">
                <a href="tel:${winner.owner_phone}" class="phone-link">${winner.owner_phone}</a>
              </span>
            </div>
            ${winner.company_name ? `
              <div class="contact-field">
                <span class="contact-label">üè¢ –ö–æ–º–ø–∞–Ω–∏—è:</span>
                <span class="contact-value">${winner.company_name}</span>
              </div>
            ` : ''}
            <div class="contact-field">
              <span class="contact-label">üöú –¢–µ—Ö–Ω–∏–∫–∞:</span>
              <span class="contact-value">${winner.equipment_name}</span>
            </div>
          </div>
          <div class="price-info">
            <div class="price-main">
              <span class="price-label">üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
              <span class="price-value">${winner.total_price.toLocaleString()} ‚ÇΩ</span>
            </div>
            ${winner.hourly_rate ? `
              <div class="price-detail">
                <span class="price-label">–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</span>
                <span class="price-value">${winner.hourly_rate.toLocaleString()} ‚ÇΩ/—á–∞—Å</span>
              </div>
            ` : ''}
            ${winner.daily_rate ? `
              <div class="price-detail">
                <span class="price-label">–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</span>
                <span class="price-value">${winner.daily_rate.toLocaleString()} ‚ÇΩ/–¥–µ–Ω—å</span>
              </div>
            ` : ''}
          </div>
        </div>
        ${winner.comment ? `
          <div class="winner-comment">
            <h5>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</h5>
            <p>${winner.comment}</p>
          </div>
        ` : ''}
      </div>
    `;
  } else {
    resultsHTML += `
      <div class="no-winner-section">
        <div class="no-winner-card">
          <span class="no-winner-icon">‚ùå</span>
          <h4>–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</h4>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –±—ã–ª–æ –ø–æ–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏.</p>
        </div>
      </div>
    `;
  }

  if (statistics.total_bids > 0) {
    resultsHTML += `
      <div class="statistics-section">
        <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞</h4>
        <div class="stats-grid">
          <div class="stat-item">
            <span class="stat-label">–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</span>
            <span class="stat-value">${statistics.total_bids}</span>
          </div>
          ${statistics.min_price ? `
            <div class="stat-item">
              <span class="stat-label">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</span>
              <span class="stat-value">${statistics.min_price.toLocaleString()} ‚ÇΩ</span>
            </div>
          ` : ''}
          ${statistics.max_price ? `
            <div class="stat-item">
              <span class="stat-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</span>
              <span class="stat-value">${statistics.max_price.toLocaleString()} ‚ÇΩ</span>
            </div>
          ` : ''}
          ${statistics.avg_price ? `
            <div class="stat-item">
              <span class="stat-label">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</span>
              <span class="stat-value">${statistics.avg_price.toLocaleString()} ‚ÇΩ</span>
            </div>
          ` : ''}
        </div>
      </div>
    `;
  }

  content.innerHTML = resultsHTML;
  showModal('auction-results-modal');
};



window.respondToOrder = async function(orderId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
    const response = await apiRequest(`/requests/${orderId}`);
    if (!response.success) {
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–∫–∏');
      return;
    }
    
    const order = response.request;
  const modal = document.getElementById('respond-order-modal');
  const detailsDiv = document.getElementById('order-details-display');
    const equipmentSelect = document.getElementById('bid-equipment');
  
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
  detailsDiv.innerHTML = `
    <h4>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h4>
      <p><strong>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</strong> ${order.equipment_type}</p>
      <p><strong>–ü–æ–¥—Ç–∏–ø:</strong> ${order.equipment_subtype}</p>
      <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDate(order.start_date)} - ${formatDate(order.end_date)}</p>
    <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${order.location}</p>
      <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${order.work_description}</p>
      <p><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> ${order.manager_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
      ${order.auction_deadline ? `<p><strong>–î–µ–¥–ª–∞–π–Ω:</strong> ${new Date(order.auction_deadline).toLocaleString()}</p>` : ''}
    `;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ—Ö–Ω–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const equipmentResponse = await apiRequest('/equipment');
    if (equipmentResponse.success) {
      const userEquipment = equipmentResponse.equipment.filter(eq => 
        eq.type === order.equipment_type && 
        eq.subtype === order.equipment_subtype &&
        eq.status === 'available'
      );
      
      equipmentSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É</option>';
      userEquipment.forEach(equipment => {
        const option = document.createElement('option');
        option.value = equipment.id;
        option.textContent = `${equipment.name} (${equipment.location || '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'})`;
        equipmentSelect.appendChild(option);
      });
      
      if (userEquipment.length === 0) {
        equipmentSelect.innerHTML = '<option value="">–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏</option>';
        alert('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏');
        return;
      }
    }
    
    showModal('respond-order-modal');
    modal.dataset.orderId = orderId;
    
  } catch (error) {
    alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
};

// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleLogin(event) {
  event.preventDefault();
  
  const passwordInput = document.getElementById('password');
  const loginError = document.getElementById('login-error');
  const password = passwordInput.value.trim();
  
  const response = await apiRequest('/auth/login', {
    method: 'POST',
    body: JSON.stringify({ password })
  });
  
  if (response.success) {
    appData.currentUser = response.user;
    loginError.classList.add('hidden');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏
    await loadEquipmentTypes();
    
    switch (response.user.role) {
      case 'admin':
        showPage('admin-dashboard');
        await initAdminDashboard();
        break;
      case 'owner':
        showPage('owner-dashboard');
        await initOwnerDashboard();
        break;
      case 'manager':
        showPage('manager-dashboard');
        await initManagerDashboard();
        break;
    }
  } else {
    loginError.classList.remove('hidden');
    loginError.textContent = response.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
    passwordInput.value = '';
  }
}

async function handleLogout() {
  const response = await apiRequest('/auth/logout', { method: 'POST' });
  if (!response.success) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', response);
  }
  
  appData.currentUser = null;
  showPage('login-page');
  document.getElementById('password').value = '';
  document.getElementById('login-error').classList.add('hidden');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadEquipmentTypes() {
  const response = await apiRequest('/equipment/equipment-types');
  if (response.success) {
    appData.equipmentTypes = response.data;
    console.log('–¢–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', appData.equipmentTypes);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    updateEquipmentTypeSelects();
  } else {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏:', response);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    appData.equipmentTypes = {
      "–°–∞–º–æ—Å–≤–∞–ª": ["3-–æ—Å–Ω—ã–π (6x4)", "4-–æ—Å–Ω—ã–π (8x4)"],
      "–ê–≤—Ç–æ–∫—Ä–∞–Ω (–∫–æ–ª—ë—Å–Ω—ã–π)": ["16 —Ç", "25 —Ç", "32 —Ç"],
      "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä (–≥—É—Å–µ–Ω–∏—á–Ω—ã–π, –ø–æ–ª–Ω–æ–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–π)": ["–ú–∏–Ω–∏ (2 —Ç)", "–°—Ä–µ–¥–Ω–∏–π (20 —Ç)"]
    };
    updateEquipmentTypeSelects();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏
function updateEquipmentTypeSelects() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
  const equipmentTypeSelect = document.getElementById('equipment-type');
  if (equipmentTypeSelect) {
    equipmentTypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
    Object.keys(appData.equipmentTypes).forEach(type => {
      const option = document.createElement('option');
      option.value = type;
      option.textContent = type;
      equipmentTypeSelect.appendChild(option);
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
  const orderTypeSelect = document.getElementById('order-type');
  if (orderTypeSelect) {
    orderTypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏</option>';
    Object.keys(appData.equipmentTypes).forEach(type => {
      const option = document.createElement('option');
      option.value = type;
      option.textContent = type;
      orderTypeSelect.appendChild(option);
    });
  }
}

// –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
async function initAdminDashboard() {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±—ã —Å–Ω–∞—á–∞–ª–∞
  setupAdminTabs();

  // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
  await renderUsersTable();
  setupCreateUserModal();
  setupEditUserModal();
  setupCreateCompanyModal();

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  realTimeUpdater.start('admin-dashboard');

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
}

async function renderUsersTable() {
  const tbody = document.getElementById('users-table-body');
  tbody.innerHTML = '<tr><td colspan="6">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>';
  
  try {
    const response = await apiRequest('/users');
    if (response.success) {
      tbody.innerHTML = '';
      
      response.users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${user.id}</td>
          <td>${user.name}</td>
          <td>${getRoleLabel(user.role)}</td>
          <td>${user.company_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}</td>
          <td>${user.telegram_id || '<span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω</span>'}</td>
          <td>
            <button class="btn btn--secondary btn--small" onclick="editUser(${user.id})" style="margin-right: 8px;">
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button class="btn btn--danger btn--small" onclick="deleteUser(${user.id})">
              –£–¥–∞–ª–∏—Ç—å
            </button>
          </td>
        `;
        tbody.appendChild(row);
      });
    }
  } catch (error) {
    tbody.innerHTML = `<tr><td colspan="6">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</td></tr>`;
  }
}

function getRoleLabel(role) {
  const labels = {
    admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    owner: '–í–ª–∞–¥–µ–ª–µ—Ü —Ç–µ—Ö–Ω–∏–∫–∏',
    manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä'
  };
  return labels[role] || role;
}

function setupCreateUserModal() {
  const createBtn = document.getElementById('create-user-btn');
  const modal = document.getElementById('create-user-modal');
  const form = document.getElementById('create-user-form');
  
  createBtn.onclick = async () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–∞
    await populateCompaniesSelect();
    showModal('create-user-modal');
  };
  
  modal.querySelector('.modal-close').onclick = () => hideModal('create-user-modal');
  modal.querySelector('.modal-cancel').onclick = () => hideModal('create-user-modal');
  modal.querySelector('.modal-backdrop').onclick = () => hideModal('create-user-modal');
  
  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const newUser = {
      name: document.getElementById('new-user-name').value,
      phone: document.getElementById('new-user-phone').value,
      telegram_id: document.getElementById('new-user-telegram-id').value || null,
      role: document.getElementById('new-user-role').value,
      company_id: parseInt(document.getElementById('new-user-company').value) || null,
      password: document.getElementById('new-user-password').value
    };
    
    try {
      await apiRequest('/users', {
        method: 'POST',
        body: JSON.stringify(newUser)
      });
      
      await renderUsersTable();
    hideModal('create-user-modal');
    form.reset();
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message);
    }
  };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setupEditUserModal() {
  const modal = document.getElementById('edit-user-modal');
  const form = document.getElementById('edit-user-form');
  
  modal.querySelector('.modal-close').onclick = () => hideModal('edit-user-modal');
  modal.querySelector('.modal-cancel').onclick = () => hideModal('edit-user-modal');
  modal.querySelector('.modal-backdrop').onclick = () => hideModal('edit-user-modal');
  
  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const userId = document.getElementById('edit-user-id').value;
    const userData = {
      name: document.getElementById('edit-user-name').value,
      phone: document.getElementById('edit-user-phone').value || null,
      telegram_id: document.getElementById('edit-user-telegram-id').value || null,
      role: document.getElementById('edit-user-role').value,
      company_id: parseInt(document.getElementById('edit-user-company').value) || null
    };
    
    const password = document.getElementById('edit-user-password').value;
    if (password) {
      userData.password = password;
    }
    
    try {
      await apiRequest(`/users/${userId}`, {
        method: 'PUT',
        body: JSON.stringify(userData)
      });
      
      await renderUsersTable();
      hideModal('edit-user-modal');
      form.reset();
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message);
    }
  };
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function populateCompaniesSelect() {
  const select = document.getElementById('new-user-company');
  
  if (!select) {
    console.error('–°–µ–ª–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  try {
    const response = await apiRequest('/companies');
    
    if (response.success && response.companies) {
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
      select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</option>';
      
      let activeCompaniesCount = 0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
      response.companies.forEach(company => {
        if (company.status === 'active') { // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
          const option = document.createElement('option');
          option.value = company.id;
          option.textContent = company.name;
          select.appendChild(option);
          activeCompaniesCount++;
        }
      });
      
      if (activeCompaniesCount === 0) {
        select.innerHTML = '<option value="">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π</option>';
      }
    } else {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API –∫–æ–º–ø–∞–Ω–∏–π:', response);
      select.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π</option>';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π:', error);
    select.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π</option>';
  }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function populateEditCompaniesSelect() {
  const select = document.getElementById('edit-user-company');
  
  if (!select) {
    console.error('–°–µ–ª–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  try {
    const response = await apiRequest('/companies');
    
    if (response.success && response.companies) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const currentValue = select.value;
      
      // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏
      select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é</option>';
      
      response.companies.forEach(company => {
        if (company.status === 'active') {
          const option = document.createElement('option');
          option.value = company.id;
          option.textContent = company.name;
          select.appendChild(option);
        }
      });
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      select.value = currentValue;
    } else {
      select.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π</option>';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–∞–Ω–∏–π:', error);
    select.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π</option>';
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏ –∞–¥–º–∏–Ω–∞
function setupAdminTabs() {
  const tabItems = document.querySelectorAll('#admin-dashboard .sidebar-nav-item[data-tab]');
  
  tabItems.forEach((item, index) => {
    const tabName = item.dataset.tab;
    
    item.onclick = (e) => {
      e.preventDefault();
      
      const tab = item.dataset.tab;
      showTab(tab + '-tab');
      
      if (tab === 'companies') {
        renderCompaniesTable();
      } else if (tab === 'partnerships') {
        renderPartnershipsMatrix();
      }
    };
  });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∏–¥–∞ –∫–æ–º–ø–∞–Ω–∏–π
async function renderCompaniesTable() {
  const grid = document.getElementById('companies-grid');
  grid.innerHTML = '<div class="empty-state">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...</div>';
  
  try {
    const response = await apiRequest('/companies');
    
    if (response.success && response.companies) {
      grid.innerHTML = '';
      
      if (response.companies.length === 0) {
        grid.innerHTML = `
          <div class="empty-state">
            <h3>–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π</h3>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π</p>
          </div>
        `;
        return;
      }
      
      for (const company of response.companies) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const [partnersResponse, usersResponse] = await Promise.all([
          apiRequest(`/companies/${company.id}/partnerships`),
          apiRequest('/users')
        ]);
        
        const partnersCount = partnersResponse.success ? partnersResponse.partnerships.length : 0;
        const usersCount = usersResponse.success ? 
          usersResponse.users.filter(user => user.company_id === company.id).length : 0;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è)
        const companyIcon = company.name.charAt(0).toUpperCase();
        
        const card = document.createElement('div');
        card.className = 'company-card';
        card.innerHTML = `
          <div class="company-header">
            <div class="company-title">
              <div class="company-icon">${companyIcon}</div>
              <div>
                <h3>${company.name}</h3>
                <span class="company-id">ID: ${company.id}</span>
              </div>
            </div>
            <span class="badge ${company.status === 'active' ? 'badge--success' : 'badge--warning'}">
              ${company.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
            </span>
          </div>
          
          <div class="company-info">
            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${company.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            ${company.contact_info ? `<p><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</strong> ${company.contact_info}</p>` : ''}
          </div>
          
          <div class="company-stats">
            <div class="company-stat">
              <span class="company-stat-value">${usersCount}</span>
              <span class="company-stat-label">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</span>
            </div>
            <div class="company-stat">
              <span class="company-stat-value">${partnersCount}</span>
              <span class="company-stat-label">–ü–∞—Ä—Ç–Ω–µ—Ä—ã</span>
            </div>
          </div>
          
          <div class="company-actions">
            <button class="btn btn--secondary btn--small" onclick="editCompany(${company.id})">
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button class="btn btn--danger btn--small" onclick="deleteCompany(${company.id})">
              –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        `;
        grid.appendChild(card);
      }
    }
  } catch (error) {
    grid.innerHTML = `
      <div class="empty-state">
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π: ${error.message}</p>
      </div>
    `;
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π:', error);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
function setupCreateCompanyModal() {
  const btn = document.getElementById('create-company-btn');
  const modal = document.getElementById('create-company-modal');
  const form = document.getElementById('create-company-form');
  
  btn.onclick = () => showModal('create-company-modal');
  modal.querySelector('.modal-close').onclick = () => hideModal('create-company-modal');
  modal.querySelector('.modal-cancel').onclick = () => hideModal('create-company-modal');
  modal.querySelector('.modal-backdrop').onclick = () => hideModal('create-company-modal');
  
  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const newCompany = {
      name: document.getElementById('new-company-name').value.trim(),
      description: document.getElementById('new-company-description').value.trim(),
      contact_info: document.getElementById('new-company-contact').value.trim()
    };
    
    try {
      const response = await apiRequest('/companies', {
        method: 'POST',
        body: JSON.stringify(newCompany)
      });
      
      if (response.success) {
        await renderCompaniesTable();
        hideModal('create-company-modal');
        form.reset();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.notificationManager) {
          window.notificationManager.show('–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
        } else {
          alert('–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
      
      if (window.notificationManager) {
        window.notificationManager.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message, 'error');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
      }
    }
  };
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
async function deleteCompany(companyId) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é?')) {
    return;
  }
  
  try {
    const response = await apiRequest(`/companies/${companyId}`, {
      method: 'DELETE'
    });
    
    if (response.success) {
      await renderCompaniesTable();
      
      if (window.notificationManager) {
        window.notificationManager.show('–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        alert('–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error);
    
    if (window.notificationManager) {
      window.notificationManager.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message, 'error');
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' + error.message);
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
let partnershipsChanges = new Map();

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
async function renderPartnershipsMatrix() {
  const grid = document.getElementById('partnerships-grid');
  grid.innerHTML = '<div class="empty-state">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤...</div>';
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
    const companiesResponse = await apiRequest('/companies');
    if (!companiesResponse.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏');
    }
    
    const companies = companiesResponse.companies;
    if (companies.length === 0) {
      grid.innerHTML = `
        <div class="empty-state">
          <h3>–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π</h3>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤</p>
        </div>
      `;
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
    const partnershipsResponse = await apiRequest('/companies/admin/partnerships');
    const existingPartnerships = partnershipsResponse.success ? partnershipsResponse.partnerships : [];
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
    buildModernPartnershipsMatrix(companies, existingPartnerships);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupPartnershipsHandlers();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤:', error);
    grid.innerHTML = `
      <div class="empty-state">
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤: ${error.message}</p>
      </div>
    `;
  }
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
function buildPartnershipsMatrix(companies, existingPartnerships) {
  const matrix = document.getElementById('partnerships-matrix');
  const thead = matrix.querySelector('thead tr');
  const tbody = document.getElementById('partnerships-matrix-body');
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–∞—Ç—Ä–∏—Ü—É
  thead.innerHTML = '<th class="matrix-corner">–í–ª–∞–¥–µ–ª—å—Ü—ã ‚Üí <br> ‚Üì –ú–µ–Ω–µ–¥–∂–µ—Ä—ã</th>';
  tbody.innerHTML = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–∫–æ–º–ø–∞–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
  companies.forEach(company => {
    const th = document.createElement('th');
    th.textContent = company.name;
    th.title = `–ö–æ–º–ø–∞–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: ${company.name}`;
    thead.appendChild(th);
  });
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ (–∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
  companies.forEach(managerCompany => {
    const row = document.createElement('tr');
    
    // –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const labelCell = document.createElement('td');
    labelCell.className = 'company-label';
    labelCell.textContent = managerCompany.name;
    labelCell.title = `–ö–æ–º–ø–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${managerCompany.name}`;
    row.appendChild(labelCell);
    
    // –Ø—á–µ–π–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
    companies.forEach(ownerCompany => {
      const cell = document.createElement('td');
      cell.className = 'partnership-cell';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ
      const existingPartnership = existingPartnerships.find(p => 
        p.owner_company_id === ownerCompany.id && 
        p.manager_company_id === managerCompany.id &&
        p.status === 'active'
      );
      
      const toggle = document.createElement('div');
      toggle.className = `partnership-toggle ${existingPartnership ? 'active' : ''}`;
      toggle.dataset.ownerCompany = ownerCompany.id;
      toggle.dataset.managerCompany = managerCompany.id;
      toggle.title = `${existingPartnership ? '–£–±—Ä–∞—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'} –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –º–µ–∂–¥—É ${ownerCompany.name} –∏ ${managerCompany.name}`;
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      toggle.onclick = () => togglePartnership(toggle, ownerCompany, managerCompany);
      
      cell.appendChild(toggle);
      row.appendChild(cell);
    });
    
    tbody.appendChild(row);
  });
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
function buildModernPartnershipsMatrix(companies, existingPartnerships) {
  const grid = document.getElementById('partnerships-grid');
  grid.innerHTML = '';
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–π
  companies.forEach(managerCompany => {
    companies.forEach(ownerCompany => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
      if (managerCompany.id === ownerCompany.id) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ
      const existingPartnership = existingPartnerships.find(p => 
        p.owner_company_id === ownerCompany.id && 
        p.manager_company_id === managerCompany.id &&
        p.status === 'active'
      );
      
      const card = document.createElement('div');
      card.className = 'partnership-card';
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
      const ownerIcon = ownerCompany.name.charAt(0).toUpperCase();
      const managerIcon = managerCompany.name.charAt(0).toUpperCase();
      
      card.innerHTML = `
        <div class="partnership-header">
          <div class="partnership-companies">
            <div class="company-avatar">${ownerIcon}</div>
            <div class="company-info">
              <div class="company-name">${ownerCompany.name}</div>
              <div class="company-role">–í–ª–∞–¥–µ–ª–µ—Ü</div>
            </div>
            <div class="partnership-arrow">‚Üí</div>
            <div class="company-avatar">${managerIcon}</div>
            <div class="company-info">
              <div class="company-name">${managerCompany.name}</div>
              <div class="company-role">–ú–µ–Ω–µ–¥–∂–µ—Ä</div>
            </div>
          </div>
          <button class="partnership-toggle ${existingPartnership ? 'active' : ''}" 
                  data-owner-company="${ownerCompany.id}" 
                  data-manager-company="${managerCompany.id}">
          </button>
        </div>
        <div class="partnership-status">
          ${existingPartnership ? 
            '–ê–∫—Ç–∏–≤–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ - –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞' : 
            '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –¥–æ—Å—Ç—É–ø –∫ –∞—É–∫—Ü–∏–æ–Ω–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'
          }
        </div>
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
      const toggle = card.querySelector('.partnership-toggle');
      toggle.onclick = (e) => {
        e.stopPropagation();
        toggleModernPartnership(toggle, ownerCompany, managerCompany);
      };
      
      grid.appendChild(card);
    });
  });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
function toggleModernPartnership(toggle, ownerCompany, managerCompany) {
  const isActive = toggle.classList.contains('active');
  const partnershipKey = `${ownerCompany.id}-${managerCompany.id}`;
  
  // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
  toggle.classList.toggle('active');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  const statusElement = toggle.closest('.partnership-card').querySelector('.partnership-status');
  statusElement.textContent = toggle.classList.contains('active') ? 
    '–ê–∫—Ç–∏–≤–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ - –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞' : 
    '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –¥–æ—Å—Ç—É–ø –∫ –∞—É–∫—Ü–∏–æ–Ω–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  partnershipsChanges.set(partnershipKey, {
    owner_company_id: ownerCompany.id,
    manager_company_id: managerCompany.id,
    action: isActive ? 'delete' : 'create',
    ownerName: ownerCompany.name,
    managerName: managerCompany.name
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
  updateChangesIndicator();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
function togglePartnership(toggle, ownerCompany, managerCompany) {
  const isActive = toggle.classList.contains('active');
  const partnershipKey = `${ownerCompany.id}-${managerCompany.id}`;
  
  // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
  toggle.classList.toggle('active');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  partnershipsChanges.set(partnershipKey, {
    owner_company_id: ownerCompany.id,
    manager_company_id: managerCompany.id,
    action: isActive ? 'delete' : 'create',
    ownerName: ownerCompany.name,
    managerName: managerCompany.name
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º tooltip
  toggle.title = `${!isActive ? '–£–±—Ä–∞—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'} –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –º–µ–∂–¥—É ${ownerCompany.name} –∏ ${managerCompany.name}`;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
  updateChangesIndicator();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function updateChangesIndicator() {
  const actionsPanel = document.getElementById('partnerships-actions');
  const changesCount = document.getElementById('changes-count');
  const saveBtn = document.getElementById('save-partnerships-btn');
  const resetBtn = document.getElementById('reset-partnerships-btn');
  
  if (partnershipsChanges.size > 0) {
    actionsPanel.style.display = 'flex';
    changesCount.textContent = `${partnershipsChanges.size} –∏–∑–º–µ–Ω–µ–Ω–∏–µ${partnershipsChanges.size > 1 ? '–π' : ''}`;
    saveBtn.disabled = false;
    resetBtn.disabled = false;
  } else {
    actionsPanel.style.display = 'none';
    saveBtn.disabled = true;
    resetBtn.disabled = true;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
function setupPartnershipsHandlers() {
  const saveBtn = document.getElementById('save-partnerships-btn');
  const resetBtn = document.getElementById('reset-partnerships-btn');
  
  saveBtn.onclick = savePartnerships;
  resetBtn.onclick = resetPartnerships;
  
  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
  updateChangesIndicator();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤
async function savePartnerships() {
  if (partnershipsChanges.size === 0) return;
  
  const saveBtn = document.getElementById('save-partnerships-btn');
  const originalText = saveBtn.textContent;
  saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
  saveBtn.disabled = true;
  
  try {
    for (const [key, change] of partnershipsChanges) {
      if (change.action === 'create') {
        await apiRequest('/companies/admin/partnerships', {
          method: 'POST',
          body: JSON.stringify({
            owner_company_id: change.owner_company_id,
            manager_company_id: change.manager_company_id
          })
        });
      } else if (change.action === 'delete') {
        // –ù–∞–π–¥–µ–º ID –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const partnershipsResponse = await apiRequest('/companies/admin/partnerships');
        if (partnershipsResponse.success) {
          const partnership = partnershipsResponse.partnerships.find(p => 
            p.owner_company_id === change.owner_company_id && 
            p.manager_company_id === change.manager_company_id
          );
          
          if (partnership) {
            await apiRequest(`/companies/admin/partnerships/${partnership.id}`, {
              method: 'DELETE'
            });
          }
        }
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    partnershipsChanges.clear();
    updateChangesIndicator();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (window.notificationManager) {
      window.notificationManager.show('–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    } else {
      alert('–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤:', error);
    
    if (window.notificationManager) {
      window.notificationManager.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤: ' + error.message, 'error');
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤: ' + error.message);
    }
  } finally {
    saveBtn.textContent = originalText;
    saveBtn.disabled = false;
  }
}

// –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
function resetPartnerships() {
  if (partnershipsChanges.size === 0) return;
  
  if (!confirm('–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?')) return;
  
  // –û—á–∏—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  partnershipsChanges.clear();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  updateChangesIndicator();
  
  // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
  renderPartnershipsMatrix();
}

// –î–∞—à–±–æ—Ä–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞
async function initOwnerDashboard() {
  await renderEquipmentGrid();
  await renderOwnerOrders();
  setupAddEquipmentModal();
  setupOwnerTabs();
  setupRespondOrderModal();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  realTimeUpdater.start('owner-dashboard');
}

function setupOwnerTabs() {
  document.querySelectorAll('#owner-dashboard .sidebar-nav-item[data-tab]').forEach(item => {
    item.onclick = () => {
      const tab = item.dataset.tab;
      showTab(tab + '-tab');
      if (tab === 'orders') {
        renderOwnerOrders();
      }
    };
  });
}

async function renderEquipmentGrid() {
  const grid = document.getElementById('equipment-grid');
  grid.innerHTML = '<div class="empty-state"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';
  
  try {
    const response = await apiRequest('/equipment');
    if (response.success) {
      const userEquipment = response.equipment;
  
  if (userEquipment.length === 0) {
    grid.innerHTML = `
      <div class="empty-state">
        <h3>–¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞</h3>
        <p>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ—Ö–Ω–∏–∫—É</p>
      </div>
    `;
    return;
  }
  
  grid.innerHTML = '';
  userEquipment.forEach(equipment => {
    const card = document.createElement('div');
    card.className = 'equipment-card';
    card.innerHTML = `
      <h3>${equipment.name}</h3>
      <div class="equipment-info">
        <p><strong>–¢–∏–ø:</strong> ${equipment.type}</p>
        <p><strong>–ü–æ–¥—Ç–∏–ø:</strong> ${equipment.subtype}</p>
            <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> ${equipment.owner_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${equipment.phone}</p>
            ${equipment.location ? `<p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${equipment.location}</p>` : ''}
      </div>
      <div class="equipment-badges">
        <span class="badge badge--${equipment.status === 'available' ? 'available' : 'busy'}">
              ${equipment.status === 'available' ? '–î–æ—Å—Ç—É–ø–Ω–∞' : equipment.status === 'busy' ? '–ó–∞–Ω—è—Ç–∞' : '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'}
        </span>
            ${equipment.is_off_road ? '<span class="badge badge--offroad">–í–µ–∑–¥–µ—Ö–æ–¥</span>' : ''}
      </div>
      <div class="equipment-actions">
        <button class="btn btn--secondary btn--sm" onclick="editEquipment(${equipment.id})">
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>
        <button class="btn btn--danger btn--sm" onclick="deleteEquipment(${equipment.id})">
          –£–¥–∞–ª–∏—Ç—å
        </button>
      </div>
    `;
    grid.appendChild(card);
  });
    }
  } catch (error) {
    grid.innerHTML = `<div class="empty-state"><h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3><p>${error.message}</p></div>`;
  }
}

async function renderOwnerOrders() {
  const grid = document.getElementById('owner-orders-grid');
  grid.innerHTML = '<div class="empty-state"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';
  
  try {
    const response = await apiRequest('/requests');
    if (response.success) {
      const relevantOrders = response.requests;
  
  if (relevantOrders.length === 0) {
    grid.innerHTML = `
      <div class="empty-state">
        <h3>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫</h3>
        <p>–ó–∞—è–≤–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É, –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
      </div>
    `;
    return;
  }
  
  grid.innerHTML = '';
  relevantOrders.forEach(order => {
    const card = document.createElement('div');
    card.className = 'order-card';
        
    const deadline = order.auction_deadline;
    const timerId = `owner-timer-${order.id}`;
    const timeLeft = deadline ? Math.max(0, new Date(deadline) - new Date()) : 0;
    
    card.innerHTML = `
      <h3>–ó–∞—è–≤–∫–∞ –Ω–∞ ${order.equipment_type}</h3>
      <div class="order-info">
        <p><strong>–ü–æ–¥—Ç–∏–ø:</strong> ${order.equipment_subtype}</p>
        <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDate(order.start_date)} - ${formatDate(order.end_date)}</p>
        <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${order.location}</p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${order.work_description}</p>
        <p><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> ${order.manager_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
        ${deadline ? `<p><strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> <span id="${timerId}" class="auction-timer">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>` : ''}
      </div>
      <div class="order-badges">
        <span class="badge badge--${order.has_bid ? 'available' : 'pending'}">
          ${order.has_bid ? '–°—Ç–∞–≤–∫–∞ –ø–æ–¥–∞–Ω–∞' : '–ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É'}
        </span>
      </div>
      <div class="order-actions">
        ${!order.has_bid && timeLeft > 0 ? `
        <button class="btn btn--primary btn--sm" onclick="respondToOrder(${order.id})">
            –ü–æ–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É
        </button>
        ` : ''}
        ${order.has_bid ? '<p style="color: var(--muted-foreground); font-size: 12px;">–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é</p>' : ''}
        ${timeLeft <= 0 ? '<p style="color: var(--destructive); font-size: 12px;">–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ</p>' : ''}
      </div>
    `;
    grid.appendChild(card);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    if (deadline) {
      const status = auctionTimer.getAuctionStatus(deadline);
      auctionTimer.createTimer(timerId, deadline, {
        prefix: '‚è∞',
        activeClass: `auction-timer ${status.class}`,
        urgentClass: 'auction-timer urgent',
        expiredClass: 'auction-timer expired',
        expiredText: '‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ'
        // –£–±–∏—Ä–∞–µ–º onExpired —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
      });
    }
  });
    }
  } catch (error) {
    grid.innerHTML = `<div class="empty-state"><h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3><p>${error.message}</p></div>`;
  }
}

function setupRespondOrderModal() {
  const modal = document.getElementById('respond-order-modal');
  const form = document.getElementById('respond-order-form');
  
  modal.querySelector('.modal-close').onclick = () => hideModal('respond-order-modal');
  modal.querySelector('.modal-backdrop').onclick = () => hideModal('respond-order-modal');
  modal.querySelector('.modal-cancel').onclick = () => hideModal('respond-order-modal');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const hourlyRateInput = document.getElementById('bid-hourly-rate');
  const dailyRateInput = document.getElementById('bid-daily-rate');
  const totalPriceInput = document.getElementById('bid-total-price');
  
  const calculateTotal = () => {
    const hourlyRate = parseFloat(hourlyRateInput.value) || 0;
    const dailyRate = parseFloat(dailyRateInput.value) || 0;
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç: –±–µ—Ä–µ–º –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ—á–∞—Å–æ–≤–æ–π –∏ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    if (dailyRate > 0) {
      totalPriceInput.value = dailyRate;
    } else if (hourlyRate > 0) {
      totalPriceInput.value = hourlyRate * 8; // 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  hourlyRateInput.oninput = calculateTotal;
  dailyRateInput.oninput = calculateTotal;
  
  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const orderId = parseInt(modal.dataset.orderId);
    const equipmentId = document.getElementById('bid-equipment').value;
    const hourlyRate = parseFloat(document.getElementById('bid-hourly-rate').value);
    const dailyRate = parseFloat(document.getElementById('bid-daily-rate').value);
    const totalPrice = parseFloat(document.getElementById('bid-total-price').value);
    const comment = document.getElementById('bid-comment').value;
    
    if (!equipmentId) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É');
      return;
    }
    
    const bidData = {
      request_id: orderId,
      equipment_id: parseInt(equipmentId),
      hourly_rate: hourlyRate,
      daily_rate: dailyRate,
      total_price: totalPrice,
      comment: comment || null
    };
    
    try {
      await apiRequest('/bids', {
        method: 'POST',
        body: JSON.stringify(bidData)
      });
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—á–µ —Å—Ç–∞–≤–∫–∏
      if (window.notificationCenter) {
        window.notificationCenter.addNotification({
          title: 'üí∞ –°—Ç–∞–≤–∫–∞ –ø–æ–¥–∞–Ω–∞',
          message: `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É #${orderId} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice.toLocaleString()} ‚ÇΩ`,
          type: 'auction',
          auctionId: orderId,
          requestId: orderId
        });
      }
      
      if (window.notifications) {
        window.notifications.success('–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        alert('–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      }
      
      await renderOwnerOrders();
      hideModal('respond-order-modal');
      form.reset();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ —Å—Ç–∞–≤–∫–∏: ' + error.message);
    }
  };
}

function setupAddEquipmentModal() {
  const addBtn = document.getElementById('add-equipment-btn');
  const modal = document.getElementById('add-equipment-modal');
  const form = document.getElementById('add-equipment-form');
  const typeSelect = document.getElementById('equipment-type');
  const subtypeSelect = document.getElementById('equipment-subtype');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏
  function populateEquipmentTypes() {
    typeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
  Object.keys(appData.equipmentTypes).forEach(type => {
    const option = document.createElement('option');
    option.value = type;
    option.textContent = type;
    typeSelect.appendChild(option);
  });
  }
  
  // –ó–∞–≤–∏—Å–∏–º—ã–µ —Å–ø–∏—Å–∫–∏
  typeSelect.onchange = () => {
    const selectedType = typeSelect.value;
    subtypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø</option>';
    
    if (selectedType && appData.equipmentTypes[selectedType]) {
      subtypeSelect.disabled = false;
      const subtypes = appData.equipmentTypes[selectedType];
      
      if (Array.isArray(subtypes)) {
        subtypes.forEach(subtypeData => {
        const option = document.createElement('option');
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏, –±–µ—Ä–µ–º subtype, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
          const subtypeValue = typeof subtypeData === 'object' ? subtypeData.subtype : subtypeData;
          option.value = subtypeValue;
          option.textContent = subtypeValue;
        subtypeSelect.appendChild(option);
      });
      }
    } else {
      subtypeSelect.disabled = true;
    }
  };
  
  addBtn.onclick = () => {
    populateEquipmentTypes(); // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
    document.getElementById('equipment-owner').value = appData.currentUser.name;
    document.getElementById('equipment-phone').value = appData.currentUser.phone || '';
    showModal('add-equipment-modal');
  };
  
  modal.querySelector('.modal-close').onclick = () => hideModal('add-equipment-modal');
  modal.querySelector('.modal-cancel').onclick = () => hideModal('add-equipment-modal');
  modal.querySelector('.modal-backdrop').onclick = () => hideModal('add-equipment-modal');
  
  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const newEquipment = {
      name: document.getElementById('equipment-name').value,
      phone: document.getElementById('equipment-phone').value,
      telegram_id: document.getElementById('equipment-telegram').value || null,
      license_plate: document.getElementById('equipment-plate').value || null,
      type: document.getElementById('equipment-type').value,
      subtype: document.getElementById('equipment-subtype').value,
      is_off_road: document.getElementById('equipment-offroad').checked,
      additional_equipment: document.getElementById('equipment-additional').value || null,
      description: document.getElementById('equipment-description').value || null,
      location: '–ú–æ—Å–∫–≤–∞' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º—É
    };
    
    try {
      await apiRequest('/equipment', {
        method: 'POST',
        body: JSON.stringify(newEquipment)
      });
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏
      if (window.notificationCenter) {
        window.notificationCenter.addNotification({
          title: 'üöú –¢–µ—Ö–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
          message: `–¢–µ—Ö–Ω–∏–∫–∞ "${newEquipment.name}" (${newEquipment.type} - ${newEquipment.subtype}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø–∞—Ä–∫`,
          type: 'system'
        });
      }
      
      if (window.notifications) {
        window.notifications.success('–¢–µ—Ö–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        alert('–¢–µ—Ö–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
      
      await renderEquipmentGrid();
      hideModal('add-equipment-modal');
      form.reset();
      
      subtypeSelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
      subtypeSelect.disabled = true;
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏: ' + error.message);
    }
  };
}

// –î–∞—à–±–æ—Ä–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async function initManagerDashboard() {
  await setupCreateOrderForm(); // –î–µ–ª–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏
  await renderManagerOrders();
  setupManagerTabs();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  realTimeUpdater.start('manager-dashboard');
}

function setupManagerTabs() {
  document.querySelectorAll('#manager-dashboard .sidebar-nav-item[data-tab]').forEach(item => {
    item.onclick = () => {
      const tab = item.dataset.tab;
      showTab(tab + '-tab');
      if (tab === 'my-orders') {
        renderManagerOrders();
      }
    };
  });
}

async function setupCreateOrderForm() {
  const form = document.getElementById('create-order-form');
  const typeSelect = document.getElementById('order-type');
  const subtypeSelect = document.getElementById('order-subtype');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏
  async function populateOrderTypes() {
    typeSelect.innerHTML = '<option value="">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏...</option>';
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const typesResponse = await apiRequest('/equipment/types');
      
      if (typesResponse.success && typesResponse.types.length > 0) {
        typeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏</option>';
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏
        const groupedTypes = {};
        typesResponse.types.forEach(typeData => {
          if (!groupedTypes[typeData.type]) {
            groupedTypes[typeData.type] = [];
          }
          groupedTypes[typeData.type].push(typeData);
        });
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç
        Object.keys(groupedTypes).forEach(type => {
          const option = document.createElement('option');
          option.value = type;
          option.textContent = `${type} (–¥–æ—Å—Ç—É–ø–Ω–æ ${groupedTypes[type].length} –ø–æ–¥—Ç–∏–ø–æ–≤)`;
          typeSelect.appendChild(option);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ appData –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–ø–∏—Å–∫–æ–≤
        appData.equipmentTypes = groupedTypes;
      } else {
        typeSelect.innerHTML = '<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π</option>';
        typeSelect.disabled = true;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏:', error);
      typeSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
    }
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
  await populateOrderTypes();
  
  // –ó–∞–≤–∏—Å–∏–º—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫
  typeSelect.onchange = () => {
    const selectedType = typeSelect.value;
    subtypeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø</option>';
    
    if (selectedType && appData.equipmentTypes[selectedType]) {
      subtypeSelect.disabled = false;
      const subtypes = appData.equipmentTypes[selectedType];
      
      if (Array.isArray(subtypes)) {
        subtypes.forEach(subtypeData => {
          const option = document.createElement('option');
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ type, subtype, count
          const subtypeValue = subtypeData.subtype;
          const count = subtypeData.count || 0;
          option.value = subtypeValue;
          option.textContent = `${subtypeValue} (${count} –µ–¥.)`;
          subtypeSelect.appendChild(option);
        });
      }
    } else {
      subtypeSelect.disabled = true;
    }
  };
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  const startDateInput = document.getElementById('order-start-date');
  const endDateInput = document.getElementById('order-end-date');
  
  startDateInput.min = tomorrow.toISOString().split('T')[0];
  endDateInput.min = tomorrow.toISOString().split('T')[0];
  
  startDateInput.onchange = () => {
    endDateInput.min = startDateInput.value;
    if (endDateInput.value && endDateInput.value < startDateInput.value) {
      endDateInput.value = startDateInput.value;
    }
  };
  
  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const newOrder = {
      equipment_type: document.getElementById('order-type').value,
      equipment_subtype: document.getElementById('order-subtype').value,
      start_date: document.getElementById('order-start-date').value,
      end_date: document.getElementById('order-end-date').value,
      location: document.getElementById('order-location').value,
      work_description: document.getElementById('order-description').value
    };
    
    try {
      const response = await apiRequest('/requests', {
        method: 'POST',
        body: JSON.stringify(newOrder)
      });
      
    form.reset();
    
    subtypeSelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>';
    subtypeSelect.disabled = true;
    
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
      if (window.notificationCenter) {
        window.notificationCenter.addNotification({
          title: '‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',
          message: `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${newOrder.equipment_type} - ${newOrder.equipment_subtype} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ ${response.available_owners} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ç–µ—Ö–Ω–∏–∫–∏.`,
          type: 'request',
          requestId: response.request_id
        });
      }
      
      if (window.notifications) {
        window.notifications.success(`–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ ${response.available_owners} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ç–µ—Ö–Ω–∏–∫–∏.`);
      } else {
        alert(`–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞–ª—Å—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ ${response.available_owners} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ç–µ—Ö–Ω–∏–∫–∏.`);
      }
      
      showTab('my-orders-tab');
      await renderManagerOrders();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ' + error.message);
    }
  };
}

async function renderManagerOrders() {
  const grid = document.getElementById('manager-orders-grid');
  grid.innerHTML = '<div class="empty-state"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';
  
  try {
    const response = await apiRequest('/requests');
    if (response.success) {
      const userOrders = response.requests;
  
  if (userOrders.length === 0) {
    grid.innerHTML = `
      <div class="empty-state">
        <h3>–ó–∞—è–≤–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</h3>
        <p>–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É, –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã —Å–º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–µ—ë</p>
      </div>
    `;
    return;
  }
  
  grid.innerHTML = '';
  userOrders.forEach(order => {
    const card = document.createElement('div');
    card.className = 'order-card';
    
        let statusText = '';
        let statusClass = '';
        let bidsInfo = null; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–Ω–µ switch
        
        switch (order.status) {
          case 'auction_active':
            const bidsCount = order.bids_count || 0;
            bidsInfo = formatBidsCount(bidsCount);
            statusText = `–ê—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω`;
            statusClass = 'pending';
            break;
          case 'auction_closed':
            statusText = '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω';
            statusClass = 'available';
            break;
          case 'completed':
            statusText = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
            statusClass = 'busy';
            break;
          case 'cancelled':
            statusText = '–û—Ç–º–µ–Ω–µ–Ω–∞';
            statusClass = 'busy';
            break;
          default:
            statusText = '–û–∂–∏–¥–∞–µ—Ç';
            statusClass = 'pending';
        }
        
        const deadline = order.auction_deadline;
        const timerId = `manager-timer-${order.id}`;
        
                let winnerInfo = '';
        if (order.status === 'auction_closed' && order.winning_owner_name) {
          winnerInfo = `
            <div class="winner-card">
              <div class="winner-header">
                <span class="winner-icon">üèÜ</span>
                <h4>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∞—É–∫—Ü–∏–æ–Ω–∞</h4>
              </div>
              <div class="winner-details">
                <div class="winner-contact">
                  <p><strong>üë§ ${order.winning_owner_name}</strong></p>
                  <p>üìû <a href="tel:${order.winning_owner_phone}">${order.winning_owner_phone}</a></p>
                </div>
                <div class="winner-price">
                  <span class="price-label">–¶–µ–Ω–∞:</span>
                  <span class="price-value">${order.winning_price ? order.winning_price.toLocaleString() + ' ‚ÇΩ' : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                </div>
              </div>
            </div>
          `;
        } else if (order.status === 'auction_closed') {
          winnerInfo = `
            <div class="no-winner-card">
              <p>‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</p>
            </div>
          `;
        }
    
    card.innerHTML = `
      <h3>${order.equipment_type} - ${order.equipment_subtype}</h3>
      <div class="order-info">
        <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDate(order.start_date)} - ${formatDate(order.end_date)}</p>
        <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${order.location}</p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${order.work_description}</p>
        <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${formatDate(order.created_at)}</p>
        ${deadline && order.status === 'auction_active' ? 
          `<p><strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> <span id="${timerId}" class="auction-timer">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>` : 
          deadline ? `<p><strong>–ó–∞–≤–µ—Ä—à–µ–Ω:</strong> ${new Date(deadline).toLocaleString()}</p>` : ''
        }
      </div>
      <div class="order-badges">
        <span class="badge badge--${statusClass}">
          ${statusText}
        </span>
        ${order.status === 'auction_active' && bidsInfo ? 
          `<span class="badge badge--info bids-counter ${bidsInfo.class}">
            ${bidsInfo.icon} ${bidsInfo.text}
          </span>` : ''
        }
      </div>
      ${winnerInfo}
    `;
    grid.appendChild(card);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    if (deadline && order.status === 'auction_active') {
      const status = auctionTimer.getAuctionStatus(deadline);
              auctionTimer.createTimer(timerId, deadline, {
          prefix: '‚è∞',
          activeClass: `auction-timer ${status.class}`,
          urgentClass: 'auction-timer urgent',
          expiredClass: 'auction-timer expired',
          expiredText: '‚è±Ô∏è –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω'
          // –£–±–∏—Ä–∞–µ–º onExpired —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
          // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
        });
    }
  });
    }
  } catch (error) {
    grid.innerHTML = `<div class="empty-state"><h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3><p>${error.message}</p></div>`;
  }
}

// ‚è∞ –°–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
class AuctionTimer {
  constructor() {
    this.timers = new Map(); // id_—ç–ª–µ–º–µ–Ω—Ç–∞ -> interval
    this.activeAuctions = new Map(); // id_–∞—É–∫—Ü–∏–æ–Ω–∞ -> deadline
  }

  // –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
  createTimer(elementId, deadline, options = {}) {
    const element = document.getElementById(elementId);
    if (!element) return;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    this.stopTimer(elementId);

    const deadlineTime = new Date(deadline).getTime();
    
    const updateTimer = () => {
      const now = new Date().getTime();
      const timeLeft = deadlineTime - now;

      if (timeLeft <= 0) {
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        element.innerHTML = options.expiredText || '‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
        element.className = options.expiredClass || 'timer-expired';
        this.stopTimer(elementId);
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        if (options.onExpired) {
          options.onExpired();
        }
        return;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
      const timeString = this.formatTimeLeft(timeLeft);
      element.innerHTML = `${options.prefix || '‚è∞'} ${timeString}`;
      element.className = options.activeClass || 'timer-active';
      
      // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ü–∞
      if (timeLeft <= 3600000) { // –ú–µ–Ω—å—à–µ —á–∞—Å–∞
        element.className = options.urgentClass || 'timer-urgent';
      }
    };

    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updateTimer();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const interval = setInterval(updateTimer, 1000);
    this.timers.set(elementId, interval);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
  stopTimer(elementId) {
    const interval = this.timers.get(elementId);
    if (interval) {
      clearInterval(interval);
      this.timers.delete(elementId);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
  stopAllTimers() {
    this.timers.forEach((interval, elementId) => {
      clearInterval(interval);
    });
    this.timers.clear();
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
  formatTimeLeft(timeLeft) {
    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

    if (days > 0) {
      return `${days}–¥ ${hours}—á ${minutes}–º`;
    } else if (hours > 0) {
      return `${hours}—á ${minutes}–º ${seconds}—Å`;
    } else if (minutes > 0) {
      return `${minutes}–º ${seconds}—Å`;
    } else {
      return `${seconds}—Å`;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞
  getAuctionStatus(deadline) {
    const deadlineTime = new Date(deadline).getTime();
    const now = new Date().getTime();
    const timeLeft = deadlineTime - now;

    if (timeLeft <= 0) {
      return { status: 'expired', class: 'timer-expired', text: '–ò—Å—Ç–µ–∫' };
    } else if (timeLeft <= 3600000) { // –ú–µ–Ω—å—à–µ —á–∞—Å–∞
      return { status: 'urgent', class: 'timer-urgent', text: '–°—Ä–æ—á–Ω–æ' };
    } else if (timeLeft <= 21600000) { // –ú–µ–Ω—å—à–µ 6 —á–∞—Å–æ–≤
      return { status: 'warning', class: 'timer-warning', text: '–°–∫–æ—Ä–æ' };
    } else {
      return { status: 'active', class: 'timer-active', text: '–ê–∫—Ç–∏–≤–µ–Ω' };
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∞–π–º–µ—Ä–∞
const auctionTimer = new AuctionTimer();

// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
class RealTimeUpdater {
  constructor() {
    this.intervals = new Map();
    this.isActive = false;
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  start(pageName) {
    this.stop(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.isActive = true;

    switch (pageName) {
      case 'owner-dashboard':
        this.startOwnerUpdates();
        break;
      case 'manager-dashboard':
        this.startManagerUpdates();
        break;
      case 'admin-dashboard':
        this.startAdminUpdates();
        break;
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  stop() {
    this.intervals.forEach(interval => clearInterval(interval));
    this.intervals.clear();
    this.isActive = false;
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
  startOwnerUpdates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ
    const ordersInterval = setInterval(async () => {
      if (this.isActive && document.getElementById('owner-orders-tab')?.classList.contains('active')) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        await this.updateOwnerOrdersWithNotifications();
      }
    }, 30000);
    this.intervals.set('owner-orders', ordersInterval);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    const equipmentInterval = setInterval(() => {
      if (this.isActive && document.getElementById('equipment-tab')?.classList.contains('active')) {
        renderEquipmentGrid();
      }
    }, 60000);
    this.intervals.set('owner-equipment', equipmentInterval);
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  startManagerUpdates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã
    const ordersInterval = setInterval(async () => {
      if (this.isActive && document.getElementById('my-orders-tab')?.classList.contains('active')) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        await this.updateManagerOrdersWithNotifications();
      }
    }, 30000); // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 15 –¥–æ 30 —Å–µ–∫—É–Ω–¥
    this.intervals.set('manager-orders', ordersInterval);
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  startAdminUpdates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    const usersInterval = setInterval(() => {
      if (this.isActive && document.getElementById('users-tab')?.classList.contains('active')) {
        renderUsersTable();
      }
    }, 60000);
    this.intervals.set('admin-users', usersInterval);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
  async checkForNewOwnerOrders() {
    if (!this.lastOrderCheck) {
      this.lastOrderCheck = new Date();
      return;
    }

    try {
      const response = await apiRequest('/requests');
      if (response.success) {
        const newOrders = response.requests.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate > this.lastOrderCheck;
        });

        newOrders.forEach(order => {
          if (window.notificationCenter) {
            window.notificationCenter.addNotification({
              title: 'üöú –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!',
              message: `–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${order.equipment_type} - ${order.equipment_subtype}. –ü–µ—Ä–∏–æ–¥: ${formatDate(order.start_date)} - ${formatDate(order.end_date)}`,
              type: 'request',
              requestId: order.id
            });
          }
        });

        this.lastOrderCheck = new Date();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  async checkForCompletedAuctions() {
    if (!this.lastAuctionCheck) {
      this.lastAuctionCheck = new Date();
      return;
    }

    try {
      const response = await apiRequest('/requests');
      if (response.success) {
        const completedAuctions = response.requests.filter(order => {
          return order.status === 'auction_closed' && 
                 order.winning_owner_name &&
                 new Date(order.auction_deadline) > this.lastAuctionCheck;
        });

        completedAuctions.forEach(order => {
          if (window.notificationCenter) {
            window.notificationCenter.addNotification({
              title: 'üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!',
              message: `–ó–∞—è–≤–∫–∞ "${order.equipment_type} - ${order.equipment_subtype}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${order.winning_owner_name}. –¶–µ–Ω–∞: ${order.winning_price?.toLocaleString() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ`,
              type: 'auction',
              auctionId: order.id,
              requestId: order.id
            });
          }
        });

        this.lastAuctionCheck = new Date();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
    }
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö
  async updateManagerOrdersWithNotifications() {
    if (!this.lastAuctionCheck) {
      this.lastAuctionCheck = new Date();
    }

    try {
      const response = await apiRequest('/requests');
      if (response.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const completedAuctions = response.requests.filter(order => {
          return order.status === 'auction_closed' && 
                 order.winning_owner_name &&
                 new Date(order.auction_deadline) > this.lastAuctionCheck;
        });

        completedAuctions.forEach(order => {
          if (window.notificationCenter) {
            window.notificationCenter.addNotification({
              title: 'üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!',
              message: `–ó–∞—è–≤–∫–∞ "${order.equipment_type} - ${order.equipment_subtype}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${order.winning_owner_name}. –¶–µ–Ω–∞: ${order.winning_price?.toLocaleString() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ`,
              type: 'auction',
              auctionId: order.id,
              requestId: order.id
            });
          }
        });

        this.lastAuctionCheck = new Date();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞—è–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        this.renderManagerOrdersFromData(response.requests);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
    }
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö
  async updateOwnerOrdersWithNotifications() {
    if (!this.lastOrderCheck) {
      this.lastOrderCheck = new Date();
    }

    try {
      const response = await apiRequest('/requests');
      if (response.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const newOrders = response.requests.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate > this.lastOrderCheck;
        });

        newOrders.forEach(order => {
          if (window.notificationCenter) {
            window.notificationCenter.addNotification({
              title: 'üöú –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!',
              message: `–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ${order.equipment_type} - ${order.equipment_subtype}. –ü–µ—Ä–∏–æ–¥: ${formatDate(order.start_date)} - ${formatDate(order.end_date)}`,
              type: 'request',
              requestId: order.id
            });
          }
        });

        this.lastOrderCheck = new Date();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞—è–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        this.renderOwnerOrdersFromData(response.requests);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', error);
    }
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞—è–≤–æ–∫ –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  renderManagerOrdersFromData(userOrders) {
    const grid = document.getElementById('manager-orders-grid');
    if (!grid) return;

    if (userOrders.length === 0) {
      grid.innerHTML = `
        <div class="empty-state">
          <h3>–ó–∞—è–≤–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</h3>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É, –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã —Å–º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–µ—ë</p>
        </div>
      `;
      return;
    }

    grid.innerHTML = '';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–∑ renderManagerOrders
    // –Ω–æ –±–µ–∑ –Ω–æ–≤–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
    userOrders.forEach(order => {
      // –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ renderManagerOrders (—Å—Ç—Ä–æ–∫–∏ 1629-1732)
      const card = document.createElement('div');
      card.className = 'order-card';
      
      let statusText = '';
      let statusClass = '';
      let bidsInfo = null;
      
      switch (order.status) {
        case 'auction_active':
          const bidsCount = order.bids_count || 0;
          bidsInfo = formatBidsCount(bidsCount);
          statusText = `–ê—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω`;
          statusClass = 'pending';
          break;
        case 'auction_closed':
          statusText = '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω';
          statusClass = 'available';
          break;
        case 'completed':
          statusText = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
          statusClass = 'busy';
          break;
        case 'cancelled':
          statusText = '–û—Ç–º–µ–Ω–µ–Ω–∞';
          statusClass = 'busy';
          break;
        default:
          statusText = '–û–∂–∏–¥–∞–µ—Ç';
          statusClass = 'pending';
      }
      
      const deadline = order.auction_deadline;
      const timerId = `manager-timer-${order.id}`;
      
      let winnerInfo = '';
      if (order.status === 'auction_closed' && order.winning_owner_name) {
        winnerInfo = `
          <div class="winner-card">
            <div class="winner-header">
              <span class="winner-icon">üèÜ</span>
              <h4>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∞—É–∫—Ü–∏–æ–Ω–∞</h4>
            </div>
            <div class="winner-details">
              <div class="winner-contact">
                <p><strong>üë§ ${order.winning_owner_name}</strong></p>
                <p>üìû <a href="tel:${order.winning_owner_phone}">${order.winning_owner_phone}</a></p>
              </div>
              <div class="winner-price">
                <span class="price-label">–¶–µ–Ω–∞:</span>
                <span class="price-value">${order.winning_price ? order.winning_price.toLocaleString() + ' ‚ÇΩ' : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
              </div>
            </div>
          </div>
        `;
      } else if (order.status === 'auction_closed') {
        winnerInfo = `
          <div class="no-winner-card">
            <p>‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</p>
          </div>
        `;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
      if (order.status === 'auction_closed') {
        card.classList.add('clickable');
        card.style.cursor = 'pointer';
        card.onclick = () => showAuctionResults(order.id);
      }

      card.innerHTML = `
        <h3>${order.equipment_type} - ${order.equipment_subtype}</h3>
        <div class="order-info">
          <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDate(order.start_date)} - ${formatDate(order.end_date)}</p>
          <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${order.location}</p>
          <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${order.work_description}</p>
          <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${formatDate(order.created_at)}</p>
          ${deadline && order.status === 'auction_active' ? 
            `<p><strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> <span id="${timerId}" class="auction-timer">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>` : 
            deadline ? `<p><strong>–ó–∞–≤–µ—Ä—à–µ–Ω:</strong> ${new Date(deadline).toLocaleString()}</p>` : ''
          }
        </div>
        <div class="order-badges">
          <span class="badge badge--${statusClass}">
            ${statusText}
          </span>
          ${order.status === 'auction_active' && bidsInfo ? 
            `<span class="badge badge--info bids-counter ${bidsInfo.class}">
              ${bidsInfo.icon} ${bidsInfo.text}
            </span>` : ''
          }
          ${order.status === 'auction_closed' ? 
            `<span class="badge badge--secondary clickable-hint">
              üëÅÔ∏è –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </span>` : ''
          }
        </div>
        
        
        ${winnerInfo}
      `;
      grid.appendChild(card);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ 
      if (deadline && order.status === 'auction_active') {
        const status = auctionTimer.getAuctionStatus(deadline);
        
        // –ï—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω —É–∂–µ –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É
        if (status.expired) {
          this.handleExpiredAuction(card, order.id);
        } else {
          auctionTimer.createTimer(timerId, deadline, {
            prefix: '‚è∞',
            activeClass: `auction-timer ${status.class}`,
            urgentClass: 'auction-timer urgent',
            expiredClass: 'auction-timer expired',
            expiredText: '‚è±Ô∏è –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω',
            onExpired: () => {
              this.handleExpiredAuction(card, order.id);
            }
          });
        }
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
  handleExpiredAuction(card, orderId) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      const statusBadge = card.querySelector('.badge--pending');
      if (statusBadge) {
        statusBadge.textContent = '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω';
        statusBadge.className = 'badge badge--available';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
      card.classList.add('clickable');
      card.style.cursor = 'pointer';
      card.onclick = () => showAuctionResults(orderId);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
      const badgesContainer = card.querySelector('.order-badges');
      if (badgesContainer && !badgesContainer.querySelector('.clickable-hint')) {
        const hintBadge = document.createElement('span');
        hintBadge.className = 'badge badge--secondary clickable-hint';
        hintBadge.innerHTML = 'üëÅÔ∏è –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
        badgesContainer.appendChild(hintBadge);
      }

      console.log(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω #${orderId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞:', error);
    }
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞—è–≤–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  renderOwnerOrdersFromData(relevantOrders) {
    const grid = document.getElementById('owner-orders-grid');
    if (!grid) return;

    if (relevantOrders.length === 0) {
      grid.innerHTML = `
        <div class="empty-state">
          <h3>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫</h3>
          <p>–ó–∞—è–≤–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É, –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
        </div>
      `;
      return;
    }

    grid.innerHTML = '';
    relevantOrders.forEach(order => {
      const card = document.createElement('div');
      card.className = 'order-card';
          
      const deadline = order.auction_deadline;
      const timerId = `owner-timer-${order.id}`;
      const timeLeft = deadline ? Math.max(0, new Date(deadline) - new Date()) : 0;
      
      card.innerHTML = `
        <h3>–ó–∞—è–≤–∫–∞ –Ω–∞ ${order.equipment_type}</h3>
        <div class="order-info">
          <p><strong>–ü–æ–¥—Ç–∏–ø:</strong> ${order.equipment_subtype}</p>
          <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDate(order.start_date)} - ${formatDate(order.end_date)}</p>
          <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${order.location}</p>
          <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${order.work_description}</p>
          <p><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> ${order.manager_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
          ${deadline ? `<p><strong>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> <span id="${timerId}" class="auction-timer">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>` : ''}
        </div>
        <div class="order-badges">
          <span class="badge badge--${order.has_bid ? 'available' : 'pending'}">
            ${order.has_bid ? '–°—Ç–∞–≤–∫–∞ –ø–æ–¥–∞–Ω–∞' : '–ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É'}
          </span>
        </div>
        <div class="order-actions">
          ${!order.has_bid && timeLeft > 0 ? `
          <button class="btn btn--primary btn--sm" onclick="respondToOrder(${order.id})">
              –ü–æ–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É
          </button>
          ` : ''}
          ${order.has_bid ? '<p style="color: var(--muted-foreground); font-size: 12px;">–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é</p>' : ''}
        </div>
      `;

      grid.appendChild(card);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (deadline && timeLeft > 0) {
        auctionTimer.createTimer(timerId, deadline, {
          activeClass: 'timer-active',
          urgentClass: 'timer-urgent',
          expiredText: '‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ'
          // –£–±–∏—Ä–∞–µ–º onExpired —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        });
      }
    });
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const realTimeUpdater = new RealTimeUpdater();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
function formatDate(date) {
  if (!date) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  return new Date(date).toLocaleDateString('ru-RU');
}

// –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—Å—Ç–∞–≤–∫–∞"
function getBidsWord(count) {
  if (count % 10 === 1 && count % 100 !== 11) {
    return '—Å—Ç–∞–≤–∫–∞';
  } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
    return '—Å—Ç–∞–≤–∫–∏';
  } else {
    return '—Å—Ç–∞–≤–æ–∫';
  }
}

// –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–≤–æ–∫
function formatBidsCount(count) {
  if (count === 0) {
    return { text: '–°—Ç–∞–≤–æ–∫ –Ω–µ—Ç', class: 'no-bids', icon: 'üì≠' };
  } else if (count === 1) {
    return { text: '1 —Å—Ç–∞–≤–∫–∞', class: 'few-bids', icon: 'üìÆ' };
  } else if (count < 5) {
    return { text: `${count} ${getBidsWord(count)}`, class: 'some-bids', icon: 'üì¨' };
  } else {
    return { text: `${count} ${getBidsWord(count)}`, class: 'many-bids', icon: 'üì´' };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function initializeNotifications() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
  const testNotificationBtns = [
    'admin-test-notification-btn',
    'owner-test-notification-btn', 
    'manager-test-notification-btn'
  ];
  
  testNotificationBtns.forEach(btnId => {
    const btn = document.getElementById(btnId);
    if (btn) {
      btn.addEventListener('click', async () => {
        try {
        const response = await apiRequest('/notifications/test', {
          method: 'POST'
        });

        if (response.success && window.notificationManager) {
          window.notificationManager.show('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          if (window.notificationCenter) {
            setTimeout(() => {
              window.notificationCenter.loadNotifications();
            }, 1000);
          }
        }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
          if (window.notificationManager) {
            window.notificationManager.show('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' + error.message, 'error');
          }
        }
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ" –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
  const markAllReadBtns = [
    'admin-mark-all-read-btn',
    'owner-mark-all-read-btn',
    'manager-mark-all-read-btn'
  ];
  
  markAllReadBtns.forEach(btnId => {
    const btn = document.getElementById(btnId);
    if (btn) {
      btn.addEventListener('click', async () => {
        if (window.notificationCenter) {
          await window.notificationCenter.markAllAsRead();
          if (window.notificationManager) {
            window.notificationManager.show('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', 'success');
          }
        }
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  document.addEventListener('click', (e) => {
    if (e.target.matches('[data-tab="notifications"]')) {
      e.preventDefault();
      showTab('notifications');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
      if (window.notificationCenter) {
        renderNotificationsList();
      }
    }
  });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
async function renderNotificationsList() {
  const notificationsList = document.getElementById('notifications-list');
  const loading = document.getElementById('notifications-loading');
  
  if (!notificationsList || !window.notificationCenter) return;
  
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (loading) loading.style.display = 'block';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    await window.notificationCenter.loadNotifications();
    
    const notifications = window.notificationCenter.notifications;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (loading) loading.style.display = 'none';
    
    if (notifications.length === 0) {
      notificationsList.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">üîî</div>
          <h3>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
        </div>
      `;
      return;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notificationsList.innerHTML = notifications.map(notification => `
      <div class="notification-item ${notification.read ? 'read' : 'unread'}" data-id="${notification.id}">
        <div class="notification-header">
          <div class="notification-type ${notification.type}">${getNotificationTypeIcon(notification.type)}</div>
          <div class="notification-time">${formatTimeAgo(notification.created_at)}</div>
        </div>
        <div class="notification-content">
          <h4 class="notification-title">${notification.title}</h4>
          <p class="notification-message">${notification.message}</p>
        </div>
        <div class="notification-actions">
          ${!notification.read ? `
            <button class="btn btn--small btn--secondary mark-read-btn" data-id="${notification.id}">
              –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            </button>
          ` : ''}
        </div>
      </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    notificationsList.addEventListener('click', handleNotificationAction);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    
    if (loading) loading.style.display = 'none';
    
    notificationsList.innerHTML = `
      <div class="error-state">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}</p>
        <button class="btn btn--primary" onclick="renderNotificationsList()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
      </div>
    `;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
async function handleNotificationAction(e) {
  if (e.target.matches('.mark-read-btn')) {
    const notificationId = e.target.dataset.id;
    
    if (window.notificationCenter) {
      await window.notificationCenter.markAsRead(notificationId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const notificationItem = e.target.closest('.notification-item');
      if (notificationItem) {
        notificationItem.classList.remove('unread');
        notificationItem.classList.add('read');
        e.target.remove(); // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
      }
      
      if (window.notificationManager) {
        window.notificationManager.show('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 'success');
      }
    }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationTypeIcon(type) {
  const icons = {
    'request': 'üìã',
    'auction': 'üí∞', 
    'system': '‚öôÔ∏è'
  };
  return icons[type] || 'üì¢';
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "–Ω–∞–∑–∞–¥"
function formatTimeAgo(dateString) {
  const now = new Date();
  const date = new Date(dateString);
  const diffMs = now - date;
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMins / 60);
  const diffDays = Math.floor(diffHours / 24);

  if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
  if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
  if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  
  return date.toLocaleDateString('ru-RU');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  showPage('login-page');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  initializeNotifications();

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ dev-—Ä–µ–∂–∏–º–µ)
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    setTimeout(() => {
      if (window.notificationCenter) {
        window.notificationCenter.addDemoNotifications();
      }
    }, 2000);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  const loginForm = document.getElementById('login-form');
  if (loginForm) {
    loginForm.addEventListener('submit', handleLogin);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
  document.querySelectorAll('.logout-btn').forEach(btn => {
    btn.addEventListener('click', handleLogout);
  });
});