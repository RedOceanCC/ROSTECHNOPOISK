#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é –∫ –¥–µ–ø–ª–æ—é –≤–µ—Ä—Å–∏—é
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü–û–î–ì–û–¢–û–í–ö–ê –ü–†–û–ï–ö–¢–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£...\n');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const productionDir = './production-ready';
if (fs.existsSync(productionDir)) {
  console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É production-ready...');
  fs.rmSync(productionDir, { recursive: true, force: true });
}

console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É production-ready...');
fs.mkdirSync(productionDir, { recursive: true });

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const filesToCopy = [
  'index.html',
  'app.js', 
  'style.css',
  'notifications.js',
  'validation.js',
  'frontend-server.js',
  'Special_Equipment_Catalog.csv'
];

// –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
console.log('üìã –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã...');
filesToCopy.forEach(file => {
  if (fs.existsSync(file)) {
    fs.copyFileSync(file, path.join(productionDir, file));
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ö–æ–ø–∏—Ä—É–µ–º backend –ø–∞–ø–∫—É
console.log('\nüìÇ –ö–æ–ø–∏—Ä—É–µ–º backend...');
const backendSource = './backend';
const backendDest = path.join(productionDir, 'backend');

function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ logs
      if (entry.name === 'node_modules' || entry.name === 'logs') {
        continue;
      }
      copyDirectory(srcPath, destPath);
    } else {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º package-lock.json
      if (entry.name === 'package-lock.json') {
        continue;
      }
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

copyDirectory(backendSource, backendDest);

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã bcrypt –Ω–∞ bcryptjs
console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã bcrypt -> bcryptjs...');

function fixBcryptImports(filePath) {
  if (fs.existsSync(filePath)) {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // –ó–∞–º–µ–Ω—è–µ–º require('bcrypt') –Ω–∞ require('bcryptjs')
    content = content.replace(/require\(['"]bcrypt['"]\)/g, "require('bcryptjs')");
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      return true;
    }
  }
  return false;
}

const filesToFix = [
  path.join(backendDest, 'database/init.js'),
  path.join(backendDest, 'models/User.js')
];

filesToFix.forEach(file => {
  fixBcryptImports(file);
});

// –ö–æ–ø–∏—Ä—É–µ–º production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\n‚öôÔ∏è  –ö–æ–ø–∏—Ä—É–µ–º production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

// –ö–æ—Ä–Ω–µ–≤–æ–π package.json
fs.copyFileSync('./production-package.json', path.join(productionDir, 'package.json'));
console.log('‚úÖ package.json');

// Backend package.json
fs.copyFileSync('./backend-production-package.json', path.join(backendDest, 'package.json'));
console.log('‚úÖ backend/package.json');

// Production environment file
fs.copyFileSync('./.env.production', path.join(backendDest, '.env.production'));
console.log('‚úÖ backend/.env.production');

// –°–æ–∑–¥–∞–µ–º PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('\nüîÑ –°–æ–∑–¥–∞–µ–º PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
const pm2Config = {
  apps: [
    {
      name: 'rostechnopolsk-backend',
      script: './backend/server.js',
      cwd: '/path/to/your/project',
      env: {
        NODE_ENV: 'production',
        PORT: 3001
      },
      instances: 1,
      exec_mode: 'fork',
      watch: false,
      max_memory_restart: '500M',
      error_file: './logs/backend-error.log',
      out_file: './logs/backend-out.log',
      log_file: './logs/backend-combined.log',
      time: true
    },
    {
      name: 'rostechnopolsk-frontend',
      script: './frontend-server.js',
      cwd: '/path/to/your/project',
      env: {
        NODE_ENV: 'production',
        PORT: 3000
      },
      instances: 1,
      exec_mode: 'fork',
      watch: false,
      max_memory_restart: '200M',
      error_file: './logs/frontend-error.log',
      out_file: './logs/frontend-out.log',
      log_file: './logs/frontend-combined.log',
      time: true
    }
  ]
};

fs.writeFileSync(
  path.join(productionDir, 'ecosystem.config.js'),
  `module.exports = ${JSON.stringify(pm2Config, null, 2)};`
);
console.log('‚úÖ ecosystem.config.js');

// –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('\nüåê –°–æ–∑–¥–∞–µ–º Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
const nginxConfig = `server {
    listen 80;
    server_name xn--e1aggkdcahelgf4b.xn--p1ai —Ä–æ—Å—Ç–µ—Ö–Ω–æ–ø–æ–∏—Å–∫.—Ä—Ñ;

    # Frontend
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}`;

fs.writeFileSync(path.join(productionDir, 'nginx.conf'), nginxConfig);
console.log('‚úÖ nginx.conf');

// –°–æ–∑–¥–∞–µ–º README –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
console.log('\nüìÑ –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...');
const readmeContent = `# –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö - PRODUCTION READY

–≠—Ç–∞ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—É—é –∫ –¥–µ–ø–ª–æ—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞.

## üöÄ –ë–´–°–¢–†–´–ô –î–ï–ü–õ–û–ô

1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç—É –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ DEPLOY-GUIDE.md
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Nginx (nginx.conf)
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ PM2 (ecosystem.config.js)

## ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø

- ‚úÖ –ó–∞–º–µ–Ω–µ–Ω bcrypt –Ω–∞ bcryptjs
- ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- ‚úÖ –°–æ–∑–¥–∞–Ω—ã PM2 –∏ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

## üìÅ –°–¢–†–£–ö–¢–£–†–ê

\`\`\`
production-ready/
‚îú‚îÄ‚îÄ index.html              # Frontend
‚îú‚îÄ‚îÄ app.js                  # Frontend –ª–æ–≥–∏–∫–∞
‚îú‚îÄ‚îÄ style.css               # –°—Ç–∏–ª–∏
‚îú‚îÄ‚îÄ notifications.js        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚îú‚îÄ‚îÄ validation.js           # –í–∞–ª–∏–¥–∞—Ü–∏—è
‚îú‚îÄ‚îÄ frontend-server.js      # Frontend —Å–µ—Ä–≤–µ—Ä
‚îú‚îÄ‚îÄ package.json            # –ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ ecosystem.config.js     # PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ nginx.conf              # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ Special_Equipment_Catalog.csv
‚îî‚îÄ‚îÄ backend/                # Backend
    ‚îú‚îÄ‚îÄ package.json        # Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Å bcryptjs)
    ‚îú‚îÄ‚îÄ config.env          # Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ‚îú‚îÄ‚îÄ server.js           # –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    ‚îî‚îÄ‚îÄ ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)
\`\`\`

## üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨

‚ö†Ô∏è  **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–ó–ú–ï–ù–ò–¢–ï:**
- \`SESSION_SECRET\` –≤ \`backend/config.env\`
- –î–æ–º–µ–Ω –≤ \`nginx.conf\`
- –ü—É—Ç–∏ –≤ \`ecosystem.config.js\`
`;

fs.writeFileSync(path.join(productionDir, 'README.md'), readmeContent);
console.log('‚úÖ README.md');

console.log('\nüéâ –ü–û–î–ì–û–¢–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
console.log('\nüìÇ –ì–æ—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: production-ready/');
console.log('üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ DEPLOY-GUIDE.md');
