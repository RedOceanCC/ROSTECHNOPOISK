// üîß –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ú–û–î–£–õ–¨ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ù–ê –ü–†–û–î–ï
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

class NotificationDiagnostics {
  constructor() {
    this.startTime = Date.now();
    this.logs = [];
  }

  log(level, message, data = {}) {
    const timestamp = new Date().toISOString();
    const entry = {
      timestamp,
      level,
      message,
      data,
      elapsed: Date.now() - this.startTime
    };
    
    this.logs.push(entry);
    console.log(`[${level.toUpperCase()}] ${message}`, data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (level === 'error') {
      this.sendToServer(entry);
    }
  }

  async sendToServer(logEntry) {
    try {
      await fetch('/api/logs/client', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'notification_diagnostics',
          ...logEntry
        }),
        credentials: 'include'
      });
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', e);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  async runFullDiagnostics() {
    this.log('info', 'üîß –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    await this.checkEnvironment();
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.checkDOMElements();
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    this.checkGlobalObjects();
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    await this.checkAPI();
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await this.checkAuth();
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.checkInitialization();
    
    // 7. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    this.generateReport();
  }

  checkEnvironment() {
    this.log('info', 'üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    
    const env = {
      userAgent: navigator.userAgent,
      url: window.location.href,
      protocol: window.location.protocol,
      nodeEnv: window.NODE_ENV || 'unknown',
      timestamp: new Date().toISOString()
    };
    
    this.log('info', '–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', env);
  }

  checkDOMElements() {
    this.log('info', 'üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    
    const elements = {
      notificationBtns: document.querySelectorAll('.notifications-btn').length,
      notificationModal: !!document.getElementById('notifications-modal'),
      notificationsList: !!document.getElementById('notifications-list'),
      notificationBadges: document.querySelectorAll('.notifications-badge').length,
      markAllBtn: !!document.getElementById('mark-all-read-btn'),
      notificationFilters: document.querySelectorAll('.notifications-filter').length
    };
    
    this.log('info', 'DOM —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', elements);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –∫–ª–∞—Å—Å—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modal = document.getElementById('notifications-modal');
    if (modal) {
      const modalState = {
        classes: Array.from(modal.classList),
        hidden: modal.classList.contains('hidden'),
        display: window.getComputedStyle(modal).display,
        visibility: window.getComputedStyle(modal).visibility
      };
      this.log('info', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞', modalState);
    }
  }

  checkGlobalObjects() {
    this.log('info', 'üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
    
    const globals = {
      notifications: typeof window.notifications,
      notificationManager: typeof window.notificationManager,
      notificationCenter: typeof window.notificationCenter,
      clientLogger: typeof window.clientLogger,
      apiRequest: typeof window.apiRequest,
      fetch: typeof window.fetch,
      console: typeof window.console
    };
    
    this.log('info', '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', globals);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ NotificationCenter
    if (window.notificationCenter) {
      const centerState = {
        notifications: window.notificationCenter.notifications?.length || 0,
        currentFilter: window.notificationCenter.currentFilter,
        isModalOpen: window.notificationCenter.isModalOpen,
        pollInterval: !!window.notificationCenter.pollInterval,
        lastUpdateTime: window.notificationCenter.lastUpdateTime
      };
      this.log('info', '–°–æ—Å—Ç–æ—è–Ω–∏–µ NotificationCenter', centerState);
    }
  }

  async checkAPI() {
    this.log('info', 'üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API');
    
    const apiTests = [];
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ fetch
    try {
      const healthResponse = await fetch('/api/health');
      const healthData = await healthResponse.json();
      apiTests.push({
        test: 'health_endpoint',
        status: healthResponse.status,
        success: healthData.success,
        data: healthData
      });
    } catch (error) {
      apiTests.push({
        test: 'health_endpoint',
        error: error.message
      });
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ window.apiRequest
    if (window.apiRequest) {
      try {
        const notificationResponse = await window.apiRequest('/notifications');
        apiTests.push({
          test: 'notifications_api',
          success: notificationResponse.success,
          count: notificationResponse.notifications?.length || 0,
          data: notificationResponse
        });
      } catch (error) {
        apiTests.push({
          test: 'notifications_api',
          error: error.message
        });
      }
    } else {
      apiTests.push({
        test: 'notifications_api',
        error: 'window.apiRequest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    }
    
    this.log('info', 'API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã', apiTests);
  }

  async checkAuth() {
    this.log('info', 'üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    try {
      const response = await fetch('/api/users/current', {
        credentials: 'include'
      });
      
      if (response.ok) {
        const userData = await response.json();
        this.log('info', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', {
          userId: userData.user?.id,
          userName: userData.user?.name,
          role: userData.user?.role
        });
      } else {
        this.log('warn', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', {
          status: response.status,
          statusText: response.statusText
        });
      }
    } catch (error) {
      this.log('error', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', {
        error: error.message
      });
    }
  }

  checkInitialization() {
    this.log('info', '‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DOMContentLoaded
    const domState = {
      readyState: document.readyState,
      domContentLoaded: document.readyState === 'complete' || document.readyState === 'interactive'
    };
    
    this.log('info', '–°–æ—Å—Ç–æ—è–Ω–∏–µ DOM', domState);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const eventListeners = {
      notificationBtns: 0,
      modalClose: 0,
      filters: 0
    };
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    document.querySelectorAll('.notifications-btn').forEach(btn => {
      if (btn.onclick || btn.addEventListener.length) {
        eventListeners.notificationBtns++;
      }
    });
    
    this.log('info', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π', eventListeners);
  }

  generateReport() {
    this.log('info', 'üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê');
    
    const report = {
      totalTime: Date.now() - this.startTime,
      totalLogs: this.logs.length,
      errors: this.logs.filter(log => log.level === 'error').length,
      warnings: this.logs.filter(log => log.level === 'warn').length,
      recommendations: this.generateRecommendations()
    };
    
    this.log('info', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', report);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    localStorage.setItem('notificationDiagnostics', JSON.stringify({
      timestamp: new Date().toISOString(),
      logs: this.logs,
      report
    }));
    
    return report;
  }

  generateRecommendations() {
    const recommendations = [];
    
    // –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const hasApiErrors = this.logs.some(log => 
      log.level === 'error' && log.message.includes('API')
    );
    
    const hasAuthErrors = this.logs.some(log => 
      log.level === 'error' && log.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü')
    );
    
    const hasInitErrors = this.logs.some(log => 
      log.level === 'error' && log.message.includes('–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü')
    );
    
    if (hasApiErrors) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É backend API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (hasAuthErrors) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–µ—Å—Å–∏–π');
    }
    
    if (hasInitErrors) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤');
    }
    
    if (!window.notificationCenter) {
      recommendations.push('NotificationCenter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ notifications.js');
    }
    
    return recommendations;
  }

  // –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  quickDiagnostics() {
    const issues = [];
    
    if (!window.notificationCenter) {
      issues.push('‚ùå NotificationCenter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!window.apiRequest) {
      issues.push('‚ö†Ô∏è window.apiRequest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    if (!document.getElementById('notifications-modal')) {
      issues.push('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    if (document.querySelectorAll('.notifications-btn').length === 0) {
      issues.push('‚ùå –ö–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('üîç –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:');
    if (issues.length === 0) {
      console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ');
    } else {
      issues.forEach(issue => console.log(issue));
    }
    
    return issues;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
window.notificationDiagnostics = new NotificationDiagnostics();

// –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    window.notificationDiagnostics.quickDiagnostics();
  }, 1000);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.runNotificationDiagnostics = () => {
  return window.notificationDiagnostics.runFullDiagnostics();
};

console.log('üîß –ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ runNotificationDiagnostics() –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
