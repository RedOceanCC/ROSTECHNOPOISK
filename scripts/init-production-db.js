#!/usr/bin/env node
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö
 * –°–æ–∑–¥–∞–µ—Ç –ë–î, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
 */

const fs = require('fs');
const path = require('path');
const { spawn, execSync } = require('child_process');

console.log('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–î–ê–ö–®–ù –ë–ê–ó–´ –î–ê–ù–ù–´–• - –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
if (process.env.NODE_ENV !== 'production') {
  console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
  console.log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NODE_ENV=production –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
  console.log('   NODE_ENV=production node scripts/init-production-db.js');
  process.exit(1);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({
  path: `./.env.${process.env.NODE_ENV}`
});

async function initProductionDatabase() {
  try {
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
    console.log(`   DB_PATH: ${process.env.DB_PATH}`);
    console.log(`   LOG_DIR: ${process.env.LOG_DIR}`);
    console.log(`   BACKUP_PATH: ${process.env.BACKUP_PATH}\n`);
    
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏
    await createDirectories();
    
    // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    await setupPermissions();
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ë–î
    const dbExists = fs.existsSync(process.env.DB_PATH);
    
    if (dbExists) {
      console.log('üîç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
      
      // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const { createBackup } = require('../backend/database/migrate-prod');
      const backupPath = await createBackup();
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      const { runSafeMigrations } = require('../backend/database/migrate-prod');
      await runSafeMigrations();
      
    } else {
      console.log('üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–î
      const { initDatabase } = require('../backend/database/init');
      await initDatabase();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
      const { runMigrations } = require('../backend/database/migrate');
      await runMigrations();
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    await verifyDatabase();
    
    // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await setupMonitoring();
    
    console.log('\nüéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: npm start');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f /var/log/rostechnopoisk/app.log');
    console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
    console.error('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:');
    console.error('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥–∞–º');
    console.error('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.error('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env.production');
    process.exit(1);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
async function createDirectories() {
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤...');
  
  const directories = [
    path.dirname(process.env.DB_PATH),
    process.env.LOG_DIR,
    process.env.BACKUP_PATH || '/var/backups/rostechnopoisk',
    '/var/lib/rostechnopoisk',
    '/etc/rostechnopoisk'
  ];
  
  for (const dir of directories) {
    try {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: ${dir}`);
      } else {
        console.log(`‚ÑπÔ∏è  –ö–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dir}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ ${dir}: ${error.message}`);
      console.log(`   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo`);
    }
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
async function setupPermissions() {
  console.log('\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
  
  const items = [
    { path: process.env.DB_PATH, mode: '600', description: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' },
    { path: process.env.LOG_DIR, mode: '755', description: '–ö–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤' },
    { path: process.env.BACKUP_PATH || '/var/backups/rostechnopoisk', mode: '700', description: '–ö–∞—Ç–∞–ª–æ–≥ –±—ç–∫–∞–ø–æ–≤' }
  ];
  
  for (const item of items) {
    try {
      if (fs.existsSync(item.path)) {
        fs.chmodSync(item.path, parseInt(item.mode, 8));
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ ${item.mode} –¥–ª—è ${item.description}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è ${item.path}: ${error.message}`);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function verifyDatabase() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const { checkDatabaseIntegrity, getDataStats } = require('../backend/database/migrate-prod');
    
    await checkDatabaseIntegrity();
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞');
    
    const stats = await getDataStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', stats);
    
  } catch (error) {
    console.log(`‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î: ${error.message}`);
    throw error;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function setupMonitoring() {
  console.log('\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
  
  // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  const monitoringScript = `#!/bin/bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö
DATE=$(date '+%Y-%m-%d %H:%M:%S')
DB_PATH="${process.env.DB_PATH}"
LOG_DIR="${process.env.LOG_DIR}"

echo "[$DATE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
if [ -f "$DB_PATH" ]; then
    DB_SIZE=$(du -h "$DB_PATH" | cut -f1)
    echo "  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_SIZE"
else
    echo "  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $DB_PATH"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
if [ -d "$LOG_DIR" ]; then
    LOG_SIZE=$(du -sh "$LOG_DIR" | cut -f1)
    echo "  –õ–æ–≥–∏: $LOG_SIZE"
else
    echo "  ‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_DIR"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
PM2_STATUS=$(pm2 status rostechnopolsk-backend 2>/dev/null | grep -c "online" || echo "0")
if [ "$PM2_STATUS" -gt "0" ]; then
    echo "  ‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "  ‚ö†Ô∏è  Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi
`;
  
  const monitoringPath = '/usr/local/bin/rostechnopoisk-monitor';
  try {
    fs.writeFileSync(monitoringPath, monitoringScript);
    fs.chmodSync(monitoringPath, 0o755);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${monitoringPath}`);
  } catch (error) {
    console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
  }
  
  // –°–æ–∑–¥–∞–µ–º logrotate –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const logrotateConfig = `${process.env.LOG_DIR}/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 root root
    postrotate
        pm2 reloadLogs
    endscript
}`;
  
  const logrotateConfigPath = '/etc/logrotate.d/rostechnopoisk';
  try {
    fs.writeFileSync(logrotateConfigPath, logrotateConfig);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è logrotate: ${logrotateConfigPath}`);
  } catch (error) {
    console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é logrotate: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initProductionDatabase();
