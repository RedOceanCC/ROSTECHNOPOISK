#!/usr/bin/env node

// üéØ –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–£–ö–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´
// 
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
// - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
// - –í–∞–ª–∏–¥–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
// - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_CONFIG = {
  timeout: 60000,
  setupTimeout: 30000,
  teardownTimeout: 10000,
  verbose: true,
  bail: false, // –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  coverage: true
};

// –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
const CRITICAL_CHECKS = [
  {
    id: 'test_accounts',
    name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
    description: '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π'
  },
  {
    id: 'equipment_visibility',
    name: '–í–∏–¥–∏–º–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
    description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ–º —Ç–µ—Ö–Ω–∏–∫—É'
  },
  {
    id: 'request_notifications',
    name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏',
    description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º'
  },
  {
    id: 'owner_participation',
    name: '–£—á–∞—Å—Ç–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤',
    description: '–°–æ–≥–ª–∞—Å–∏–µ/–æ—Ç–∫–∞–∑ –∏ –ø–æ–¥–∞—á–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω'
  },
  {
    id: 'winner_selection',
    name: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è',
    description: '–í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ'
  },
  {
    id: 'terminology_check',
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏',
    description: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–≤–∞ "–∞—É–∫—Ü–∏–æ–Ω" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ'
  },
  {
    id: 'edge_cases',
    name: '–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–∫–∞–∑–æ–≤ –∏ –æ—Ç–º–µ–Ω',
    description: '–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–∫–∞–∑–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞—è–≤–æ–∫'
  }
];

class AuctionTestRunner {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      duration: 0,
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      skippedTests: 0,
      criticalIssues: [],
      warnings: [],
      recommendations: [],
      readyForProduction: false
    };
    
    this.startTime = Date.now();
  }

  async run() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–£–ö–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));
    console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
    console.log('');

    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      await this.setupEnvironment();
      
      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      await this.checkDependencies();
      
      // 3. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      await this.runUnitTests();
      await this.runIntegrationTests();
      await this.runE2ETests();
      
      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
      await this.checkTerminology();
      
      // 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.analyzeResults();
      
      // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      await this.generateReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      this.results.criticalIssues.push({
        type: 'CRITICAL_ERROR',
        message: error.message,
        stack: error.stack
      });
    } finally {
      this.results.duration = Date.now() - this.startTime;
      await this.cleanup();
    }

    return this.results;
  }

  async setupEnvironment() {
    console.log('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
      const testDbPath = path.join(__dirname, '../tests/test.db');
      if (fs.existsSync(testDbPath)) {
        fs.unlinkSync(testDbPath);
        console.log('  ‚úÖ –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î');
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
      execSync('cd tests && node config/setup-test-db.js', { stdio: 'pipe' });
      console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      process.env.NODE_ENV = 'test';
      process.env.AUCTION_DURATION_HOURS = '24';
      console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${error.message}`);
    }
  }

  async checkDependencies() {
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    const requiredModules = [
      'jest', 'puppeteer', 'sqlite3', 'bcryptjs'
    ];
    
    const missingModules = [];
    
    for (const module of requiredModules) {
      try {
        require.resolve(module);
        console.log(`  ‚úÖ ${module}`);
      } catch {
        missingModules.push(module);
        console.log(`  ‚ùå ${module} - –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }
    
    if (missingModules.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingModules.join(', ')}`);
    }
  }

  async runUnitTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤...');
    
    try {
      const output = execSync('cd tests && npm test -- --testPathPattern="backend.*test\\.js$" --verbose', { 
        encoding: 'utf8',
        stdio: 'pipe'
      });
      
      this.parseJestOutput(output, 'unit');
      console.log('  ‚úÖ Unit-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è Unit-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏');
      this.results.warnings.push({
        type: 'UNIT_TEST_FAILURES',
        message: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ unit-—Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å',
        details: error.stdout || error.message
      });
    }
  }

  async runIntegrationTests() {
    console.log('üîó –ó–∞–ø—É—Å–∫ integration-—Ç–µ—Å—Ç–æ–≤...');
    
    try {
      const output = execSync('cd tests && npm test -- --testPathPattern="comprehensive-auction-test\\.js$" --verbose', { 
        encoding: 'utf8',
        stdio: 'pipe'
      });
      
      this.parseJestOutput(output, 'integration');
      console.log('  ‚úÖ Integration-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      
    } catch (error) {
      console.log('  ‚ùå Integration-—Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
      this.results.criticalIssues.push({
        type: 'INTEGRATION_FAILURE',
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ integration-—Ç–µ—Å—Ç–∞—Ö',
        details: error.stdout || error.message
      });
    }
  }

  async runE2ETests() {
    console.log('üé≠ –ó–∞–ø—É—Å–∫ E2E-—Ç–µ—Å—Ç–æ–≤...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
      const serverCheck = await this.checkServerRunning();
      if (!serverCheck) {
        console.log('  ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã');
        this.results.skippedTests += 1;
        this.results.warnings.push({
          type: 'E2E_SKIPPED',
          message: 'E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω'
        });
        return;
      }
      
      const output = execSync('cd tests && npm test -- --testPathPattern="e2e.*test\\.js$" --verbose', { 
        encoding: 'utf8',
        stdio: 'pipe'
      });
      
      this.parseJestOutput(output, 'e2e');
      console.log('  ‚úÖ E2E-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      
    } catch (error) {
      console.log('  ‚ùå E2E-—Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
      this.results.criticalIssues.push({
        type: 'E2E_FAILURE',
        message: '–û—à–∏–±–∫–∏ –≤ E2E-—Ç–µ—Å—Ç–∞—Ö',
        details: error.stdout || error.message
      });
    }
  }

  async checkServerRunning() {
    try {
      const http = require('http');
      
      return new Promise((resolve) => {
        const req = http.get('http://localhost:3000', (res) => {
          resolve(true);
        });
        
        req.on('error', () => {
          resolve(false);
        });
        
        req.setTimeout(5000, () => {
          req.destroy();
          resolve(false);
        });
      });
    } catch {
      return false;
    }
  }

  async checkTerminology() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏...');
    
    const problematicFiles = [];
    const searchPaths = [
      'app.js',
      'index.html',
      'backend/services',
      'backend/routes',
      'backend/models'
    ];
    
    for (const searchPath of searchPaths) {
      try {
        const output = execSync(`grep -r -i "–∞—É–∫—Ü–∏–æ–Ω" ${searchPath} || true`, { 
          encoding: 'utf8',
          cwd: path.join(__dirname, '..')
        });
        
        if (output.trim()) {
          const lines = output.trim().split('\n');
          lines.forEach(line => {
            if (line.includes('–∞—É–∫—Ü–∏–æ–Ω')) {
              problematicFiles.push(line);
            }
          });
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ grep
      }
    }
    
    if (problematicFiles.length > 0) {
      this.results.criticalIssues.push({
        type: 'TERMINOLOGY_VIOLATION',
        message: `–ù–∞–π–¥–µ–Ω–æ ${problematicFiles.length} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–ª–æ–≤–∞ "–∞—É–∫—Ü–∏–æ–Ω" –≤ –∫–æ–¥–µ`,
        details: problematicFiles.slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
      });
      console.log(`  ‚ùå –ù–∞–π–¥–µ–Ω–æ ${problematicFiles.length} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π "–∞—É–∫—Ü–∏–æ–Ω"`);
    } else {
      console.log('  ‚úÖ –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º');
    }
  }

  parseJestOutput(output, testType) {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ Jest
    const lines = output.split('\n');
    
    let passed = 0;
    let failed = 0;
    
    lines.forEach(line => {
      if (line.includes('‚úì') || line.includes('PASS')) {
        passed++;
      } else if (line.includes('‚úó') || line.includes('FAIL')) {
        failed++;
      }
    });
    
    this.results.totalTests += passed + failed;
    this.results.passedTests += passed;
    this.results.failedTests += failed;
    
    console.log(`    –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}, –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  }

  async analyzeResults() {
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const criticalFailures = this.results.criticalIssues.filter(issue => 
      ['INTEGRATION_FAILURE', 'TERMINOLOGY_VIOLATION', 'CRITICAL_ERROR'].includes(issue.type)
    );
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    this.results.readyForProduction = (
      criticalFailures.length === 0 &&
      this.results.failedTests < this.results.totalTests * 0.1 && // –ú–µ–Ω–µ–µ 10% –ø—Ä–æ–≤–∞–ª–æ–≤
      this.results.totalTests > 0
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!this.results.readyForProduction) {
      this.results.recommendations.push('–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º');
    }
    
    if (this.results.warnings.length > 0) {
      this.results.recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    if (this.results.criticalIssues.some(issue => issue.type === 'TERMINOLOGY_VIOLATION')) {
      this.results.recommendations.push('–ö–†–ò–¢–ò–ß–ù–û: –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–∞—É–∫—Ü–∏–æ–Ω" –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é');
    }
    
    console.log(`  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((this.results.passedTests / this.results.totalTests) * 100).toFixed(1)}%`);
    console.log(`  üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: ${this.results.readyForProduction ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  }

  async generateReport() {
    console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
    
    const report = this.createDetailedReport();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportPath = path.join(__dirname, '../test-results', `auction-test-report-${Date.now()}.json`);
    const reportDir = path.dirname(reportPath);
    
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
    const readableReportPath = reportPath.replace('.json', '.md');
    fs.writeFileSync(readableReportPath, this.createMarkdownReport(report));
    
    console.log(`  üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    console.log(`  üìÑ –ß–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç: ${readableReportPath}`);
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    this.printSummary();
  }

  createDetailedReport() {
    return {
      meta: {
        testSuite: 'Comprehensive Auction System Test',
        version: '1.0.0',
        environment: 'test',
        ...this.results
      },
      criticalChecks: CRITICAL_CHECKS.map(check => ({
        ...check,
        status: this.getCriticalCheckStatus(check.id),
        issues: this.results.criticalIssues.filter(issue => 
          issue.message.toLowerCase().includes(check.name.toLowerCase())
        )
      })),
      summary: {
        totalTests: this.results.totalTests,
        passedTests: this.results.passedTests,
        failedTests: this.results.failedTests,
        skippedTests: this.results.skippedTests,
        successRate: ((this.results.passedTests / this.results.totalTests) * 100).toFixed(2),
        duration: this.results.duration,
        readyForProduction: this.results.readyForProduction
      },
      issues: {
        critical: this.results.criticalIssues,
        warnings: this.results.warnings
      },
      recommendations: this.results.recommendations
    };
  }

  getCriticalCheckStatus(checkId) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    const relatedIssues = this.results.criticalIssues.filter(issue => {
      switch (checkId) {
        case 'terminology_check':
          return issue.type === 'TERMINOLOGY_VIOLATION';
        case 'equipment_visibility':
          return issue.message.includes('visibility') || issue.message.includes('–≤–∏–¥–∏–º–æ—Å—Ç—å');
        default:
          return false;
      }
    });
    
    return relatedIssues.length === 0 ? 'PASSED' : 'FAILED';
  }

  createMarkdownReport(report) {
    return `# üìã –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–£–ö–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´

**–î–∞—Ç–∞:** ${new Date(report.meta.timestamp).toLocaleString()}  
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${report.meta.duration}ms  
**–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:** ${report.meta.readyForProduction ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}

## üìä –°–≤–æ–¥–∫–∞

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|---------|----------|
| –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ | ${report.summary.totalTests} |
| –ü—Ä–æ–π–¥–µ–Ω–æ | ${report.summary.passedTests} |
| –ü—Ä–æ–≤–∞–ª–µ–Ω–æ | ${report.summary.failedTests} |
| –ü—Ä–æ–ø—É—â–µ–Ω–æ | ${report.summary.skippedTests} |
| –£—Å–ø–µ—à–Ω–æ—Å—Ç—å | ${report.summary.successRate}% |

## üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

${report.criticalChecks.map(check => `
### ${check.name}
**–°—Ç–∞—Ç—É—Å:** ${check.status === 'PASSED' ? '‚úÖ' : '‚ùå'} ${check.status}  
**–û–ø–∏—Å–∞–Ω–∏–µ:** ${check.description}  
${check.issues.length > 0 ? `**–ü—Ä–æ–±–ª–µ–º—ã:** ${check.issues.length}` : ''}
`).join('')}

## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

${report.issues.critical.length === 0 ? '*–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*' : 
  report.issues.critical.map(issue => `
### ${issue.type}
${issue.message}
${issue.details ? '```\n' + issue.details + '\n```' : ''}
`).join('')}

## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

${report.issues.warnings.length === 0 ? '*–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç*' : 
  report.issues.warnings.map(warning => `- ${warning.message}`).join('\n')}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${report.recommendations.length === 0 ? '*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç*' : 
  report.recommendations.map(rec => `- ${rec}`).join('\n')}

## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

${report.meta.readyForProduction ? 
  '‚úÖ **–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£**\n\n–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.' :
  '‚ùå **–°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£**\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.'}
`;
  }

  printSummary() {
    console.log('\n' + '='.repeat(60));
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(60));
    console.log(`‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.results.duration}ms`);
    console.log(`üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.totalTests}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failedTests}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.results.skippedTests}`);
    
    if (this.results.totalTests > 0) {
      const successRate = ((this.results.passedTests / this.results.totalTests) * 100).toFixed(1);
      console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
    }
    
    console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${this.results.criticalIssues.length}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.results.warnings.length}`);
    
    console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ï–ù–£:');
    if (this.results.readyForProduction) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£');
      console.log('   –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£');
      console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:');
      this.results.criticalIssues.forEach((issue, i) => {
        console.log(`   ${i + 1}. ${issue.message}`);
      });
    }
    
    if (this.results.recommendations.length > 0) {
      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      this.results.recommendations.forEach((rec, i) => {
        console.log(`   ${i + 1}. ${rec}`);
      });
    }
    
    console.log('\n' + '='.repeat(60));
  }

  async cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    try {
      // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
      const testDbPath = path.join(__dirname, '../tests/test.db');
      if (fs.existsSync(testDbPath)) {
        fs.unlinkSync(testDbPath);
      }
      
      console.log('  ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const runner = new AuctionTestRunner();
  
  runner.run()
    .then(results => {
      process.exit(results.readyForProduction ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(2);
    });
}

module.exports = AuctionTestRunner;
