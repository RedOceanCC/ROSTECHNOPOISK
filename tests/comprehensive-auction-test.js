// üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ê–£–ö–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´
// 
// –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç-—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
// 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
// 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
// 4. –°–æ–≥–ª–∞—Å–∏–µ/–æ—Ç–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –ø–æ–¥–∞—á–∞ —Å—Ç–∞–≤–æ–∫
// 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ª–æ–≤–∞ "–∞—É–∫—Ü–∏–æ–Ω" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
// 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç–∫–∞–∑–æ–≤ –∏ –æ—Ç–º–µ–Ω

const { TestDatabase, TestDataGenerator } = require('./config/test-helpers');
const AuctionService = require('../backend/services/AuctionService');
const NotificationService = require('../backend/services/NotificationService');
const RentalRequest = require('../backend/models/RentalRequest');
const RentalBid = require('../backend/models/RentalBid');
const Equipment = require('../backend/models/Equipment');
const User = require('../backend/models/User');
const Company = require('../backend/models/Company');

describe('üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ê–£–ö–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´', () => {
  let testDb;
  let testUsers = {};
  let testCompanies = {};
  let testEquipment = {};
  let notifications = [];

  beforeAll(async () => {
    testDb = new TestDatabase();
    await testDb.connect();
    
    // –ú–æ–∫–∞–µ–º NotificationService –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    jest.spyOn(NotificationService, 'sendNotification').mockImplementation(async (userId, data) => {
      notifications.push({ userId, ...data });
      return Promise.resolve({ id: Date.now() });
    });
  });

  afterAll(async () => {
    await testDb.close();
    jest.restoreAllMocks();
  });

  beforeEach(async () => {
    await testDb.clearAll();
    await testDb.resetAutoIncrement();
    notifications = [];
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–µ–∂–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    await setupComprehensiveTestData();
  });

  async function setupComprehensiveTestData() {
    // üè¢ –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ô
    testCompanies.managersCompany = await Company.create({
      name: '–ó–ê–û –°—Ç—Ä–æ–π–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
      description: '–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      contact_info: 'manager@stroymanagement.ru',
      status: 'active'
    });

    testCompanies.ownersCompanyA = await Company.create({
      name: '–û–û–û –¢–µ—Ö–ü–∞—Ä–∫ –ê–ª—å—Ñ–∞',
      description: '–í–ª–∞–¥–µ–ª—å—Ü—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ê',
      contact_info: 'owner@techpark-alpha.ru',
      status: 'active'
    });

    testCompanies.ownersCompanyB = await Company.create({
      name: '–ò–ü –¢–µ—Ö–°–µ—Ä–≤–∏—Å –ë–µ—Ç–∞',
      description: '–í–ª–∞–¥–µ–ª—å—Ü—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ë',
      contact_info: 'owner@techservice-beta.ru',
      status: 'active'
    });

    testCompanies.isolatedCompany = await Company.create({
      name: '–û–ê–û –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–ö–æ–º–ø–∞–Ω–∏—è',
      description: '–ö–æ–º–ø–∞–Ω–∏—è –±–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤',
      contact_info: 'isolated@company.ru',
      status: 'active'
    });

    // üë• –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
    testUsers.manager1 = await User.create({
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      phone: '+79161234567',
      role: 'manager',
      company_id: testCompanies.managersCompany.id,
      password: 'manager123'
    });

    testUsers.manager2 = await User.create({
      name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
      phone: '+79161234568',
      role: 'manager',
      company_id: testCompanies.managersCompany.id,
      password: 'manager123'
    });

    // –í–ª–∞–¥–µ–ª—å—Ü—ã —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –ê
    testUsers.owner1A = await User.create({
      name: '–ê–ª–µ–∫—Å–µ–π –≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–≤',
      phone: '+79161234569',
      telegram_id: '111111111',
      role: 'owner',
      company_id: testCompanies.ownersCompanyA.id,
      password: 'owner123'
    });

    testUsers.owner2A = await User.create({
      name: '–°–µ—Ä–≥–µ–π –ë—É–ª—å–¥–æ–∑–µ—Ä–æ–≤',
      phone: '+79161234570',
      telegram_id: '222222222',
      role: 'owner',
      company_id: testCompanies.ownersCompanyA.id,
      password: 'owner123'
    });

    // –í–ª–∞–¥–µ–ª—å—Ü—ã —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –ë
    testUsers.owner1B = await User.create({
      name: '–î–º–∏—Ç—Ä–∏–π –ö—Ä–∞–Ω–æ–≤',
      phone: '+79161234571',
      telegram_id: '333333333',
      role: 'owner',
      company_id: testCompanies.ownersCompanyB.id,
      password: 'owner123'
    });

    testUsers.owner2B = await User.create({
      name: '–ù–∏–∫–æ–ª–∞–π –ü–æ–≥—Ä—É–∑—á–∏–∫–æ–≤',
      phone: '+79161234572',
      telegram_id: '444444444',
      role: 'owner',
      company_id: testCompanies.ownersCompanyB.id,
      password: 'owner123'
    });

    // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü (–±–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞)
    testUsers.isolatedOwner = await User.create({
      name: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –í–ª–∞–¥–µ–ª–µ—Ü',
      phone: '+79161234573',
      role: 'owner',
      company_id: testCompanies.isolatedCompany.id,
      password: 'owner123'
    });

    // ü§ù –°–û–ó–î–ê–ù–ò–ï –ü–ê–†–¢–ù–ï–†–°–¢–í
    await testDb.run(`
      INSERT INTO company_partnerships (owner_company_id, manager_company_id, status) VALUES 
      (?, ?, 'active'),
      (?, ?, 'active')
    `, [
      testCompanies.ownersCompanyA.id, testCompanies.managersCompany.id,
      testCompanies.ownersCompanyB.id, testCompanies.managersCompany.id
    ]);

    // üöú –°–û–ó–î–ê–ù–ò–ï –¢–ï–•–ù–ò–ö–ò
    
    // –¢–µ—Ö–Ω–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ê
    testEquipment.excavator1A = await Equipment.create({
      owner_id: testUsers.owner1A.id,
      name: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä JCB JS220 #001',
      type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
      subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
      location: '–ú–æ—Å–∫–≤–∞',
      hourly_rate: 5000,
      daily_rate: 40000,
      phone: testUsers.owner1A.phone,
      telegram_id: testUsers.owner1A.telegram_id,
      status: 'available'
    });

    testEquipment.excavator2A = await Equipment.create({
      owner_id: testUsers.owner1A.id,
      name: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä CAT 320D #002',
      type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
      subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
      location: '–ú–æ—Å–∫–≤–∞',
      hourly_rate: 4800,
      daily_rate: 38000,
      phone: testUsers.owner1A.phone,
      telegram_id: testUsers.owner1A.telegram_id,
      status: 'available'
    });

    testEquipment.bulldozer1A = await Equipment.create({
      owner_id: testUsers.owner2A.id,
      name: '–ë—É–ª—å–¥–æ–∑–µ—Ä KOMATSU D65 #003',
      type: '–ë—É–ª—å–¥–æ–∑–µ—Ä—ã',
      subtype: '–ë—É–ª—å–¥–æ–∑–µ—Ä —Å—Ä–µ–¥–Ω–∏–π',
      location: '–ú–æ—Å–∫–≤–∞',
      hourly_rate: 4500,
      daily_rate: 36000,
      phone: testUsers.owner2A.phone,
      telegram_id: testUsers.owner2A.telegram_id,
      status: 'available'
    });

    // –¢–µ—Ö–Ω–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ë
    testEquipment.excavator1B = await Equipment.create({
      owner_id: testUsers.owner1B.id,
      name: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä HITACHI ZX200 #004',
      type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
      subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
      location: '–°–ü–±',
      hourly_rate: 4700,
      daily_rate: 37000,
      phone: testUsers.owner1B.phone,
      telegram_id: testUsers.owner1B.telegram_id,
      status: 'available'
    });

    testEquipment.loader1B = await Equipment.create({
      owner_id: testUsers.owner2B.id,
      name: '–ü–æ–≥—Ä—É–∑—á–∏–∫ VOLVO L120 #005',
      type: '–ü–æ–≥—Ä—É–∑—á–∏–∫–∏',
      subtype: '–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–≥—Ä—É–∑—á–∏–∫ 3-5 —Ç–æ–Ω–Ω',
      location: '–°–ü–±',
      hourly_rate: 3500,
      daily_rate: 28000,
      phone: testUsers.owner2B.phone,
      telegram_id: testUsers.owner2B.telegram_id,
      status: 'available'
    });

    // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞)
    testEquipment.isolatedEquipment = await Equipment.create({
      owner_id: testUsers.isolatedOwner.id,
      name: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä #999',
      type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
      subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
      location: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
      hourly_rate: 3000,
      daily_rate: 24000,
      phone: testUsers.isolatedOwner.phone,
      status: 'available'
    });
  }

  describe('üìã 1. –¢–ï–°–¢ –í–ò–î–ò–ú–û–°–¢–ò –¢–ï–•–ù–ò–ö–ò –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í', () => {
    test('–º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫—É –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π', async () => {
      const availableEquipment = await Equipment.findAvailableForManager(
        testUsers.manager1.id,
        '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω'
      );

      // –î–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π –ê –∏ –ë, –Ω–æ –ù–ï –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é
      expect(availableEquipment).toHaveLength(3);
      
      const equipmentNames = availableEquipment.map(eq => eq.name);
      expect(equipmentNames).toContain('–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä JCB JS220 #001');
      expect(equipmentNames).toContain('–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä CAT 320D #002');
      expect(equipmentNames).toContain('–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä HITACHI ZX200 #004');
      expect(equipmentNames).not.toContain('–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä #999');
    });

    test('–º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', async () => {
      const availableTypes = await Equipment.getAvailableTypesForManager(testUsers.manager1.id);
      
      expect(availableTypes.length).toBeGreaterThan(0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
      const excavatorsType = availableTypes.find(t => 
        t.type === '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã' && t.subtype === '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω'
      );
      expect(excavatorsType).toBeDefined();
      expect(excavatorsType.count).toBe(3); // 3 —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    });
  });

  describe('üì® 2. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô', () => {
    test('–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω—ã —É–≤–µ–¥–æ–º–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã', async () => {
      const requestData = {
        manager_id: testUsers.manager1.id,
        equipment_type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        equipment_subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-15',
        end_date: '2024-01-20',
        location: '–ú–æ—Å–∫–≤–∞',
        work_description: '–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–µ',
        budget_range: '200000-300000'
      };

      const result = await AuctionService.createAuction(requestData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
      expect(result.request).toBeDefined();
      expect(result.request.status).toBe('auction_active');
      expect(result.eligible_owners).toBe(2); // 2 –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–≤

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      expect(notifications).toHaveLength(2);
      
      const notifiedOwners = notifications.map(n => n.userId);
      expect(notifiedOwners).toContain(testUsers.owner1A.id); // –£ –Ω–µ–≥–æ –µ—Å—Ç—å —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã
      expect(notifiedOwners).toContain(testUsers.owner1B.id); // –£ –Ω–µ–≥–æ –µ—Å—Ç—å —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä
      expect(notifiedOwners).not.toContain(testUsers.owner2A.id); // –£ –Ω–µ–≥–æ —Ç–æ–ª—å–∫–æ –±—É–ª—å–¥–æ–∑–µ—Ä
      expect(notifiedOwners).not.toContain(testUsers.isolatedOwner.id); // –ù–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      notifications.forEach(notification => {
        expect(notification.type).toBe('new_request');
        expect(notification.title).toContain('–∑–∞—è–≤–∫–∞');
        expect(notification.message).toContain('–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã');
        expect(notification.message).toContain('–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω');
        expect(notification.message).toContain('2024-01-15');
        expect(notification.message).toContain('—Å—Ç–∞–≤–æ–∫');
        
        // ‚ùó –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï–¢ —Å–ª–æ–≤–∞ "–∞—É–∫—Ü–∏–æ–Ω"
        expect(notification.title.toLowerCase()).not.toContain('–∞—É–∫—Ü–∏–æ–Ω');
        expect(notification.message.toLowerCase()).not.toContain('–∞—É–∫—Ü–∏–æ–Ω');
      });
    });

    test('–∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ—Ö–Ω–∏–∫—É –Ω–µ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', async () => {
      const requestData = {
        manager_id: testUsers.manager1.id,
        equipment_type: '–ö—Ä–∞–Ω—ã',
        equipment_subtype: '–ê–≤—Ç–æ–∫—Ä–∞–Ω 25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-15',
        end_date: '2024-01-20',
        location: '–ú–æ—Å–∫–≤–∞',
        work_description: '–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      };

      await expect(AuctionService.createAuction(requestData)).rejects.toThrow('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏');
      expect(notifications).toHaveLength(0);
    });
  });

  describe('üí∞ 3. –¢–ï–°–¢ –ü–û–î–ê–ß–ò –°–¢–ê–í–û–ö', () => {
    let activeRequest;

    beforeEach(async () => {
      // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
      const requestData = {
        manager_id: testUsers.manager1.id,
        equipment_type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        equipment_subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-15',
        end_date: '2024-01-20',
        location: '–ú–æ—Å–∫–≤–∞',
        work_description: '–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      };
      
      const result = await AuctionService.createAuction(requestData);
      activeRequest = result.request;
      notifications = []; // –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    });

    test('–≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞—è–≤–∫—É', async () => {
      const bidData = {
        request_id: activeRequest.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        hourly_rate: 4900,
        daily_rate: 39000,
        total_price: 195000, // 5 –¥–Ω–µ–π * 39000
        comment: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ä–æ–∫'
      };

      const bid = await RentalBid.create(bidData);

      expect(bid).toBeDefined();
      expect(bid.status).toBe('pending');
      expect(bid.total_price).toBe(195000);
    });

    test('–≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç—É –∂–µ –∑–∞—è–≤–∫—É', async () => {
      // –ü–æ–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É
      await RentalBid.create({
        request_id: activeRequest.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        hourly_rate: 4900,
        daily_rate: 39000,
        total_price: 195000
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∫—É
      await expect(RentalBid.create({
        request_id: activeRequest.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator2A.id,
        hourly_rate: 4800,
        daily_rate: 38000,
        total_price: 190000
      })).rejects.toThrow('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –∞—É–∫—Ü–∏–æ–Ω');
    });

    test('–≤–ª–∞–¥–µ–ª–µ—Ü –±–µ–∑ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', async () => {
      const canParticipate = await AuctionService.canParticipateInAuction(
        testUsers.owner2A.id, // –£ –Ω–µ–≥–æ —Ç–æ–ª—å–∫–æ –±—É–ª—å–¥–æ–∑–µ—Ä, –∞ –Ω—É–∂–µ–Ω —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä
        activeRequest.id
      );

      expect(canParticipate.canParticipate).toBe(false);
      expect(canParticipate.reason).toContain('–ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏');
    });
  });

  describe('üèÜ 4. –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û–ë–ï–î–ò–¢–ï–õ–Ø', () => {
    let activeRequest;

    beforeEach(async () => {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const result = await AuctionService.createAuction({
        manager_id: testUsers.manager1.id,
        equipment_type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        equipment_subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-15',
        end_date: '2024-01-20',
        location: '–ú–æ—Å–∫–≤–∞',
        work_description: '–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
      });
      activeRequest = result.request;
      notifications = [];
    });

    test('–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π', async () => {
      // –ü–æ–¥–∞–µ–º —Å—Ç–∞–≤–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      await RentalBid.create({
        request_id: activeRequest.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        hourly_rate: 5000,
        daily_rate: 40000,
        total_price: 200000, // –í–´–°–û–ö–ê–Ø —Ü–µ–Ω–∞
        comment: '–ü—Ä–µ–º–∏—É–º —Ç–µ—Ö–Ω–∏–∫–∞'
      });

      await RentalBid.create({
        request_id: activeRequest.id,
        owner_id: testUsers.owner1B.id,
        equipment_id: testEquipment.excavator1B.id,
        hourly_rate: 4700,
        daily_rate: 37000,
        total_price: 185000, // –ù–ò–ó–ö–ê–Ø —Ü–µ–Ω–∞ - –¥–æ–ª–∂–µ–Ω –≤—ã–∏–≥—Ä–∞—Ç—å
        comment: '–í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
      });

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
      const result = await RentalRequest.closeAuction(activeRequest.id);

      expect(result.success).toBe(true);
      expect(result.winner).toBeDefined();
      expect(result.winner.owner_id).toBe(testUsers.owner1B.id); // –í–ª–∞–¥–µ–ª–µ—Ü —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
      expect(result.winner.total_price).toBe(185000);
      expect(result.bids).toHaveLength(2);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
      const updatedRequest = await RentalRequest.findById(activeRequest.id);
      expect(updatedRequest.status).toBe('auction_closed');
      expect(updatedRequest.winning_bid_id).toBe(result.winner.id);
    });

    test('–¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è', async () => {
      // –ü–æ–¥–∞–µ–º —Å—Ç–∞–≤–∫–∏
      await RentalBid.create({
        request_id: activeRequest.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        total_price: 200000
      });

      await RentalBid.create({
        request_id: activeRequest.id,
        owner_id: testUsers.owner1B.id,
        equipment_id: testEquipment.excavator1B.id,
        total_price: 185000 // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
      });

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
      const result = await RentalRequest.closeAuction(activeRequest.id);
      await AuctionService.sendAuctionClosedNotifications(activeRequest, result);

      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø–æ–±–µ–¥–∏—Ç–µ–ª—é, –º–µ–Ω–µ–¥–∂–µ—Ä—É, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É
      expect(notifications).toHaveLength(3);

      const winnerNotification = notifications.find(n => n.userId === testUsers.owner1B.id);
      const managerNotification = notifications.find(n => n.userId === testUsers.manager1.id);
      const loserNotification = notifications.find(n => n.userId === testUsers.owner1A.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
      expect(winnerNotification.type).toBe('bid_won');
      expect(winnerNotification.title).toContain('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º');
      expect(winnerNotification.message).toContain('185 000');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
      expect(managerNotification.type).toBe('auction_closed');
      expect(managerNotification.title).toContain('–∑–∞–≤–µ—Ä—à–µ–Ω');
      expect(managerNotification.message).toContain(testUsers.owner1B.name);
      expect(managerNotification.message).toContain(testUsers.owner1B.phone);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É
      expect(loserNotification.type).toBe('bid_lost');
      expect(loserNotification.title).toContain('–Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞');

      // ‚ùó –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–≤–∞ "–∞—É–∫—Ü–∏–æ–Ω" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
      notifications.forEach(notification => {
        if (notification.message.toLowerCase().includes('–∞—É–∫—Ü–∏–æ–Ω')) {
          // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
          console.warn('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–∞—É–∫—Ü–∏–æ–Ω" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', notification.message);
        }
      });
    });

    test('–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞–≤–æ–∫ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è', async () => {
      const result = await RentalRequest.closeAuction(activeRequest.id);

      expect(result.success).toBe(true);
      expect(result.winner).toBe(null);
      expect(result.bids).toHaveLength(0);

      const updatedRequest = await RentalRequest.findById(activeRequest.id);
      expect(updatedRequest.status).toBe('cancelled');
    });
  });

  describe('‚ùå 5. –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–ï–í –û–¢–ö–ê–ó–û–í –ò –û–¢–ú–ï–ù', () => {
    test('–∏—Å—Ç–µ–∫—à–∏–π –¥–µ–¥–ª–∞–π–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∞—á—É —Å—Ç–∞–≤–æ–∫', async () => {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º
      const pastDeadline = new Date();
      pastDeadline.setHours(pastDeadline.getHours() - 1);

      const result = await testDb.run(`
        INSERT INTO rental_requests (manager_id, equipment_type, equipment_subtype, start_date, end_date, location, work_description, status, auction_deadline)
        VALUES (?, ?, ?, ?, ?, ?, ?, 'auction_active', ?)
      `, [
        testUsers.manager1.id, '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã', '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        '2024-01-15', '2024-01-20', '–ú–æ—Å–∫–≤–∞', '–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã', pastDeadline.toISOString()
      ]);

      await expect(RentalBid.create({
        request_id: result.lastID,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        total_price: 200000
      })).rejects.toThrow('–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ');
    });

    test('–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫', async () => {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
      const pastDeadline = new Date();
      pastDeadline.setHours(pastDeadline.getHours() - 2);

      const requestResult = await testDb.run(`
        INSERT INTO rental_requests (manager_id, equipment_type, equipment_subtype, start_date, end_date, location, work_description, status, auction_deadline)
        VALUES (?, ?, ?, ?, ?, ?, ?, 'auction_active', ?)
      `, [
        testUsers.manager1.id, '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã', '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        '2024-01-15', '2024-01-20', '–ú–æ—Å–∫–≤–∞', '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞', pastDeadline.toISOString()
      ]);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –æ–±—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞ (—ç–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É –ø–æ–¥–∞–Ω–Ω—É—é –≤–æ–≤—Ä–µ–º—è)
      await testDb.run(`
        INSERT INTO rental_bids (request_id, owner_id, equipment_id, hourly_rate, daily_rate, total_price, status)
        VALUES (?, ?, ?, 4000, 32000, 160000, 'pending')
      `, [requestResult.lastID, testUsers.owner1A.id, testEquipment.excavator1A.id]);

      notifications = [];

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
      const closeResult = await AuctionService.closeExpiredAuctions();

      expect(closeResult.closed).toBe(1);
      expect(closeResult.results[0].success).toBe(true);
      expect(closeResult.results[0].winner).toBeDefined();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      expect(notifications.length).toBeGreaterThan(0);
    });

    test('–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', async () => {
      // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
      const result = await AuctionService.createAuction({
        manager_id: testUsers.manager1.id,
        equipment_type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        equipment_subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-15',
        end_date: '2024-01-20',
        location: '–ú–æ—Å–∫–≤–∞',
        work_description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ'
      });

      // –ü–æ–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
      await RentalBid.create({
        request_id: result.request.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        total_price: 200000
      });

      notifications = [];

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
      const adminId = 1; // ID –∞–¥–º–∏–Ω–∞
      const closeResult = await AuctionService.forceCloseAuction(result.request.id, adminId);

      expect(closeResult.success).toBe(true);
      expect(closeResult.winner).toBeDefined();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
      const updatedRequest = await RentalRequest.findById(result.request.id);
      expect(updatedRequest.status).toBe('auction_closed');
    });
  });

  describe('üîç 6. –ü–†–û–í–ï–†–ö–ê –¢–ï–†–ú–ò–ù–û–õ–û–ì–ò–ò –í –ò–ù–¢–ï–†–§–ï–ô–°–ï', () => {
    test('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–æ "–∞—É–∫—Ü–∏–æ–Ω"', () => {
      // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ
      // –ó–¥–µ—Å—å –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      
      const problematicNotifications = notifications.filter(n => 
        n.title.toLowerCase().includes('–∞—É–∫—Ü–∏–æ–Ω') || 
        n.message.toLowerCase().includes('–∞—É–∫—Ü–∏–æ–Ω')
      );

      if (problematicNotifications.length > 0) {
        console.warn('‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –° –°–õ–û–í–û–ú "–ê–£–ö–¶–ò–û–ù":');
        problematicNotifications.forEach(n => {
          console.warn(`- ${n.type}: ${n.title}`);
          console.warn(`  ${n.message.substring(0, 100)}...`);
        });
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
      // expect(problematicNotifications).toHaveLength(0);
    });
  });

  describe('üìä 7. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–ù–û–°–¢–¨', () => {
    test('–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º', async () => {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
      const request1 = await AuctionService.createAuction({
        manager_id: testUsers.manager1.id,
        equipment_type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        equipment_subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-15',
        end_date: '2024-01-20',
        location: '–ú–æ—Å–∫–≤–∞',
        work_description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç 1'
      });

      const request2 = await AuctionService.createAuction({
        manager_id: testUsers.manager2.id,
        equipment_type: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
        equipment_subtype: '–ì—É—Å–µ–Ω–∏—á–Ω—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä 20-25 —Ç–æ–Ω–Ω',
        start_date: '2024-01-16',
        end_date: '2024-01-21',
        location: '–°–ü–±',
        work_description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç 2'
      });

      // –ü–æ–¥–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
      await RentalBid.create({
        request_id: request1.request.id,
        owner_id: testUsers.owner1A.id,
        equipment_id: testEquipment.excavator1A.id,
        total_price: 200000
      });

      await RentalRequest.closeAuction(request1.request.id);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await AuctionService.getAuctionStats();

      expect(stats.requests.total).toBe(2);
      expect(stats.requests.active_auctions).toBe(1);
      expect(stats.requests.closed_auctions).toBe(1);
      expect(stats.conversion_rate).toBe('50.00');
    });
  });
});

// üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
async function runComprehensiveAuctionTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...\n');
  
  const startTime = Date.now();
  let passed = 0;
  let failed = 0;
  let issues = [];

  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ Jest');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    failed++;
  }

  const duration = Date.now() - startTime;
  
  console.log('\nüìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
  console.log('========================');
  console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  
  if (issues.length > 0) {
    console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    issues.forEach((issue, i) => console.log(`${i + 1}. ${issue}`));
  }
  
  return {
    passed,
    failed,
    issues,
    duration,
    ready: failed === 0 && issues.length === 0
  };
}

module.exports = {
  runComprehensiveAuctionTest
};
