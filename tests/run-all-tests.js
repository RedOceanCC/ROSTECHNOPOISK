#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function runCommand(command, description) {
  log(`\nüìã ${description}`, 'blue');
  log(`–ö–æ–º–∞–Ω–¥–∞: ${command}`, 'cyan');
  
  try {
    const output = execSync(command, { 
      encoding: 'utf8',
      stdio: 'inherit'
    });
    log(`‚úÖ ${description} - –£–°–ü–ï–®–ù–û`, 'green');
    return { success: true, output };
  } catch (error) {
    log(`‚ùå ${description} - –û–®–ò–ë–ö–ê`, 'red');
    console.error(error.message);
    return { success: false, error: error.message };
  }
}

function generateTestReport(results) {
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      total: results.length,
      passed: results.filter(r => r.success).length,
      failed: results.filter(r => !r.success).length
    },
    details: results
  };

  const reportPath = path.join(__dirname, '../test-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  return report;
}

function displaySummary(report) {
  log('\n' + '='.repeat(60), 'bright');
  log('üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bright');
  log('='.repeat(60), 'bright');
  
  log(`üìÖ –í—Ä–µ–º—è: ${new Date(report.timestamp).toLocaleString('ru-RU')}`);
  log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${report.summary.total}`);
  log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${report.summary.passed}`, 'green');
  log(`‚ùå –û—à–∏–±–æ–∫: ${report.summary.failed}`, report.summary.failed > 0 ? 'red' : 'green');
  
  const successRate = Math.round((report.summary.passed / report.summary.total) * 100);
  log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`, successRate >= 90 ? 'green' : successRate >= 70 ? 'yellow' : 'red');
  
  if (report.summary.failed > 0) {
    log('\nüîç –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:', 'red');
    report.details.filter(r => !r.success).forEach(result => {
      log(`  ‚Ä¢ ${result.description}`, 'red');
    });
  }
  
  log('\nüìÅ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: test-report.json', 'cyan');
}

async function main() {
  log('üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö', 'bright');
  log('========================================================', 'bright');
  
  const results = [];
  
  // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  results.push(runCommand(
    'npm run setup:test-db',
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
  ));
  
  // 2. –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π
  results.push(runCommand(
    'npm run test:models',
    '–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π (Database, User, Company, Equipment, etc.)'
  ));
  
  // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API
  results.push(runCommand(
    'npm run test:routes',
    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API –º–∞—Ä—à—Ä—É—Ç–æ–≤'
  ));
  
  // 4. –¢–µ—Å—Ç—ã middleware
  results.push(runCommand(
    'npm test tests/backend/middleware',
    '–¢–µ—Å—Ç—ã middleware (auth, logging, validation)'
  ));
  
  // 5. –¢–µ—Å—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
  results.push(runCommand(
    'npm test tests/backend/services',
    '–¢–µ—Å—Ç—ã –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å–æ–≤ (AuctionService, NotificationService)'
  ));
  
  // 6. –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Å—Ç—ã
  results.push(runCommand(
    'npm run test:frontend',
    '–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Å—Ç—ã (NotificationCenter, AuctionTimer, RealTimeUpdater)'
  ));
  
  // 7. UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  results.push(runCommand(
    'npm run test:ui',
    'UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
  ));
  
  // 8. E2E —Ç–µ—Å—Ç—ã
  results.push(runCommand(
    'npm run test:e2e',
    'End-to-End —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤'
  ));
  
  // 9. –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
  results.push(runCommand(
    'npm run test:coverage',
    '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏'
  ));
  
  // 10. –õ–∏–Ω—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  results.push(runCommand(
    'npm run lint',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ (ESLint)'
  ));
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const report = generateTestReport(results);
  displaySummary(report);
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  process.exit(report.summary.failed === 0 ? 0 : 1);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  main().catch(error => {
    log('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', 'red');
    console.error(error);
    process.exit(1);
  });
}

module.exports = { runCommand, generateTestReport };
