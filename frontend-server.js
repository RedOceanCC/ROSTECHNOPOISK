#!/usr/bin/env node

const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

const PORT = 3000;

// MIME —Ç–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
  '.html': 'text/html',
  '.js': 'text/javascript',
  '.css': 'text/css',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.wav': 'audio/wav',
  '.mp4': 'video/mp4',
  '.woff': 'application/font-woff',
  '.ttf': 'application/font-ttf',
  '.eot': 'application/vnd.ms-fontobject',
  '.otf': 'application/font-otf',
  '.wasm': 'application/wasm'
};

const server = http.createServer((req, res) => {
  console.log(`${new Date().toLocaleTimeString()} - ${req.method} ${req.url}`);
  
  const parsedUrl = url.parse(req.url);
  let pathname = parsedUrl.pathname;
  
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω—é, –æ—Ç–¥–∞–µ–º index.html
  if (pathname === '/') {
    pathname = '/index.html';
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  const filePath = path.join(__dirname, pathname);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
      res.statusCode = 404;
      res.setHeader('Content-Type', 'text/html');
      res.end(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
          <meta charset="utf-8">
        </head>
        <body>
          <h1>404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
          <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª <code>${pathname}</code> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
          <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
        </body>
        </html>
      `);
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const ext = path.extname(filePath).toLowerCase();
    const contentType = mimeTypes[ext] || 'application/octet-stream';
    
    // –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–¥–∞–µ–º —Ñ–∞–π–ª
    fs.readFile(filePath, (err, data) => {
      if (err) {
        res.statusCode = 500;
        res.setHeader('Content-Type', 'text/plain');
        res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
        return;
      }
      
      res.statusCode = 200;
      res.setHeader('Content-Type', contentType);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      if (ext !== '.html') {
        res.setHeader('Cache-Control', 'public, max-age=31536000'); // 1 –≥–æ–¥
      } else {
        res.setHeader('Cache-Control', 'no-cache'); // HTML –Ω–µ –∫—ç—à–∏—Ä—É–µ–º
      }
      
      res.end(data);
    });
  });
});

server.listen(PORT, () => {
  console.log('üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –†–û–°–¢–ï–•–ù–û–ü–û–ò–°–ö –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: ${__dirname}`);
  console.log(`üîó –ê–¥—Ä–µ—Å: http://localhost:${PORT}`);
  console.log(`üìã –§–∞–π–ª—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}/ (index.html)`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}/test.html`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}/app.js`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}/style.css`);
  console.log('\nüöÄ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
  console.log('üéØ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001\n');
});

server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!`);
    console.error('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
    console.error('1. –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—ã');
    console.error('2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: PORT=3002 node frontend-server.js');
    process.exit(1);
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  }
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ Ctrl+C
process.on('SIGINT', () => {
  console.log('\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});
